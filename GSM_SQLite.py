import sqlite3
import pandas as pd
import winsound
import openpyxl
from openpyxl.chart import (LineChart, Reference)
import openpyxl.styles
'''вывод посуточной статистики для GSM. импортный файл - в МАЕ вывести в формате xlsx, потом в экселе переделать в csv'''

# подключаемся к базе данных
conn = sqlite3.connect('C:/SQLite/firstDB/stsDB.db')
# создаем курсор для выполнения запросов
cursor = conn.cursor()
start_date = '2023-05-08'
end_date = '2023-05-25' # надо брать на день позже

# используйте операторы сравнения для выборки строк в заданном диапазоне
query = f"SELECT * FROM GSMsts WHERE `Start Time` >= '{start_date}' AND `Start Time` <= '{end_date}'"

# выполняем запрос и получаем данные
cursor.execute(query)
data = cursor.fetchall()
data = [[None if col == 'NIL' else col for col in row] for row in data]
sts_df = pd.DataFrame(data, columns=[i[0] for i in cursor.description])
conn.close()
directory = 'C:/wHesron/sts/2G/'
csv_name = (f'2G_countersCS({end_date}')
output_comment = 'cluster_UH'  # что добавится в конце к названию файла

#sts_df = pd.read_excel(f"{directory}{csv_name}.xlsx", header=7)
#sts_df = pd.read_csv(f"{directory}{csv_name}.csv", sep=";", header=7)

sts_df['date'] = sts_df['Start Time'].str.split(' ').str[0]
sts_df['hour'] = sts_df['Start Time'].str.split(' ').str[1]
sts_df['date'] = pd.to_datetime(sts_df['date'])
sts_df['week'] = sts_df['date'].dt.isocalendar().week

list_1 = ['CH310:Number of Outgoing Internal Inter-Cell Handover Requests (None)' ,'CH313:Number of Successful Outgoing Internal Inter-Cell Handovers (None)',\
          'CH330:Outgoing External Inter-Cell Handover Requests (None)', 'CH333:Successful Outgoing External Inter-Cell Handovers (None)', 'CM30:Call Drops on SDCCH (None)',\
          'CM33:Call Drops on Traffic Channel (None)', 'K3000:SDCCH Seizure Requests (None)', 'K3001:Failed SDCCH Seizures due to Busy SDCCH (None)',\
          'K3003:Successful SDCCH Seizures (None)', 'K3004:Traffic Volume on SDCCH (Erl)', 'K3010A:TCH Seizure Requests (Traffic Channel) (None)',\
          'K3010B:TCH Seizure Requests in TCH Handovers (Traffic Channel) (None)', 'K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)',\
          'K3011B:Failed TCH Seizures in TCH Handovers due to Busy TCH (Traffic Channel) (None)', 'K3013A:Successful TCH Seizures (Traffic Channel) (None)',\
          'K3013B:Successful TCH Seizures in TCH handovers (Traffic Channel) (None)', 'K3014:Traffic Volume on TCH (Erl)', 'K3020:TCH Seizure Requests (Signaling Channel) (None)',\
          'K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)', 'K3023:Successful TCH Seizures (Signaling Channel) (None)',\
          'K3024:Traffic Volume on TCH (Signaling Channel) (Erl)', 'K3034:TCHH Traffic Volume (Erl)', 'S3655:Number of configured TRXs in a cell (None)',\
          'S3656:Number of available TRXs in a cell (None)']
list_2 = ['TRX Availability 2G %', 'TRXs Number', 'TCH traffic 2G, Erl', 'SDCCH taffic, Erl', 'SDCCH Congesstion, %', 'TCH Congestion excluding handover, %',\
          'TCH Congestion including handover, %', 'SDCCH Drop Rate, %', 'TCH Assignment Failure Rate, %', 'TCH traffic HalfRate, Erl', 'TCH Drop Rate, %', \
          'Handover Success Rate, %', 'Immediate assignment SR, %', 'Call completion success rate, %']

list_cluster_Gen = ['LABEL=UH29813, CellIndex=883, CGI=25094C3507475', 'LABEL=UH29812, CellIndex=882, CGI=25094C3507474', \
                'LABEL=UH29811, CellIndex=881, CGI=25094C3507473', 'LABEL=UH19473, CellIndex=880, CGI=25094C3504C11', \
                'LABEL=UH19472, CellIndex=879, CGI=25094C3504C10', 'LABEL=UH19471, CellIndex=878, CGI=25094C3504C0F', \
                'LABEL=UH08216, CellIndex=259, CGI=25094C3502018', 'LABEL=UH08215, CellIndex=258, CGI=25094C3502017', \
                'LABEL=UH08214, CellIndex=257, CGI=25094C3502016', 'LABEL=UH09703, CellIndex=306, CGI=25094C35025E7', \
                'LABEL=UH09702, CellIndex=305, CGI=25094C35025E6', \
                'LABEL=UH08815, CellIndex=270, CGI=25094C350226F', \
                'LABEL=UH08812, CellIndex=267, CGI=25094C350226C', \
                'LABEL=UH09701, CellIndex=304, CGI=25094C35025E5', \
                'LABEL=UH08811, CellIndex=266, CGI=25094C350226B', \
                'LABEL=UH39252, CellIndex=311, CGI=25094C3509954', \
                'LABEL=UH39251, CellIndex=310, CGI=25094C3509953', \
                'LABEL=UH08816, CellIndex=271, CGI=25094C3502270', \
                'LABEL=UH08814, CellIndex=269, CGI=25094C350226E', \
                'LABEL=UH08213, CellIndex=256, CGI=25094C3502015', \
                'LABEL=UH08813, CellIndex=268, CGI=25094C350226D', \
                'LABEL=UH08212, CellIndex=255, CGI=25094C3502014', \
                'LABEL=UH08211, CellIndex=254, CGI=25094C3502013', \
                'LABEL=UH39253, CellIndex=312, CGI=25094C3509955', ]  # кластер
list_cluster_Kah = ['LABEL=UH29813, CellIndex=883, CGI=25094C3507475', \
                'LABEL=UH29812, CellIndex=882, CGI=25094C3507474', \
                'LABEL=UH29811, CellIndex=881, CGI=25094C3507473', \
                'LABEL=UH19473, CellIndex=880, CGI=25094C3504C11', \
                'LABEL=UH19472, CellIndex=879, CGI=25094C3504C10', \
                'LABEL=UH19471, CellIndex=878, CGI=25094C3504C0F', \
                'LABEL=UH08216, CellIndex=259, CGI=25094C3502018', \
                'LABEL=UH08215, CellIndex=258, CGI=25094C3502017', \
                'LABEL=UH08214, CellIndex=257, CGI=25094C3502016', \
                'LABEL=UH09703, CellIndex=306, CGI=25094C35025E7', \
                'LABEL=UH09702, CellIndex=305, CGI=25094C35025E6', \
                'LABEL=UH08815, CellIndex=270, CGI=25094C350226F', \
                'LABEL=UH08812, CellIndex=267, CGI=25094C350226C', \
                'LABEL=UH09701, CellIndex=304, CGI=25094C35025E5', \
                'LABEL=UH08811, CellIndex=266, CGI=25094C350226B', \
                'LABEL=UH39252, CellIndex=311, CGI=25094C3509954', \
                'LABEL=UH39251, CellIndex=310, CGI=25094C3509953', \
                'LABEL=UH08816, CellIndex=271, CGI=25094C3502270', \
                'LABEL=UH08814, CellIndex=269, CGI=25094C350226E', \
                'LABEL=UH08213, CellIndex=256, CGI=25094C3502015', \
                'LABEL=UH08813, CellIndex=268, CGI=25094C350226D', \
                'LABEL=UH08212, CellIndex=255, CGI=25094C3502014', \
                'LABEL=UH08211, CellIndex=254, CGI=25094C3502013', \
                'LABEL=UH39253, CellIndex=312, CGI=25094C3509955']  # кластер
list_cluster_1800 =[
'LABEL=UH39282, CellIndex=1119, CGI=25094C3509972', \
'LABEL=UH39962, CellIndex=965, CGI=25094C3509C1A', \
'LABEL=UH07611, CellIndex=1292, CGI=25094C3501DBB', \
'LABEL=UH09802, CellIndex=1257, CGI=25094C350264A', \
'LABEL=UH19033, CellIndex=1255, CGI=25094C3504A59', \
'LABEL=UH19642, CellIndex=1245, CGI=25094C3504CBA', \
'LABEL=UH09742, CellIndex=1251, CGI=25094C350260E', \
'LABEL=UH08461, CellIndex=1236, CGI=25094C350210D', \
'LABEL=UH08543, CellIndex=1229, CGI=25094C350215F', \
'LABEL=UH08541, CellIndex=1227, CGI=25094C350215D', \
'LABEL=UH19843, CellIndex=8, CGI=25094C3504D83', \
'LABEL=UH19182, CellIndex=1075, CGI=25094C3504AEE', \
'LABEL=UH18822, CellIndex=1069, CGI=25094C3504986', \
'LABEL=UH07232, CellIndex=1045, CGI=25094C3501C40', \
'LABEL=UH09951, CellIndex=1038, CGI=25094C35026DF', \
'LABEL=UH39182, CellIndex=1042, CGI=25094C350990E', \
'LABEL=UH19281, CellIndex=950, CGI=25094C3504B51', \
'LABEL=UH39952, CellIndex=962, CGI=25094C3509C10', \
'LABEL=UH29321, CellIndex=907, CGI=25094C3507289', \
'LABEL=UH29322, CellIndex=908, CGI=25094C350728A', \
'LABEL=UH17043, CellIndex=921, CGI=25094C3504293', \
'LABEL=UH6465, CellIndex=912, CGI=25094C3501941', \
'LABEL=UH05082, CellIndex=916, CGI=25094C35013DA', \
'LABEL=UH09633, CellIndex=763, CGI=25094C35025A1', \
'LABEL=UH19472, CellIndex=879, CGI=25094C3504C10', \
'LABEL=UH07601, CellIndex=866, CGI=25094C3501DB1', \
'LABEL=UH09901, CellIndex=871, CGI=25094C35026AD', \
'LABEL=UH07592, CellIndex=860, CGI=25094C3501DA8', \
'LABEL=UH08321, CellIndex=851, CGI=25094C3502081', \
'LABEL=UH19003, CellIndex=834, CGI=25094C3504A3B', \
'LABEL=UH08222, CellIndex=836, CGI=25094C350201E', \
'LABEL=UH06141, CellIndex=797, CGI=25094C35017FD', \
'LABEL=UH07633, CellIndex=447, CGI=25094C3501DD1', \
'LABEL=UH39221, CellIndex=784, CGI=25094C3509935', \
'LABEL=UH19251, CellIndex=749, CGI=25094C3504B33', \
'LABEL=UH06233, CellIndex=226, CGI=25094C3501859', \
'LABEL=UH19062, CellIndex=741, CGI=25094C3504A76', \
'LABEL=UH06232, CellIndex=225, CGI=25094C3501858', \
'LABEL=UH07133, CellIndex=525, CGI=25094C3501BDD', \
'LABEL=UH19101, CellIndex=758, CGI=25094C3504A9D', \
'LABEL=UH07382, CellIndex=700, CGI=25094C3501CD6', \
'LABEL=UH08232, CellIndex=706, CGI=25094C3502028', \
'LABEL=UH09652, CellIndex=735, CGI=25094C35025B4', \
'LABEL=UH09651, CellIndex=734, CGI=25094C35025B3', \
'LABEL=UH19172, CellIndex=712, CGI=25094C3504AE4', \
'LABEL=UH08073, CellIndex=724, CGI=25094C3501F89', \
'LABEL=UH08072, CellIndex=723, CGI=25094C3501F88', \
'LABEL=UH06172, CellIndex=184, CGI=25094C350181C', \
'LABEL=UH07031, CellIndex=694, CGI=25094C3501B77', \
'LABEL=UH39893, CellIndex=649, CGI=25094C3509BD5', \
'LABEL=UH07502, CellIndex=689, CGI=25094C3501D4E', \
'LABEL=UH39891, CellIndex=647, CGI=25094C3509BD3', \
'LABEL=UH07501, CellIndex=688, CGI=25094C3501D4D', \
'LABEL=UH27633, CellIndex=673, CGI=25094C3506BF1', \
'LABEL=UH29383, CellIndex=687, CGI=25094C35072C7', \
'LABEL=UH08301, CellIndex=813, CGI=25094C350206D', \
'LABEL=UH27632, CellIndex=672, CGI=25094C3506BF0', \
'LABEL=UH07503, CellIndex=690, CGI=25094C3501D4F', \
'LABEL=UH17053, CellIndex=681, CGI=25094C350429D', \
'LABEL=UH09602, CellIndex=631, CGI=25094C3502582', \
'LABEL=UH29381, CellIndex=685, CGI=25094C35072C5', \
'LABEL=UH09762, CellIndex=683, CGI=25094C3502622', \
'LABEL=UH19331, CellIndex=659, CGI=25094C3504B83', \
'LABEL=UH39211, CellIndex=668, CGI=25094C350992B', \
'LABEL=UH06023, CellIndex=182, CGI=25094C3501787', \
'LABEL=UH06022, CellIndex=181, CGI=25094C3501786', \
'LABEL=UH07172, CellIndex=663, CGI=25094C3501C04', \
'LABEL=UH19052, CellIndex=678, CGI=25094C3504A6C', \
'LABEL=UH19051, CellIndex=677, CGI=25094C3504A6B', \
'LABEL=UH07542, CellIndex=820, CGI=25094C3501D76', \
'LABEL=UH07393, CellIndex=807, CGI=25094C3501CE1', \
'LABEL=UH19163, CellIndex=612, CGI=25094C3504ADB', \
'LABEL=UH09612, CellIndex=637, CGI=25094C350258C', \
'LABEL=UH09753, CellIndex=643, CGI=25094C3502619', \
'LABEL=UH07662, CellIndex=534, CGI=25094C3501DEE', \
'LABEL=UH09863, CellIndex=618, CGI=25094C3502687', \
'LABEL=UH19513, CellIndex=652, CGI=25094C3504C39', \
'LABEL=UH17021, CellIndex=644, CGI=25094C350427D', \
'LABEL=UH09712, CellIndex=640, CGI=25094C35025F0', \
'LABEL=UH09751, CellIndex=641, CGI=25094C3502617', \
'LABEL=UH08693, CellIndex=825, CGI=25094C35021F5', \
'LABEL=UH19353, CellIndex=496, CGI=25094C3504B99', \
'LABEL=UH19253, CellIndex=751, CGI=25094C3504B35', \
'LABEL=UH07431, CellIndex=501, CGI=25094C3501D07', \
'LABEL=UH19393, CellIndex=604, CGI=25094C3504BC1', \
'LABEL=UH07141, CellIndex=419, CGI=25094C3501BE5', \
'LABEL=UH17033, CellIndex=579, CGI=25094C3504289', \
'LABEL=UH09813, CellIndex=491, CGI=25094C3502655', \
'LABEL=UH09733, CellIndex=482, CGI=25094C3502605', \
'LABEL=UH09522, CellIndex=472, CGI=25094C3502532', \
'LABEL=UH09722, CellIndex=478, CGI=25094C35025FA', \
'LABEL=UH09811, CellIndex=489, CGI=25094C3502653', \
'LABEL=UH09721, CellIndex=477, CGI=25094C35025F9', \
'LABEL=UH19392, CellIndex=603, CGI=25094C3504BC0', \
'LABEL=UH07112, CellIndex=360, CGI=25094C3501BC8', \
'LABEL=UH07111, CellIndex=359, CGI=25094C3501BC7', \
'LABEL=UH06111, CellIndex=371, CGI=25094C35017DF', \
'LABEL=UH17032, CellIndex=578, CGI=25094C3504288', \
'LABEL=UH29831, CellIndex=613, CGI=25094C3507487', \
'LABEL=UH19161, CellIndex=610, CGI=25094C3504AD9', \
'LABEL=UH08312, CellIndex=625, CGI=25094C3502078', \
'LABEL=UH18052, CellIndex=744, CGI=25094C3504684', \
'LABEL=UH09622, CellIndex=560, CGI=25094C3502596', \
'LABEL=UH07352, CellIndex=425, CGI=25094C3501CB8', \
'LABEL=UH19203, CellIndex=620, CGI=25094C3504B03', \
'LABEL=UH09891, CellIndex=347, CGI=25094C35026A3', \
'LABEL=UH17031, CellIndex=577, CGI=25094C3504287', \
'LABEL=UH19763, CellIndex=609, CGI=25094C3504D33', \
'LABEL=UH09862, CellIndex=617, CGI=25094C3502686', \
'LABEL=UH07472, CellIndex=621, CGI=25094C3501D30', \
'LABEL=UH08251, CellIndex=461, CGI=25094C350203B', \
'LABEL=UH19083, CellIndex=601, CGI=25094C3504A8B', \
'LABEL=UH06181, CellIndex=413, CGI=25094C3501825', \
'LABEL=UH08452, CellIndex=342, CGI=25094C3502104', \
'LABEL=UH19023, CellIndex=431, CGI=25094C3504A4F', \
'LABEL=UH07631, CellIndex=445, CGI=25094C3501DCF', \
'LABEL=UH08421, CellIndex=810, CGI=25094C35020E5', \
'LABEL=UH07363, CellIndex=793, CGI=25094C3501CC3', \
'LABEL=UH08302, CellIndex=814, CGI=25094C350206E', \
'LABEL=UH19021, CellIndex=429, CGI=25094C3504A4D', \
'LABEL=UH08451, CellIndex=341, CGI=25094C3502103', \
'LABEL=UH07672, CellIndex=450, CGI=25094C3501DF8', \
'LABEL=UH19082, CellIndex=600, CGI=25094C3504A8A', \
'LABEL=UH08453, CellIndex=343, CGI=25094C3502105', \
'LABEL=UH07673, CellIndex=451, CGI=25094C3501DF9', \
'LABEL=UH19761, CellIndex=607, CGI=25094C3504D31', \
'LABEL=UH06182, CellIndex=414, CGI=25094C3501826', \
'LABEL=UH07563, CellIndex=436, CGI=25094C3501D8B', \
'LABEL=UH19762, CellIndex=608, CGI=25094C3504D32', \
'LABEL=UH08252, CellIndex=462, CGI=25094C350203C', \
'LABEL=UH18051, CellIndex=743, CGI=25094C3504683', \
'LABEL=UH07511, CellIndex=398, CGI=25094C3501D57', \
'LABEL=UH09892, CellIndex=348, CGI=25094C35026A4', \
'LABEL=UH07561, CellIndex=435, CGI=25094C3501D89', \
'LABEL=UH08253, CellIndex=463, CGI=25094C350203D', \
'LABEL=UH18053, CellIndex=745, CGI=25094C3504685', \
'LABEL=UH09883, CellIndex=367, CGI=25094C350269B', \
'LABEL=UH46001, CellIndex=506, CGI=25094C350B3B1', \
'LABEL=UH19092, CellIndex=492, CGI=25094C3504A94', \
'LABEL=UH19093, CellIndex=493, CGI=25094C3504A95', \
'LABEL=UH08381, CellIndex=467, CGI=25094C35020BD', \
'LABEL=UH46002, CellIndex=507, CGI=25094C350B3B2', \
'LABEL=UH19081, CellIndex=599, CGI=25094C3504A89', \
'LABEL=UH06113, CellIndex=372, CGI=25094C35017E1', \
'LABEL=UH07021, CellIndex=376, CGI=25094C3501B6D', \
'LABEL=UH19391, CellIndex=602, CGI=25094C3504BBF', \
'LABEL=UH06222, CellIndex=402, CGI=25094C350184E', \
'LABEL=UH07022, CellIndex=377, CGI=25094C3501B6E', \
'LABEL=UH07043, CellIndex=486, CGI=25094C3501B83', \
'LABEL=UH06223, CellIndex=403, CGI=25094C350184F', \
'LABEL=UH19351, CellIndex=494, CGI=25094C3504B97', \
'LABEL=UH09521, CellIndex=471, CGI=25094C3502531', \
'LABEL=UH09731, CellIndex=480, CGI=25094C3502603', \
'LABEL=UH09661, CellIndex=474, CGI=25094C35025BD', \
'LABEL=UH09662, CellIndex=475, CGI=25094C35025BE', \
'LABEL=UH09732, CellIndex=481, CGI=25094C3502604', \
'LABEL=UH09812, CellIndex=490, CGI=25094C3502654', \
'LABEL=UH09663, CellIndex=476, CGI=25094C35025BF', \
'LABEL=UH09523, CellIndex=473, CGI=25094C3502533', \
'LABEL=UH09723, CellIndex=479, CGI=25094C35025FB', \
'LABEL=UH06013, CellIndex=412, CGI=25094C350177D', \
'LABEL=UH19162, CellIndex=611, CGI=25094C3504ADA', \
'LABEL=UH07131, CellIndex=523, CGI=25094C3501BDB', \
'LABEL=UH07061, CellIndex=513, CGI=25094C3501B95', \
'LABEL=UH07132, CellIndex=524, CGI=25094C3501BDC', \
'LABEL=UH07143, CellIndex=421, CGI=25094C3501BE7', \
'LABEL=UH07341, CellIndex=439, CGI=25094C3501CAD', \
'LABEL=UH19252, CellIndex=750, CGI=25094C3504B34', \
'LABEL=UH07432, CellIndex=502, CGI=25094C3501D08', \
'LABEL=UH07342, CellIndex=440, CGI=25094C3501CAE', \
'LABEL=UH39201, CellIndex=770, CGI=25094C3509921', \
'LABEL=UH19352, CellIndex=495, CGI=25094C3504B98', \
'LABEL=UH07343, CellIndex=441, CGI=25094C3501CAF', \
'LABEL=UH07433, CellIndex=503, CGI=25094C3501D09', \
'LABEL=UH39202, CellIndex=771, CGI=25094C3509922', \
'LABEL=UH08423, CellIndex=812, CGI=25094C35020E7', \
'LABEL=UH08691, CellIndex=823, CGI=25094C35021F3', \
'LABEL=UH09711, CellIndex=639, CGI=25094C35025EF', \
'LABEL=UH39203, CellIndex=772, CGI=25094C3509923', \
'LABEL=UH07661, CellIndex=533, CGI=25094C3501DED', \
'LABEL=UH08422, CellIndex=811, CGI=25094C35020E6', \
'LABEL=UH09861, CellIndex=616, CGI=25094C3502685', \
'LABEL=UH17022, CellIndex=645, CGI=25094C350427E', \
'LABEL=UH09752, CellIndex=642, CGI=25094C3502618', \
'LABEL=UH19202, CellIndex=619, CGI=25094C3504B02', \
'LABEL=UH17023, CellIndex=646, CGI=25094C350427F', \
'LABEL=UH19582, CellIndex=605, CGI=25094C3504C7E', \
'LABEL=UH19583, CellIndex=606, CGI=25094C3504C7F', \
'LABEL=UH09611, CellIndex=636, CGI=25094C350258B', \
'LABEL=UH09582, CellIndex=557, CGI=25094C350256E', \
'LABEL=UH19512, CellIndex=651, CGI=25094C3504C38', \
'LABEL=UH09601, CellIndex=630, CGI=25094C3502581', \
'LABEL=UH09613, CellIndex=638, CGI=25094C350258D', \
'LABEL=UH29832, CellIndex=614, CGI=25094C3507488', \
'LABEL=UH29833, CellIndex=615, CGI=25094C3507489', \
'LABEL=UH08692, CellIndex=824, CGI=25094C35021F4', \
'LABEL=UH06143, CellIndex=798, CGI=25094C35017FF', \
'LABEL=UH07171, CellIndex=662, CGI=25094C3501C03', \
'LABEL=UH19602, CellIndex=675, CGI=25094C3504C92', \
'LABEL=UH46003, CellIndex=508, CGI=25094C350B3B3', \
'LABEL=UH19511, CellIndex=650, CGI=25094C3504C37', \
'LABEL=UH17051, CellIndex=679, CGI=25094C350429B', \
'LABEL=UH19603, CellIndex=676, CGI=25094C3504C93', \
'LABEL=UH17071, CellIndex=656, CGI=25094C35042AF', \
'LABEL=UH09761, CellIndex=682, CGI=25094C3502621', \
'LABEL=UH39892, CellIndex=648, CGI=25094C3509BD4', \
'LABEL=UH17052, CellIndex=680, CGI=25094C350429C', \
'LABEL=UH09763, CellIndex=684, CGI=25094C3502623', \
'LABEL=UH17072, CellIndex=657, CGI=25094C35042B0', \
'LABEL=UH19332, CellIndex=660, CGI=25094C3504B84', \
'LABEL=UH08311, CellIndex=624, CGI=25094C3502077', \
'LABEL=UH17073, CellIndex=658, CGI=25094C35042B1', \
'LABEL=UH09603, CellIndex=632, CGI=25094C3502583', \
'LABEL=UH39212, CellIndex=669, CGI=25094C350992C', \
'LABEL=UH19333, CellIndex=661, CGI=25094C3504B85', \
'LABEL=UH27631, CellIndex=671, CGI=25094C3506BEF', \
'LABEL=UH08313, CellIndex=626, CGI=25094C3502079', \
'LABEL=UH29382, CellIndex=686, CGI=25094C35072C6', \
'LABEL=UH19601, CellIndex=674, CGI=25094C3504C91', \
'LABEL=UH39213, CellIndex=670, CGI=25094C350992D', \
'LABEL=UH07541, CellIndex=819, CGI=25094C3501D75', \
'LABEL=UH07361, CellIndex=791, CGI=25094C3501CC1', \
'LABEL=UH09631, CellIndex=761, CGI=25094C350259F', \
'LABEL=UH07033, CellIndex=695, CGI=25094C3501B79', \
'LABEL=UH09792, CellIndex=714, CGI=25094C3502640', \
'LABEL=UH08071, CellIndex=722, CGI=25094C3501F87', \
'LABEL=UH09793, CellIndex=715, CGI=25094C3502641', \
'LABEL=UH19171, CellIndex=711, CGI=25094C3504AE3', \
'LABEL=UH06173, CellIndex=185, CGI=25094C350181D', \
'LABEL=UH19173, CellIndex=713, CGI=25094C3504AE5', \
'LABEL=UH07173, CellIndex=664, CGI=25094C3501C05', \
'LABEL=UH09653, CellIndex=736, CGI=25094C35025B5', \
'LABEL=UH07381, CellIndex=699, CGI=25094C3501CD5', \
'LABEL=UH07383, CellIndex=701, CGI=25094C3501CD7', \
'LABEL=UH06011, CellIndex=410, CGI=25094C350177B', \
'LABEL=UH07142, CellIndex=420, CGI=25094C3501BE6', \
'LABEL=UH19061, CellIndex=740, CGI=25094C3504A75', \
'LABEL=UH19102, CellIndex=759, CGI=25094C3504A9E', \
'LABEL=UH19063, CellIndex=742, CGI=25094C3504A77', \
'LABEL=UH19103, CellIndex=760, CGI=25094C3504A9F', \
'LABEL=UH06012, CellIndex=411, CGI=25094C350177C', \
'LABEL=UH07151, CellIndex=385, CGI=25094C3501BEF', \
'LABEL=UH07582, CellIndex=237, CGI=25094C3501D9E', \
'LABEL=UH08402, CellIndex=551, CGI=25094C35020D2', \
'LABEL=UH08203, CellIndex=250, CGI=25094C350200B', \
'LABEL=UH07632, CellIndex=446, CGI=25094C3501DD0', \
'LABEL=UH08492, CellIndex=774, CGI=25094C350212C', \
'LABEL=UH39223, CellIndex=786, CGI=25094C3509937', \
'LABEL=UH08303, CellIndex=815, CGI=25094C350206F', \
'LABEL=UH08221, CellIndex=835, CGI=25094C350201D', \
'LABEL=UH08223, CellIndex=837, CGI=25094C350201F', \
'LABEL=UH7421, CellIndex=873, CGI=25094C3501CFD', \
'LABEL=UH08322, CellIndex=859, CGI=25094C3502082', \
'LABEL=UH19131, CellIndex=845, CGI=25094C3504ABB', \
'LABEL=UH19133, CellIndex=847, CGI=25094C3504ABD', \
'LABEL=UH08412, CellIndex=841, CGI=25094C35020DC', \
'LABEL=UH19132, CellIndex=846, CGI=25094C3504ABC', \
'LABEL=UH08323, CellIndex=852, CGI=25094C3502083', \
'LABEL=UH07593, CellIndex=861, CGI=25094C3501DA9', \
'LABEL=UH19001, CellIndex=832, CGI=25094C3504A39', \
'LABEL=UH09902, CellIndex=872, CGI=25094C35026AE', \
'LABEL=UH19002, CellIndex=833, CGI=25094C3504A3A', \
'LABEL=UH19471, CellIndex=878, CGI=25094C3504C0F', \
'LABEL=UH19473, CellIndex=880, CGI=25094C3504C11', \
'LABEL=UH29811, CellIndex=881, CGI=25094C3507473', \
'LABEL=UH29812, CellIndex=882, CGI=25094C3507474', \
'LABEL=UH29813, CellIndex=883, CGI=25094C3507475', \
'LABEL=UH6464, CellIndex=911, CGI=25094C3501940', \
'LABEL=UH09632, CellIndex=762, CGI=25094C35025A0', \
'LABEL=UH17041, CellIndex=919, CGI=25094C3504291', \
'LABEL=UH17042, CellIndex=920, CGI=25094C3504292', \
'LABEL=UH29323, CellIndex=909, CGI=25094C350728B', \
'LABEL=UH06001, CellIndex=925, CGI=25094C3501771', \
'LABEL=UH06002, CellIndex=926, CGI=25094C3501772', \
'LABEL=UH39951, CellIndex=961, CGI=25094C3509C0F', \
'LABEL=UH39953, CellIndex=963, CGI=25094C3509C11', \
'LABEL=UH06361, CellIndex=944, CGI=25094C35018D9', \
'LABEL=UH06362, CellIndex=945, CGI=25094C35018DA', \
'LABEL=UH06363, CellIndex=946, CGI=25094C35018DB', \
'LABEL=UH19282, CellIndex=951, CGI=25094C3504B52', \
'LABEL=UH19283, CellIndex=952, CGI=25094C3504B53', \
'LABEL=UH39181, CellIndex=1041, CGI=25094C350990D', \
'LABEL=UH39183, CellIndex=1043, CGI=25094C350990F', \
'LABEL=UH09952, CellIndex=1039, CGI=25094C35026E0', \
'LABEL=UH09953, CellIndex=1040, CGI=25094C35026E1', \
'LABEL=UH07231, CellIndex=1044, CGI=25094C3501C3F', \
'LABEL=UH07233, CellIndex=1046, CGI=25094C3501C41', \
'LABEL=UH09551, CellIndex=1062, CGI=25094C350254F', \
'LABEL=UH09552, CellIndex=1063, CGI=25094C3502550', \
'LABEL=UH09553, CellIndex=1064, CGI=25094C3502551', \
'LABEL=UH18821, CellIndex=1068, CGI=25094C3504985', \
'LABEL=UH18823, CellIndex=1070, CGI=25094C3504987', \
'LABEL=UH19181, CellIndex=1074, CGI=25094C3504AED', \
'LABEL=UH19183, CellIndex=1076, CGI=25094C3504AEF', \
'LABEL=UH19841, CellIndex=6, CGI=25094C3504D81', \
'LABEL=UH19842, CellIndex=7, CGI=25094C3504D82', \
'LABEL=UH08542, CellIndex=1228, CGI=25094C350215E', \
'LABEL=UH09741, CellIndex=1250, CGI=25094C350260D', \
'LABEL=UH08463, CellIndex=1237, CGI=25094C350210F', \
'LABEL=UH19641, CellIndex=1244, CGI=25094C3504CB9', \
'LABEL=UH19031, CellIndex=1253, CGI=25094C3504A57', \
'LABEL=UH09743, CellIndex=1252, CGI=25094C350260F', \
'LABEL=UH19643, CellIndex=1246, CGI=25094C3504CBB', \
'LABEL=UH19032, CellIndex=1254, CGI=25094C3504A58', \
'LABEL=UH09801, CellIndex=1256, CGI=25094C3502649', \
'LABEL=UH09803, CellIndex=1258, CGI=25094C350264B', \
'LABEL=UH07462, CellIndex=1288, CGI=25094C3501D26', \
'LABEL=UH07463, CellIndex=1289, CGI=25094C3501D27', \
'LABEL=UH07613, CellIndex=1293, CGI=25094C3501DBD', \
'LABEL=UH39961, CellIndex=964, CGI=25094C3509C19', \
'LABEL=UH39963, CellIndex=966, CGI=25094C3509C1B', \
'LABEL=UH39281, CellIndex=1118, CGI=25094C3509971', \
'LABEL=UH39283, CellIndex=1120, CGI=25094C3509973', \
'LABEL=UH27091, CellIndex=1302, CGI=25094C35069D3', \
'LABEL=UH27092, CellIndex=1303, CGI=25094C35069D4', \
'LABEL=UH27093, CellIndex=1304, CGI=25094C35069D5', \
'LABEL=UH19192, CellIndex=357, CGI=25094C3504AF8', \
'LABEL=UH08443, CellIndex=337, CGI=25094C35020FB', \
'LABEL=UH08442, CellIndex=336, CGI=25094C35020FA', \
'LABEL=UH19012, CellIndex=397, CGI=25094C3504A44', \
'LABEL=UH07373, CellIndex=315, CGI=25094C3501CCD', \
'LABEL=UH08433, CellIndex=331, CGI=25094C35020F1', \
'LABEL=UH09623, CellIndex=561, CGI=25094C3502597', \
'LABEL=UH19452, CellIndex=568, CGI=25094C3504BFC', \
'LABEL=UH09882, CellIndex=366, CGI=25094C350269A', \
'LABEL=UH07522, CellIndex=319, CGI=25094C3501D62', \
'LABEL=UH18333, CellIndex=309, CGI=25094C350479D', \
'LABEL=UH09702, CellIndex=305, CGI=25094C35025E6', \
'LABEL=UH08812, CellIndex=267, CGI=25094C350226C', \
'LABEL=UH07702, CellIndex=456, CGI=25094C3501E16', \
'LABEL=UH09701, CellIndex=304, CGI=25094C35025E5', \
'LABEL=UH29842, CellIndex=768, CGI=25094C3507492', \
'LABEL=UH09581, CellIndex=556, CGI=25094C350256D', \
'LABEL=UH07653, CellIndex=188, CGI=25094C3501DE5', \
'LABEL=UH29841, CellIndex=767, CGI=25094C3507491', \
'LABEL=UH29503, CellIndex=223, CGI=25094C350733F', \
'LABEL=UH08353, CellIndex=262, CGI=25094C35020A1', \
'LABEL=UH08813, CellIndex=268, CGI=25094C350226D', \
'LABEL=UH08212, CellIndex=255, CGI=25094C3502014', \
'LABEL=UH08202, CellIndex=249, CGI=25094C350200A', \
'LABEL=UH07082, CellIndex=204, CGI=25094C3501BAA', \
'LABEL=UH08351, CellIndex=260, CGI=25094C350209F', \
'LABEL=UH07311, CellIndex=386, CGI=25094C3501C8F', \
'LABEL=UH29131, CellIndex=215, CGI=25094C35071CB', \
'LABEL=UH18033, CellIndex=353, CGI=25094C3504671', \
'LABEL=UH09503, CellIndex=211, CGI=25094C350251F', \
'LABEL=UH19363, CellIndex=202, CGI=25094C3504BA3', \
'LABEL=UH07313, CellIndex=388, CGI=25094C3501C91', \
'LABEL=UH18011, CellIndex=189, CGI=25094C350465B', \
'LABEL=UH07652, CellIndex=187, CGI=25094C3501DE4', \
'LABEL=UH06021, CellIndex=180, CGI=25094C3501785', \
'LABEL=UH06171, CellIndex=183, CGI=25094C350181B', \
'LABEL=UH07651, CellIndex=186, CGI=25094C3501DE3', \
'LABEL=UH18542, CellIndex=141, CGI=25094C350486E', \
'LABEL=UH18541, CellIndex=140, CGI=25094C350486D', \
'LABEL=UH18031, CellIndex=351, CGI=25094C350466F', \
'LABEL=UH08403, CellIndex=552, CGI=25094C35020D3', \
'LABEL=UH09912, CellIndex=350, CGI=25094C35026B8', \
'LABEL=UH08401, CellIndex=550, CGI=25094C35020D1', \
'LABEL=UH06183, CellIndex=415, CGI=25094C3501827', \
'LABEL=UH7422, CellIndex=874, CGI=25094C3501CFE', \
'LABEL=UH39901, CellIndex=922, CGI=25094C3509BDD', \
'LABEL=UH39902, CellIndex=923, CGI=25094C3509BDE', \
'LABEL=UH39903, CellIndex=924, CGI=25094C3509BDF', \
'LABEL=UH09911, CellIndex=349, CGI=25094C35026B7', \
'LABEL=UH07513, CellIndex=399, CGI=25094C3501D59', \
'LABEL=UH07113, CellIndex=361, CGI=25094C3501BC9', \
'LABEL=UH18043, CellIndex=580, CGI=25094C350467B', \
'LABEL=UH09511, CellIndex=138, CGI=25094C3502527', \
'LABEL=UH09512, CellIndex=139, CGI=25094C3502528', \
'LABEL=UH18543, CellIndex=142, CGI=25094C350486F', \
'LABEL=UH06102, CellIndex=149, CGI=25094C35017D6', \
'LABEL=UH06103, CellIndex=150, CGI=25094C35017D7', \
'LABEL=UH18032, CellIndex=352, CGI=25094C3504670', \
'LABEL=UH18013, CellIndex=190, CGI=25094C350465D', \
'LABEL=UH19361, CellIndex=200, CGI=25094C3504BA1', \
'LABEL=UH09501, CellIndex=209, CGI=25094C350251D', \
'LABEL=UH19362, CellIndex=201, CGI=25094C3504BA2', \
'LABEL=UH09502, CellIndex=210, CGI=25094C350251E', \
'LABEL=UH07581, CellIndex=236, CGI=25094C3501D9D', \
'LABEL=UH07152, CellIndex=381, CGI=25094C3501BF0', \
'LABEL=UH39222, CellIndex=785, CGI=25094C3509936', \
'LABEL=UH19071, CellIndex=593, CGI=25094C3504A7F', \
'LABEL=UH39253, CellIndex=312, CGI=25094C3509955', \
'LABEL=UH09941, CellIndex=574, CGI=25094C35026D5', \
'LABEL=UH07081, CellIndex=203, CGI=25094C3501BA9', \
'LABEL=UH08201, CellIndex=248, CGI=25094C3502009', \
'LABEL=UH07083, CellIndex=205, CGI=25094C3501BAB', \
'LABEL=UH29501, CellIndex=221, CGI=25094C350733D', \
'LABEL=UH09583, CellIndex=558, CGI=25094C350256F', \
'LABEL=UH19072, CellIndex=594, CGI=25094C3504A80', \
'LABEL=UH29132, CellIndex=216, CGI=25094C35071CC', \
'LABEL=UH08211, CellIndex=254, CGI=25094C3502013', \
'LABEL=UH29502, CellIndex=222, CGI=25094C350733E', \
'LABEL=UH19073, CellIndex=595, CGI=25094C3504A81', \
'LABEL=UH08213, CellIndex=256, CGI=25094C3502015', \
'LABEL=UH29133, CellIndex=217, CGI=25094C35071CD', \
'LABEL=UH08352, CellIndex=261, CGI=25094C35020A0', \
'LABEL=UH08491, CellIndex=773, CGI=25094C350212B', \
'LABEL=UH07403, CellIndex=802, CGI=25094C3501CEB', \
'LABEL=UH07441, CellIndex=389, CGI=25094C3501D11', \
'LABEL=UH07312, CellIndex=387, CGI=25094C3501C90', \
'LABEL=UH19011, CellIndex=396, CGI=25094C3504A43', \
'LABEL=UH09881, CellIndex=365, CGI=25094C3502699', \
'LABEL=UH39251, CellIndex=310, CGI=25094C3509953', \
'LABEL=UH06231, CellIndex=224, CGI=25094C3501857', \
'LABEL=UH39252, CellIndex=311, CGI=25094C3509954', \
'LABEL=UH18331, CellIndex=307, CGI=25094C350479B', \
'LABEL=UH07701, CellIndex=455, CGI=25094C3501E15', \
'LABEL=UH08811, CellIndex=266, CGI=25094C350226B', \
'LABEL=UH18332, CellIndex=308, CGI=25094C350479C', \
'LABEL=UH07703, CellIndex=457, CGI=25094C3501E17', \
'LABEL=UH09703, CellIndex=306, CGI=25094C35025E7', \
'LABEL=UH19193, CellIndex=358, CGI=25094C3504AF9', \
'LABEL=UH07523, CellIndex=320, CGI=25094C3501D63', \
'LABEL=UH19451, CellIndex=567, CGI=25094C3504BFB', \
'LABEL=UH07372, CellIndex=314, CGI=25094C3501CCC', \
'LABEL=UH07351, CellIndex=424, CGI=25094C3501CB7', \
'LABEL=UH19022, CellIndex=430, CGI=25094C3504A4E', \
'LABEL=UH09621, CellIndex=559, CGI=25094C3502595', \
'LABEL=UH08431, CellIndex=330, CGI=25094C35020EF', \
'LABEL=UH07371, CellIndex=313, CGI=25094C3501CCB', \
'LABEL=UH09942, CellIndex=575, CGI=25094C35026D6', \
'LABEL=UH09943, CellIndex=576, CGI=25094C35026D7', \
'LABEL=UH08441, CellIndex=335, CGI=25094C35020F9', \
'LABEL=UH29843, CellIndex=769, CGI=25094C3507493', \
'LABEL=UH07583, CellIndex=238, CGI=25094C3501D9F', \
'LABEL=UH07452, CellIndex=787, CGI=25094C3501D1C', \
'LABEL=UH07362, CellIndex=792, CGI=25094C3501CC2', \
'LABEL=UH06463, CellIndex=915, CGI=25094C350193F', \
'LABEL=UH06462, CellIndex=914, CGI=25094C350193E', \
'LABEL=UH06461, CellIndex=913, CGI=25094C350193D', \
'LABEL=UH07421, CellIndex=873, CGI=25094C3501CFD', \
'LABEL=UH07662, CellIndex=538, CGI=25094C3501DEE', \
'LABEL=UH07661, CellIndex=537, CGI=25094C3501DED', \
'LABEL=UH07422, CellIndex=874, CGI=25094C3501CFE', \
'LABEL=UH05081, CellIndex=910, CGI=25094C35013D9'
]  # кластер
list_cluster_900 = [
    'LABEL=UH27096, CellIndex=1307, CGI=25094C35069D8', \
    'LABEL=UH07614, CellIndex=1294, CGI=25094C3501DBE', \
    'LABEL=UH07465, CellIndex=1290, CGI=25094C3501D29', \
    'LABEL=UH19366, CellIndex=1262, CGI=25094C3504BA6', \
    'LABEL=UH19644, CellIndex=1247, CGI=25094C3504CBC', \
    'LABEL=UH16036, CellIndex=1226, CGI=25094C3503EA4', \
    'LABEL=UH16034, CellIndex=1224, CGI=25094C3503EA2', \
    'LABEL=UH08465, CellIndex=1239, CGI=25094C3502111', \
    'LABEL=UH18826, CellIndex=1073, CGI=25094C350498A', \
    'LABEL=UH09556, CellIndex=1067, CGI=25094C3502554', \
    'LABEL=UH09554, CellIndex=1065, CGI=25094C3502552', \
    'LABEL=UH07236, CellIndex=1049, CGI=25094C3501C44', \
    'LABEL=UH07234, CellIndex=1047, CGI=25094C3501C42', \
    'LABEL=UH19286, CellIndex=954, CGI=25094C3504B56', \
    'LABEL=UH06366, CellIndex=949, CGI=25094C35018DE', \
    'LABEL=UH06364, CellIndex=947, CGI=25094C35018DC', \
    'LABEL=UH07455, CellIndex=789, CGI=25094C3501D1F', \
    'LABEL=UH06005, CellIndex=928, CGI=25094C3501775', \
    'LABEL=UH6462, CellIndex=914, CGI=25094C350193E', \
    'LABEL=UH7426, CellIndex=877, CGI=25094C3501D02', \
    'LABEL=UH07607, CellIndex=870, CGI=25094C3501DB7', \
    'LABEL=UH07595, CellIndex=862, CGI=25094C3501DAB', \
    'LABEL=UH08414, CellIndex=842, CGI=25094C35020DE', \
    'LABEL=UH19136, CellIndex=850, CGI=25094C3504AC0', \
    'LABEL=UH19134, CellIndex=848, CGI=25094C3504ABE', \
    'LABEL=UH07605, CellIndex=868, CGI=25094C3501DB5', \
    'LABEL=UH08325, CellIndex=854, CGI=25094C3502085', \
    'LABEL=UH08226, CellIndex=840, CGI=25094C3502022', \
    'LABEL=UH08224, CellIndex=838, CGI=25094C3502020', \
    'LABEL=UH06146, CellIndex=801, CGI=25094C3501802', \
    'LABEL=UH09634, CellIndex=764, CGI=25094C35025A2', \
    'LABEL=UH08215, CellIndex=258, CGI=25094C3502017', \
    'LABEL=UH08205, CellIndex=252, CGI=25094C350200D', \
    'LABEL=UH08356, CellIndex=265, CGI=25094C35020A4', \
    'LABEL=UH08214, CellIndex=257, CGI=25094C3502016', \
    'LABEL=UH08354, CellIndex=263, CGI=25094C35020A2', \
    'LABEL=UH07526, CellIndex=323, CGI=25094C3501D66', \
    'LABEL=UH08204, CellIndex=251, CGI=25094C350200C', \
    'LABEL=UH08075, CellIndex=726, CGI=25094C3501F8B', \
    'LABEL=UH08454, CellIndex=344, CGI=25094C3502106', \
    'LABEL=UH08255, CellIndex=465, CGI=25094C350203F', \
    'LABEL=UH07386, CellIndex=704, CGI=25094C3501CDA', \
    'LABEL=UH08455, CellIndex=345, CGI=25094C3502107', \
    'LABEL=UH08236, CellIndex=710, CGI=25094C350202C', \
    'LABEL=UH06235, CellIndex=228, CGI=25094C350185B', \
    'LABEL=UH06234, CellIndex=227, CGI=25094C350185A', \
    'LABEL=UH07135, CellIndex=527, CGI=25094C3501BDF', \
    'LABEL=UH07385, CellIndex=703, CGI=25094C3501CD9', \
    'LABEL=UH07046, CellIndex=488, CGI=25094C3501B86', \
    'LABEL=UH06016, CellIndex=409, CGI=25094C3501780', \
    'LABEL=UH08234, CellIndex=708, CGI=25094C350202A', \
    'LABEL=UH07034, CellIndex=696, CGI=25094C3501B7A', \
    'LABEL=UH07395, CellIndex=808, CGI=25094C3501CE3', \
    'LABEL=UH08396, CellIndex=780, CGI=25094C35020CC', \
    'LABEL=UH08695, CellIndex=827, CGI=25094C35021F7', \
    'LABEL=UH08235, CellIndex=709, CGI=25094C350202B', \
    'LABEL=UH19356, CellIndex=498, CGI=25094C3504B9C', \
    'LABEL=UH19255, CellIndex=753, CGI=25094C3504B37', \
    'LABEL=UH08395, CellIndex=779, CGI=25094C35020CB', \
    'LABEL=UH07325, CellIndex=548, CGI=25094C3501C9D', \
    'LABEL=UH07406, CellIndex=805, CGI=25094C3501CEE', \
    'LABEL=UH09736, CellIndex=485, CGI=25094C3502608', \
    'LABEL=UH19254, CellIndex=752, CGI=25094C3504B36', \
    'LABEL=UH09735, CellIndex=484, CGI=25094C3502607', \
    'LABEL=UH07144, CellIndex=422, CGI=25094C3501BE8', \
    'LABEL=UH19516, CellIndex=655, CGI=25094C3504C3C', \
    'LABEL=UH07446, CellIndex=392, CGI=25094C3501D16', \
    'LABEL=UH08385, CellIndex=469, CGI=25094C35020C1', \
    'LABEL=UH07055, CellIndex=511, CGI=25094C3501B8F', \
    'LABEL=UH06224, CellIndex=404, CGI=25094C3501850', \
    'LABEL=UH18056, CellIndex=748, CGI=25094C3504688', \
    'LABEL=UH09624, CellIndex=562, CGI=25094C3502598', \
    'LABEL=UH08386, CellIndex=470, CGI=25094C35020C2', \
    'LABEL=UH07514, CellIndex=400, CGI=25094C3501D5A', \
    'LABEL=UH19024, CellIndex=433, CGI=25094C3504A51', \
    'LABEL=UH07364, CellIndex=794, CGI=25094C3501CC4', \
    'LABEL=UH07525, CellIndex=322, CGI=25094C3501D65', \
    'LABEL=UH07365, CellIndex=795, CGI=25094C3501CC5', \
    'LABEL=UH07405, CellIndex=804, CGI=25094C3501CED', \
    'LABEL=UH18054, CellIndex=746, CGI=25094C3504686', \
    'LABEL=UH07025, CellIndex=379, CGI=25094C3501B71', \
    'LABEL=UH07156, CellIndex=384, CGI=25094C3501BF4', \
    'LABEL=UH07706, CellIndex=460, CGI=25094C3501E1A', \
    'LABEL=UH07316, CellIndex=395, CGI=25094C3501C94', \
    'LABEL=UH07475, CellIndex=623, CGI=25094C3501D33', \
    'LABEL=UH08446, CellIndex=340, CGI=25094C35020FE', \
    'LABEL=UH06226, CellIndex=406, CGI=25094C3501852', \
    'LABEL=UH07564, CellIndex=437, CGI=25094C3501D8C', \
    'LABEL=UH07566, CellIndex=438, CGI=25094C3501D8E', \
    'LABEL=UH19026, CellIndex=432, CGI=25094C3504A50', \
    'LABEL=UH07065, CellIndex=515, CGI=25094C3501B99', \
    'LABEL=UH07154, CellIndex=382, CGI=25094C3501BF2', \
    'LABEL=UH07045, CellIndex=487, CGI=25094C3501B85', \
    'LABEL=UH07155, CellIndex=383, CGI=25094C3501BF3', \
    'LABEL=UH07516, CellIndex=401, CGI=25094C3501D5C', \
    'LABEL=UH09625, CellIndex=563, CGI=25094C3502599', \
    'LABEL=UH07116, CellIndex=364, CGI=25094C3501BCC', \
    'LABEL=UH09626, CellIndex=564, CGI=25094C350259A', \
    'LABEL=UH08384, CellIndex=468, CGI=25094C35020C0', \
    'LABEL=UH07445, CellIndex=391, CGI=25094C3501D15', \
    'LABEL=UH08256, CellIndex=466, CGI=25094C3502040', \
    'LABEL=UH09734, CellIndex=483, CGI=25094C3502606', \
    'LABEL=UH08394, CellIndex=778, CGI=25094C35020CA', \
    'LABEL=UH07444, CellIndex=390, CGI=25094C3501D14', \
    'LABEL=UH19355, CellIndex=497, CGI=25094C3504B9B', \
    'LABEL=UH07056, CellIndex=512, CGI=25094C3501B90', \
    'LABEL=UH08694, CellIndex=826, CGI=25094C35021F6', \
    'LABEL=UH07324, CellIndex=547, CGI=25094C3501C9C', \
    'LABEL=UH07326, CellIndex=549, CGI=25094C3501C9E', \
    'LABEL=UH07636, CellIndex=449, CGI=25094C3501DD4', \
    'LABEL=UH19514, CellIndex=653, CGI=25094C3504C3A', \
    'LABEL=UH19515, CellIndex=654, CGI=25094C3504C3B', \
    'LABEL=UH07474, CellIndex=622, CGI=25094C3501D32', \
    'LABEL=UH08696, CellIndex=828, CGI=25094C35021F8', \
    'LABEL=UH07545, CellIndex=822, CGI=25094C3501D79', \
    'LABEL=UH07456, CellIndex=790, CGI=25094C3501D20', \
    'LABEL=UH07344, CellIndex=442, CGI=25094C3501CB0', \
    'LABEL=UH09604, CellIndex=633, CGI=25094C3502584', \
    'LABEL=UH07504, CellIndex=691, CGI=25094C3501D50', \
    'LABEL=UH08314, CellIndex=627, CGI=25094C350207A', \
    'LABEL=UH09605, CellIndex=634, CGI=25094C3502585', \
    'LABEL=UH08315, CellIndex=628, CGI=25094C350207B', \
    'LABEL=UH09635, CellIndex=765, CGI=25094C35025A3', \
    'LABEL=UH06144, CellIndex=799, CGI=25094C3501800', \
    'LABEL=UH07544, CellIndex=821, CGI=25094C3501D78', \
    'LABEL=UH09636, CellIndex=766, CGI=25094C35025A4', \
    'LABEL=UH08074, CellIndex=725, CGI=25094C3501F8A', \
    'LABEL=UH07174, CellIndex=665, CGI=25094C3501C06', \
    'LABEL=UH07175, CellIndex=666, CGI=25094C3501C07', \
    'LABEL=UH07176, CellIndex=667, CGI=25094C3501C08', \
    'LABEL=UH07035, CellIndex=697, CGI=25094C3501B7B', \
    'LABEL=UH07384, CellIndex=702, CGI=25094C3501CD8', \
    'LABEL=UH09654, CellIndex=737, CGI=25094C35025B6', \
    'LABEL=UH06015, CellIndex=408, CGI=25094C350177F', \
    'LABEL=UH07036, CellIndex=698, CGI=25094C3501B7C', \
    'LABEL=UH07054, CellIndex=510, CGI=25094C3501B8E', \
    'LABEL=UH06115, CellIndex=374, CGI=25094C35017E3', \
    'LABEL=UH07145, CellIndex=423, CGI=25094C3501BE9', \
    'LABEL=UH07134, CellIndex=526, CGI=25094C3501BDE', \
    'LABEL=UH06184, CellIndex=416, CGI=25094C3501828', \
    'LABEL=UH06185, CellIndex=417, CGI=25094C3501829', \
    'LABEL=UH07136, CellIndex=528, CGI=25094C3501BE0', \
    'LABEL=UH07064, CellIndex=514, CGI=25094C3501B98', \
    'LABEL=UH06186, CellIndex=418, CGI=25094C350182A', \
    'LABEL=UH07066, CellIndex=516, CGI=25094C3501B9A', \
    'LABEL=UH08254, CellIndex=464, CGI=25094C350203E', \
    'LABEL=UH07375, CellIndex=317, CGI=25094C3501CCF', \
    'LABEL=UH07675, CellIndex=453, CGI=25094C3501DFB', \
    'LABEL=UH07506, CellIndex=693, CGI=25094C3501D52', \
    'LABEL=UH07345, CellIndex=443, CGI=25094C3501CB1', \
    'LABEL=UH07676, CellIndex=454, CGI=25094C3501DFC', \
    'LABEL=UH07346, CellIndex=444, CGI=25094C3501CB2', \
    'LABEL=UH07674, CellIndex=452, CGI=25094C3501DFA', \
    'LABEL=UH08076, CellIndex=727, CGI=25094C3501F8C', \
    'LABEL=UH07704, CellIndex=458, CGI=25094C3501E18', \
    'LABEL=UH07376, CellIndex=318, CGI=25094C3501CD0', \
    'LABEL=UH07664, CellIndex=536, CGI=25094C3501DF0', \
    'LABEL=UH07705, CellIndex=459, CGI=25094C3501E19', \
    'LABEL=UH07665, CellIndex=537, CGI=25094C3501DF1', \
    'LABEL=UH07635, CellIndex=448, CGI=25094C3501DD3', \
    'LABEL=UH07374, CellIndex=316, CGI=25094C3501CCE', \
    'LABEL=UH08355, CellIndex=264, CGI=25094C35020A3', \
    'LABEL=UH07666, CellIndex=538, CGI=25094C3501DF2', \
    'LABEL=UH19455, CellIndex=570, CGI=25094C3504BFF', \
    'LABEL=UH08216, CellIndex=259, CGI=25094C3502018', \
    'LABEL=UH07505, CellIndex=692, CGI=25094C3501D51', \
    'LABEL=UH06145, CellIndex=800, CGI=25094C3501801', \
    'LABEL=UH08304, CellIndex=816, CGI=25094C3502070', \
    'LABEL=UH08225, CellIndex=839, CGI=25094C3502021', \
    'LABEL=UH08305, CellIndex=817, CGI=25094C3502071', \
    'LABEL=UH08306, CellIndex=818, CGI=25094C3502072', \
    'LABEL=UH08324, CellIndex=853, CGI=25094C3502084', \
    'LABEL=UH08326, CellIndex=855, CGI=25094C3502086', \
    'LABEL=UH19135, CellIndex=849, CGI=25094C3504ABF', \
    'LABEL=UH08415, CellIndex=843, CGI=25094C35020DF', \
    'LABEL=UH08416, CellIndex=844, CGI=25094C35020E0', \
    'LABEL=UH07606, CellIndex=869, CGI=25094C3501DB6', \
    'LABEL=UH07596, CellIndex=863, CGI=25094C3501DAC', \
    'LABEL=UH07604, CellIndex=867, CGI=25094C3501DB4', \
    'LABEL=UH7424, CellIndex=875, CGI=25094C3501D00', \
    'LABEL=UH7425, CellIndex=876, CGI=25094C3501D01', \
    'LABEL=UH6461, CellIndex=913, CGI=25094C350193D', \
    'LABEL=UH6463, CellIndex=915, CGI=25094C350193F', \
    'LABEL=UH06004, CellIndex=927, CGI=25094C3501774', \
    'LABEL=UH07454, CellIndex=788, CGI=25094C3501D1E', \
    'LABEL=UH06365, CellIndex=948, CGI=25094C35018DD', \
    'LABEL=UH19285, CellIndex=953, CGI=25094C3504B55', \
    'LABEL=UH07235, CellIndex=1048, CGI=25094C3501C43', \
    'LABEL=UH09555, CellIndex=1066, CGI=25094C3502553', \
    'LABEL=UH18824, CellIndex=1071, CGI=25094C3504988', \
    'LABEL=UH18825, CellIndex=1072, CGI=25094C3504989', \
    'LABEL=UH08464, CellIndex=1238, CGI=25094C3502110', \
    'LABEL=UH08466, CellIndex=1240, CGI=25094C3502112', \
    'LABEL=UH16044, CellIndex=1215, CGI=25094C3503EAC', \
    'LABEL=UH16045, CellIndex=1216, CGI=25094C3503EAD', \
    'LABEL=UH16046, CellIndex=1217, CGI=25094C3503EAE', \
    'LABEL=UH16035, CellIndex=1225, CGI=25094C3503EA3', \
    'LABEL=UH19645, CellIndex=1248, CGI=25094C3504CBD', \
    'LABEL=UH19646, CellIndex=1249, CGI=25094C3504CBE', \
    'LABEL=UH19365, CellIndex=535, CGI=25094C3504BA5', \
    'LABEL=UH07466, CellIndex=1291, CGI=25094C3501D2A', \
    'LABEL=UH07616, CellIndex=1295, CGI=25094C3501DC0', \
    'LABEL=UH27095, CellIndex=1306, CGI=25094C35069D7', \
    'LABEL=UH27094, CellIndex=1305, CGI=25094C35069D6', \
    'LABEL=UH08435, CellIndex=333, CGI=25094C35020F3', \
    'LABEL=UH07315, CellIndex=394, CGI=25094C3501C93', \
    'LABEL=UH07354, CellIndex=426, CGI=25094C3501CBA', \
    'LABEL=UH06236, CellIndex=229, CGI=25094C350185C', \
    'LABEL=UH07524, CellIndex=321, CGI=25094C3501D64', \
    'LABEL=UH19075, CellIndex=597, CGI=25094C3504A83', \
    'LABEL=UH07085, CellIndex=287, CGI=25094C3501BAD', \
    'LABEL=UH19074, CellIndex=596, CGI=25094C3504A82', \
    'LABEL=UH09656, CellIndex=739, CGI=25094C35025B8', \
    'LABEL=UH08445, CellIndex=339, CGI=25094C35020FD', \
    'LABEL=UH19256, CellIndex=754, CGI=25094C3504B38', \
    'LABEL=UH16025, CellIndex=302, CGI=25094C3503E99', \
    'LABEL=UH08335, CellIndex=299, CGI=25094C350208F', \
    'LABEL=UH07404, CellIndex=803, CGI=25094C3501CEC', \
    'LABEL=UH08814, CellIndex=269, CGI=25094C350226E', \
    'LABEL=UH18036, CellIndex=356, CGI=25094C3504674', \
    'LABEL=UH07366, CellIndex=796, CGI=25094C3501CC6', \
    'LABEL=UH06114, CellIndex=373, CGI=25094C35017E2', \
    'LABEL=UH07435, CellIndex=504, CGI=25094C3501D0B', \
    'LABEL=UH08404, CellIndex=553, CGI=25094C35020D4', \
    'LABEL=UH19456, CellIndex=571, CGI=25094C3504C00', \
    'LABEL=UH07484, CellIndex=368, CGI=25094C3501D3C', \
    'LABEL=UH8805, CellIndex=705, CGI=25094C3502265', \
    'LABEL=UH8796, CellIndex=1309, CGI=25094C350225C', \
    'LABEL=UH8795, CellIndex=865, CGI=25094C350225B', \
    'LABEL=UH8794, CellIndex=1308, CGI=25094C350225A', \
    'LABEL=UH8804, CellIndex=119, CGI=25094C3502264', \
    'LABEL=UH8806, CellIndex=707, CGI=25094C3502266', \
    'LABEL=UH07026, CellIndex=380, CGI=25094C3501B72', \
    'LABEL=UH18044, CellIndex=581, CGI=25094C350467C', \
    'LABEL=UH06225, CellIndex=405, CGI=25094C3501851', \
    'LABEL=UH07485, CellIndex=369, CGI=25094C3501D3D', \
    'LABEL=UH06116, CellIndex=375, CGI=25094C35017E4', \
    'LABEL=UH08405, CellIndex=554, CGI=25094C35020D5', \
    'LABEL=UH07114, CellIndex=362, CGI=25094C3501BCA', \
    'LABEL=UH07486, CellIndex=370, CGI=25094C3501D3E', \
    'LABEL=UH06014, CellIndex=407, CGI=25094C350177E', \
    'LABEL=UH08406, CellIndex=555, CGI=25094C35020D6', \
    'LABEL=UH07115, CellIndex=363, CGI=25094C3501BCB', \
    'LABEL=UH09606, CellIndex=635, CGI=25094C3502586', \
    'LABEL=UH08316, CellIndex=629, CGI=25094C350207C', \
    'LABEL=UH18035, CellIndex=355, CGI=25094C3504673', \
    'LABEL=UH08456, CellIndex=346, CGI=25094C3502108', \
    'LABEL=UH07436, CellIndex=505, CGI=25094C3501D0C', \
    'LABEL=UH07024, CellIndex=378, CGI=25094C3501B70', \
    'LABEL=UH08816, CellIndex=271, CGI=25094C3502270', \
    'LABEL=UH07396, CellIndex=809, CGI=25094C3501CE4', \
    'LABEL=UH18055, CellIndex=747, CGI=25094C3504687', \
    'LABEL=UH08436, CellIndex=334, CGI=25094C35020F4', \
    'LABEL=UH08336, CellIndex=300, CGI=25094C3502090', \
    'LABEL=UH16024, CellIndex=301, CGI=25094C3503E98', \
    'LABEL=UH09655, CellIndex=738, CGI=25094C35025B7', \
    'LABEL=UH16026, CellIndex=303, CGI=25094C3503E9A', \
    'LABEL=UH08206, CellIndex=253, CGI=25094C350200E', \
    'LABEL=UH07355, CellIndex=427, CGI=25094C3501CBB', \
    'LABEL=UH18034, CellIndex=354, CGI=25094C3504672', \
    'LABEL=UH07084, CellIndex=286, CGI=25094C3501BAC', \
    'LABEL=UH07086, CellIndex=288, CGI=25094C3501BAE', \
    'LABEL=UH19076, CellIndex=598, CGI=25094C3504A84', \
    'LABEL=UH08334, CellIndex=298, CGI=25094C350208E', \
    'LABEL=UH08815, CellIndex=270, CGI=25094C350226F', \
    'LABEL=UH08494, CellIndex=775, CGI=25094C350212E', \
    'LABEL=UH08495, CellIndex=776, CGI=25094C350212F', \
    'LABEL=UH18045, CellIndex=582, CGI=25094C350467D', \
    'LABEL=UH18046, CellIndex=583, CGI=25094C350467E', \
    'LABEL=UH07314, CellIndex=393, CGI=25094C3501C92', \
    'LABEL=UH07356, CellIndex=428, CGI=25094C3501CBC', \
    'LABEL=UH19454, CellIndex=569, CGI=25094C3504BFE', \
    'LABEL=UH08434, CellIndex=332, CGI=25094C35020F2', \
    'LABEL=UH07584, CellIndex=239, CGI=25094C3501DA0', \
    'LABEL=UH07585, CellIndex=240, CGI=25094C3501DA1', \
    'LABEL=UH19025, CellIndex=434, CGI=25094C3504A52', \
    'LABEL=UH07586, CellIndex=241, CGI=25094C3501DA2', \
    'LABEL=UH08444, CellIndex=338, CGI=25094C35020FC', \
    'LABEL=UH08496, CellIndex=777, CGI=25094C3502130'
    'LABEL=UH06464, CellIndex=911, CGI=25094C3501940', \
    'LABEL=UH07426, CellIndex=877, CGI=25094C3501D02', \
    'LABEL=UH07425, CellIndex=876, CGI=25094C3501D01', \
    'LABEL=UH07424, CellIndex=875, CGI=25094C3501D00', \
    'LABEL=UH06465, CellIndex=912, CGI=25094C3501941', \
    'LABEL=UH07666, CellIndex=533, CGI=25094C3501DF2', \
    'LABEL=UH07665, CellIndex=534, CGI=25094C3501DF1', \
    'LABEL=UH08806, CellIndex=707, CGI=25094C3502266', \
    'LABEL=UH08804, CellIndex=119, CGI=25094C3502264', \
    'LABEL=UH08796, CellIndex=1309, CGI=25094C350225C', \
    'LABEL=UH08794, CellIndex=1308, CGI=25094C350225A', \
    'LABEL=UH08795, CellIndex=865, CGI=25094C350225B', \
    'LABEL=UH08805, CellIndex=705, CGI=25094C3502265']  # кластер
cluster_UH = [
'LABEL=UH27096, CellIndex=1307, CGI=25094C35069D8',
'LABEL=UH27095, CellIndex=1306, CGI=25094C35069D7',
'LABEL=UH27094, CellIndex=1305, CGI=25094C35069D6',
'LABEL=UH27093, CellIndex=1304, CGI=25094C35069D5',
'LABEL=UH27092, CellIndex=1303, CGI=25094C35069D4',
'LABEL=UH27091, CellIndex=1302, CGI=25094C35069D3',
'LABEL=UH39283, CellIndex=1120, CGI=25094C3509973',
'LABEL=UH39282, CellIndex=1119, CGI=25094C3509972',
'LABEL=UH39281, CellIndex=1118, CGI=25094C3509971',
'LABEL=UH39962, CellIndex=965, CGI=25094C3509C1A',
'LABEL=UH39963, CellIndex=966, CGI=25094C3509C1B',
'LABEL=UH39961, CellIndex=964, CGI=25094C3509C19',
'LABEL=UH07616, CellIndex=1295, CGI=25094C3501DC0',
'LABEL=UH07614, CellIndex=1294, CGI=25094C3501DBE',
'LABEL=UH07613, CellIndex=1293, CGI=25094C3501DBD',
'LABEL=UH07466, CellIndex=1291, CGI=25094C3501D2A',
'LABEL=UH07465, CellIndex=1290, CGI=25094C3501D29',
'LABEL=UH07463, CellIndex=1289, CGI=25094C3501D27',
'LABEL=UH07462, CellIndex=1288, CGI=25094C3501D26',
'LABEL=UH19365, CellIndex=535, CGI=25094C3504BA5',
'LABEL=UH19366, CellIndex=1262, CGI=25094C3504BA6',
'LABEL=UH09803, CellIndex=1258, CGI=25094C350264B',
'LABEL=UH09802, CellIndex=1257, CGI=25094C350264A',
'LABEL=UH09801, CellIndex=1256, CGI=25094C3502649',
'LABEL=UH19033, CellIndex=1255, CGI=25094C3504A59',
'LABEL=UH19032, CellIndex=1254, CGI=25094C3504A58',
'LABEL=UH19646, CellIndex=1249, CGI=25094C3504CBE',
'LABEL=UH19645, CellIndex=1248, CGI=25094C3504CBD',
'LABEL=UH19644, CellIndex=1247, CGI=25094C3504CBC',
'LABEL=UH19643, CellIndex=1246, CGI=25094C3504CBB',
'LABEL=UH09743, CellIndex=1252, CGI=25094C350260F',
'LABEL=UH09742, CellIndex=1251, CGI=25094C350260E',
'LABEL=UH19031, CellIndex=1253, CGI=25094C3504A57',
'LABEL=UH19641, CellIndex=1244, CGI=25094C3504CB9',
'LABEL=UH08463, CellIndex=1237, CGI=25094C350210F',
'LABEL=UH08461, CellIndex=1236, CGI=25094C350210D',
'LABEL=UH09741, CellIndex=1250, CGI=25094C350260D',
'LABEL=UH16036, CellIndex=1226, CGI=25094C3503EA4',
'LABEL=UH16035, CellIndex=1225, CGI=25094C3503EA3',
'LABEL=UH16034, CellIndex=1224, CGI=25094C3503EA2',
'LABEL=UH16046, CellIndex=1217, CGI=25094C3503EAE',
'LABEL=UH16045, CellIndex=1216, CGI=25094C3503EAD',
'LABEL=UH16044, CellIndex=1215, CGI=25094C3503EAC',
'LABEL=UH08543, CellIndex=1229, CGI=25094C350215F',
'LABEL=UH08542, CellIndex=1228, CGI=25094C350215E',
'LABEL=UH08466, CellIndex=1240, CGI=25094C3502112',
'LABEL=UH08465, CellIndex=1239, CGI=25094C3502111',
'LABEL=UH08464, CellIndex=1238, CGI=25094C3502110',
'LABEL=UH19842, CellIndex=7, CGI=25094C3504D82',
'LABEL=UH19841, CellIndex=6, CGI=25094C3504D81',
'LABEL=UH19843, CellIndex=8, CGI=25094C3504D83',
'LABEL=UH19183, CellIndex=1076, CGI=25094C3504AEF',
'LABEL=UH19182, CellIndex=1075, CGI=25094C3504AEE',
'LABEL=UH19181, CellIndex=1074, CGI=25094C3504AED',
'LABEL=UH18826, CellIndex=1073, CGI=25094C350498A',
'LABEL=UH18825, CellIndex=1072, CGI=25094C3504989',
'LABEL=UH18824, CellIndex=1071, CGI=25094C3504988',
'LABEL=UH18823, CellIndex=1070, CGI=25094C3504987',
'LABEL=UH18822, CellIndex=1069, CGI=25094C3504986',
'LABEL=UH18821, CellIndex=1068, CGI=25094C3504985',
'LABEL=UH09555, CellIndex=1066, CGI=25094C3502553',
'LABEL=UH09554, CellIndex=1065, CGI=25094C3502552',
'LABEL=UH09553, CellIndex=1064, CGI=25094C3502551',
'LABEL=UH09552, CellIndex=1063, CGI=25094C3502550',
'LABEL=UH09551, CellIndex=1062, CGI=25094C350254F',
'LABEL=UH07236, CellIndex=1049, CGI=25094C3501C44',
'LABEL=UH07235, CellIndex=1048, CGI=25094C3501C43',
'LABEL=UH07234, CellIndex=1047, CGI=25094C3501C42',
'LABEL=UH07233, CellIndex=1046, CGI=25094C3501C41',
'LABEL=UH07232, CellIndex=1045, CGI=25094C3501C40',
'LABEL=UH07231, CellIndex=1044, CGI=25094C3501C3F',
'LABEL=UH09953, CellIndex=1040, CGI=25094C35026E1',
'LABEL=UH09952, CellIndex=1039, CGI=25094C35026E0',
'LABEL=UH09951, CellIndex=1038, CGI=25094C35026DF',
'LABEL=UH39183, CellIndex=1043, CGI=25094C350990F',
'LABEL=UH39181, CellIndex=1041, CGI=25094C350990D',
'LABEL=UH19286, CellIndex=954, CGI=25094C3504B56',
'LABEL=UH19285, CellIndex=953, CGI=25094C3504B55',
'LABEL=UH19283, CellIndex=952, CGI=25094C3504B53',
'LABEL=UH19282, CellIndex=951, CGI=25094C3504B52',
'LABEL=UH06366, CellIndex=949, CGI=25094C35018DE',
'LABEL=UH06365, CellIndex=948, CGI=25094C35018DD',
'LABEL=UH06364, CellIndex=947, CGI=25094C35018DC',
'LABEL=UH06363, CellIndex=946, CGI=25094C35018DB',
'LABEL=UH19281, CellIndex=950, CGI=25094C3504B51',
'LABEL=UH06362, CellIndex=945, CGI=25094C35018DA',
'LABEL=UH06361, CellIndex=944, CGI=25094C35018D9',
'LABEL=UH39953, CellIndex=963, CGI=25094C3509C11',
'LABEL=UH39952, CellIndex=962, CGI=25094C3509C10',
'LABEL=UH39951, CellIndex=961, CGI=25094C3509C0F',
'LABEL=UH07454, CellIndex=788, CGI=25094C3501D1E',
'LABEL=UH06005, CellIndex=928, CGI=25094C3501775',
'LABEL=UH06004, CellIndex=927, CGI=25094C3501774',
'LABEL=UH06002, CellIndex=926, CGI=25094C3501772',
'LABEL=UH06001, CellIndex=925, CGI=25094C3501771',
'LABEL=UH29321, CellIndex=907, CGI=25094C3507289',
'LABEL=UH29323, CellIndex=909, CGI=25094C350728B',
'LABEL=UH29322, CellIndex=908, CGI=25094C350728A',
'LABEL=UH17042, CellIndex=920, CGI=25094C3504292',
'LABEL=UH17043, CellIndex=921, CGI=25094C3504293',
'LABEL=UH17041, CellIndex=919, CGI=25094C3504291',
'LABEL=UH09632, CellIndex=762, CGI=25094C35025A0',
'LABEL=UH06463, CellIndex=915, CGI=25094C350193F',
'LABEL=UH06462, CellIndex=914, CGI=25094C350193E',
'LABEL=UH06461, CellIndex=913, CGI=25094C350193D',
'LABEL=UH06464, CellIndex=911, CGI=25094C3501940',
'LABEL=UH05082, CellIndex=916, CGI=25094C35013DA',
'LABEL=UH29813, CellIndex=883, CGI=25094C3507475',
'LABEL=UH29812, CellIndex=882, CGI=25094C3507474',
'LABEL=UH29811, CellIndex=881, CGI=25094C3507473',
'LABEL=UH09633, CellIndex=763, CGI=25094C35025A1',
'LABEL=UH19473, CellIndex=880, CGI=25094C3504C11',
'LABEL=UH19472, CellIndex=879, CGI=25094C3504C10',
'LABEL=UH19471, CellIndex=878, CGI=25094C3504C0F',
'LABEL=UH07426, CellIndex=877, CGI=25094C3501D02',
'LABEL=UH07425, CellIndex=876, CGI=25094C3501D01',
'LABEL=UH07424, CellIndex=875, CGI=25094C3501D00',
'LABEL=UH19002, CellIndex=833, CGI=25094C3504A3A',
'LABEL=UH07607, CellIndex=870, CGI=25094C3501DB7',
'LABEL=UH07604, CellIndex=867, CGI=25094C3501DB4',
'LABEL=UH09902, CellIndex=872, CGI=25094C35026AE',
'LABEL=UH09901, CellIndex=871, CGI=25094C35026AD',
'LABEL=UH07596, CellIndex=863, CGI=25094C3501DAC',
'LABEL=UH07606, CellIndex=869, CGI=25094C3501DB6',
'LABEL=UH19001, CellIndex=832, CGI=25094C3504A39',
'LABEL=UH07595, CellIndex=862, CGI=25094C3501DAB',
'LABEL=UH07593, CellIndex=861, CGI=25094C3501DA9',
'LABEL=UH07592, CellIndex=860, CGI=25094C3501DA8',
'LABEL=UH08323, CellIndex=852, CGI=25094C3502083',
'LABEL=UH08321, CellIndex=851, CGI=25094C3502081',
'LABEL=UH19132, CellIndex=846, CGI=25094C3504ABC',
'LABEL=UH08416, CellIndex=844, CGI=25094C35020E0',
'LABEL=UH08415, CellIndex=843, CGI=25094C35020DF',
'LABEL=UH08414, CellIndex=842, CGI=25094C35020DE',
'LABEL=UH08412, CellIndex=841, CGI=25094C35020DC',
'LABEL=UH19135, CellIndex=849, CGI=25094C3504ABF',
'LABEL=UH19134, CellIndex=848, CGI=25094C3504ABE',
'LABEL=UH19133, CellIndex=847, CGI=25094C3504ABD',
'LABEL=UH19131, CellIndex=845, CGI=25094C3504ABB',
'LABEL=UH08322, CellIndex=859, CGI=25094C3502082',
'LABEL=UH07605, CellIndex=868, CGI=25094C3501DB5',
'LABEL=UH08326, CellIndex=855, CGI=25094C3502086',
'LABEL=UH08325, CellIndex=854, CGI=25094C3502085',
'LABEL=UH08324, CellIndex=853, CGI=25094C3502084',
'LABEL=UH19003, CellIndex=834, CGI=25094C3504A3B',
'LABEL=UH07421, CellIndex=873, CGI=25094C3501CFD',
'LABEL=UH08306, CellIndex=818, CGI=25094C3502072',
'LABEL=UH08305, CellIndex=817, CGI=25094C3502071',
'LABEL=UH08226, CellIndex=840, CGI=25094C3502022',
'LABEL=UH08225, CellIndex=839, CGI=25094C3502021',
'LABEL=UH08223, CellIndex=837, CGI=25094C350201F',
'LABEL=UH08222, CellIndex=836, CGI=25094C350201E',
'LABEL=UH08221, CellIndex=835, CGI=25094C350201D',
'LABEL=UH08304, CellIndex=816, CGI=25094C3502070',
'LABEL=UH08303, CellIndex=815, CGI=25094C350206F',
'LABEL=UH06146, CellIndex=801, CGI=25094C3501802',
'LABEL=UH06145, CellIndex=800, CGI=25094C3501801',
'LABEL=UH06141, CellIndex=797, CGI=25094C35017FD',
'LABEL=UH39223, CellIndex=786, CGI=25094C3509937',
'LABEL=UH09634, CellIndex=764, CGI=25094C35025A2',
'LABEL=UH08492, CellIndex=774, CGI=25094C350212C',
'LABEL=UH07505, CellIndex=692, CGI=25094C3501D51',
'LABEL=UH08216, CellIndex=259, CGI=25094C3502018',
'LABEL=UH08215, CellIndex=258, CGI=25094C3502017',
'LABEL=UH19455, CellIndex=570, CGI=25094C3504BFF',
'LABEL=UH07662, CellIndex=538, CGI=25094C3501DEE',
'LABEL=UH08356, CellIndex=265, CGI=25094C35020A4',
'LABEL=UH08355, CellIndex=264, CGI=25094C35020A3',
'LABEL=UH07374, CellIndex=316, CGI=25094C3501CCE',
'LABEL=UH07635, CellIndex=448, CGI=25094C3501DD3',
'LABEL=UH07633, CellIndex=447, CGI=25094C3501DD1',
'LABEL=UH07632, CellIndex=446, CGI=25094C3501DD0',
'LABEL=UH08214, CellIndex=257, CGI=25094C3502016',
'LABEL=UH07661, CellIndex=537, CGI=25094C3501DED',
'LABEL=UH08354, CellIndex=263, CGI=25094C35020A2',
'LABEL=UH07705, CellIndex=459, CGI=25094C3501E19',
'LABEL=UH07664, CellIndex=536, CGI=25094C3501DF0',
'LABEL=UH07376, CellIndex=318, CGI=25094C3501CD0',
'LABEL=UH07526, CellIndex=323, CGI=25094C3501D66',
'LABEL=UH07704, CellIndex=458, CGI=25094C3501E18',
'LABEL=UH08076, CellIndex=727, CGI=25094C3501F8C',
'LABEL=UH08075, CellIndex=726, CGI=25094C3501F8B',
'LABEL=UH07674, CellIndex=452, CGI=25094C3501DFA',
'LABEL=UH07346, CellIndex=444, CGI=25094C3501CB2',
'LABEL=UH07676, CellIndex=454, CGI=25094C3501DFC',
'LABEL=UH08454, CellIndex=344, CGI=25094C3502106',
'LABEL=UH07345, CellIndex=443, CGI=25094C3501CB1',
'LABEL=UH08255, CellIndex=465, CGI=25094C350203F',
'LABEL=UH08203, CellIndex=250, CGI=25094C350200B',
'LABEL=UH39221, CellIndex=784, CGI=25094C3509935',
'LABEL=UH07506, CellIndex=693, CGI=25094C3501D52',
'LABEL=UH07675, CellIndex=453, CGI=25094C3501DFB',
'LABEL=UH07375, CellIndex=317, CGI=25094C3501CCF',
'LABEL=UH07386, CellIndex=704, CGI=25094C3501CDA',
'LABEL=UH08402, CellIndex=551, CGI=25094C35020D2',
'LABEL=UH07582, CellIndex=237, CGI=25094C3501D9E',
'LABEL=UH08236, CellIndex=710, CGI=25094C350202C',
'LABEL=UH08254, CellIndex=464, CGI=25094C350203E',
'LABEL=UH07066, CellIndex=516, CGI=25094C3501B9A',
'LABEL=UH06186, CellIndex=418, CGI=25094C350182A',
'LABEL=UH19251, CellIndex=749, CGI=25094C3504B33',
'LABEL=UH07064, CellIndex=514, CGI=25094C3501B98',
'LABEL=UH06235, CellIndex=228, CGI=25094C350185B',
'LABEL=UH07136, CellIndex=528, CGI=25094C3501BE0',
'LABEL=UH06234, CellIndex=227, CGI=25094C350185A',
'LABEL=UH06185, CellIndex=417, CGI=25094C3501829',
'LABEL=UH07151, CellIndex=385, CGI=25094C3501BEF',
'LABEL=UH06012, CellIndex=411, CGI=25094C350177C',
'LABEL=UH07135, CellIndex=527, CGI=25094C3501BDF',
'LABEL=UH06184, CellIndex=416, CGI=25094C3501828',
'LABEL=UH19103, CellIndex=760, CGI=25094C3504A9F',
'LABEL=UH07385, CellIndex=703, CGI=25094C3501CD9',
'LABEL=UH07134, CellIndex=526, CGI=25094C3501BDE',
'LABEL=UH07145, CellIndex=423, CGI=25094C3501BE9',
'LABEL=UH19063, CellIndex=742, CGI=25094C3504A77',
'LABEL=UH19062, CellIndex=741, CGI=25094C3504A76',
'LABEL=UH19102, CellIndex=759, CGI=25094C3504A9E',
'LABEL=UH06232, CellIndex=225, CGI=25094C3501858',
'LABEL=UH06115, CellIndex=374, CGI=25094C35017E3',
'LABEL=UH07133, CellIndex=525, CGI=25094C3501BDD',
'LABEL=UH19061, CellIndex=740, CGI=25094C3504A75',
'LABEL=UH07054, CellIndex=510, CGI=25094C3501B8E',
'LABEL=UH07142, CellIndex=420, CGI=25094C3501BE6',
'LABEL=UH19101, CellIndex=758, CGI=25094C3504A9D',
'LABEL=UH07036, CellIndex=698, CGI=25094C3501B7C',
'LABEL=UH06011, CellIndex=410, CGI=25094C350177B',
'LABEL=UH06016, CellIndex=409, CGI=25094C3501780',
'LABEL=UH06015, CellIndex=408, CGI=25094C350177F',
'LABEL=UH09654, CellIndex=737, CGI=25094C35025B6',
'LABEL=UH07384, CellIndex=702, CGI=25094C3501CD8',
'LABEL=UH08234, CellIndex=708, CGI=25094C350202A',
'LABEL=UH07383, CellIndex=701, CGI=25094C3501CD7',
'LABEL=UH07382, CellIndex=700, CGI=25094C3501CD6',
'LABEL=UH07381, CellIndex=699, CGI=25094C3501CD5',
'LABEL=UH08232, CellIndex=706, CGI=25094C3502028',
'LABEL=UH07035, CellIndex=697, CGI=25094C3501B7B',
'LABEL=UH07176, CellIndex=667, CGI=25094C3501C08',
'LABEL=UH09653, CellIndex=736, CGI=25094C35025B5',
'LABEL=UH09652, CellIndex=735, CGI=25094C35025B4',
'LABEL=UH07175, CellIndex=666, CGI=25094C3501C07',
'LABEL=UH07174, CellIndex=665, CGI=25094C3501C06',
'LABEL=UH09651, CellIndex=734, CGI=25094C35025B3',
'LABEL=UH07173, CellIndex=664, CGI=25094C3501C05',
'LABEL=UH19173, CellIndex=713, CGI=25094C3504AE5',
'LABEL=UH08074, CellIndex=725, CGI=25094C3501F8A',
'LABEL=UH19172, CellIndex=712, CGI=25094C3504AE4',
'LABEL=UH06173, CellIndex=185, CGI=25094C350181D',
'LABEL=UH08073, CellIndex=724, CGI=25094C3501F89',
'LABEL=UH19171, CellIndex=711, CGI=25094C3504AE3',
'LABEL=UH08072, CellIndex=723, CGI=25094C3501F88',
'LABEL=UH09793, CellIndex=715, CGI=25094C3502641',
'LABEL=UH08071, CellIndex=722, CGI=25094C3501F87',
'LABEL=UH09792, CellIndex=714, CGI=25094C3502640',
'LABEL=UH06172, CellIndex=184, CGI=25094C350181C',
'LABEL=UH07033, CellIndex=695, CGI=25094C3501B79',
'LABEL=UH09631, CellIndex=761, CGI=25094C350259F',
'LABEL=UH39893, CellIndex=649, CGI=25094C3509BD5',
'LABEL=UH09636, CellIndex=766, CGI=25094C35025A4',
'LABEL=UH07361, CellIndex=791, CGI=25094C3501CC1',
'LABEL=UH07544, CellIndex=821, CGI=25094C3501D78',
'LABEL=UH07395, CellIndex=808, CGI=25094C3501CE3',
'LABEL=UH07541, CellIndex=819, CGI=25094C3501D75',
'LABEL=UH07502, CellIndex=689, CGI=25094C3501D4E',
'LABEL=UH06144, CellIndex=799, CGI=25094C3501800',
'LABEL=UH39891, CellIndex=647, CGI=25094C3509BD3',
'LABEL=UH09635, CellIndex=765, CGI=25094C35025A3',
'LABEL=UH08315, CellIndex=628, CGI=25094C350207B',
'LABEL=UH09605, CellIndex=634, CGI=25094C3502585',
'LABEL=UH08396, CellIndex=780, CGI=25094C35020CC',
'LABEL=UH08314, CellIndex=627, CGI=25094C350207A',
'LABEL=UH07504, CellIndex=691, CGI=25094C3501D50',
'LABEL=UH27633, CellIndex=673, CGI=25094C3506BF1',
'LABEL=UH09604, CellIndex=633, CGI=25094C3502584',
'LABEL=UH39213, CellIndex=670, CGI=25094C350992D',
'LABEL=UH19601, CellIndex=674, CGI=25094C3504C91',
'LABEL=UH29383, CellIndex=687, CGI=25094C35072C7',
'LABEL=UH29382, CellIndex=686, CGI=25094C35072C6',
'LABEL=UH08301, CellIndex=813, CGI=25094C350206D',
'LABEL=UH08313, CellIndex=626, CGI=25094C3502079',
'LABEL=UH27632, CellIndex=672, CGI=25094C3506BF0',
'LABEL=UH27631, CellIndex=671, CGI=25094C3506BEF',
'LABEL=UH19333, CellIndex=661, CGI=25094C3504B85',
'LABEL=UH39212, CellIndex=669, CGI=25094C350992C',
'LABEL=UH07503, CellIndex=690, CGI=25094C3501D4F',
'LABEL=UH09603, CellIndex=632, CGI=25094C3502583',
'LABEL=UH17073, CellIndex=658, CGI=25094C35042B1',
'LABEL=UH09602, CellIndex=631, CGI=25094C3502582',
'LABEL=UH08311, CellIndex=624, CGI=25094C3502077',
'LABEL=UH19332, CellIndex=660, CGI=25094C3504B84',
'LABEL=UH17072, CellIndex=657, CGI=25094C35042B0',
'LABEL=UH29381, CellIndex=685, CGI=25094C35072C5',
'LABEL=UH09763, CellIndex=684, CGI=25094C3502623',
'LABEL=UH09762, CellIndex=683, CGI=25094C3502622',
'LABEL=UH17053, CellIndex=681, CGI=25094C350429D',
'LABEL=UH07501, CellIndex=688, CGI=25094C3501D4D',
'LABEL=UH07031, CellIndex=694, CGI=25094C3501B77',
'LABEL=UH07034, CellIndex=696, CGI=25094C3501B7A',
'LABEL=UH07046, CellIndex=488, CGI=25094C3501B86',
'LABEL=UH06233, CellIndex=226, CGI=25094C3501859',
'LABEL=UH08455, CellIndex=345, CGI=25094C3502107',
'LABEL=UH08204, CellIndex=251, CGI=25094C350200C',
'LABEL=UH08205, CellIndex=252, CGI=25094C350200D',
'LABEL=UH08224, CellIndex=838, CGI=25094C3502020',
'LABEL=UH19136, CellIndex=850, CGI=25094C3504AC0',
'LABEL=UH07601, CellIndex=866, CGI=25094C3501DB1',
'LABEL=UH06465, CellIndex=912, CGI=25094C3501941',
'LABEL=UH07455, CellIndex=789, CGI=25094C3501D1F',
'LABEL=UH39182, CellIndex=1042, CGI=25094C350990E',
'LABEL=UH09556, CellIndex=1067, CGI=25094C3502554',
'LABEL=UH08541, CellIndex=1227, CGI=25094C350215D',
'LABEL=UH19642, CellIndex=1245, CGI=25094C3504CBA',
'LABEL=UH07611, CellIndex=1292, CGI=25094C3501DBB',
'LABEL=UH17052, CellIndex=680, CGI=25094C350429C',
'LABEL=UH19331, CellIndex=659, CGI=25094C3504B83',
'LABEL=UH39892, CellIndex=648, CGI=25094C3509BD4',
'LABEL=UH09761, CellIndex=682, CGI=25094C3502621',
'LABEL=UH17071, CellIndex=656, CGI=25094C35042AF',
'LABEL=UH39211, CellIndex=668, CGI=25094C350992B',
'LABEL=UH19603, CellIndex=676, CGI=25094C3504C93',
'LABEL=UH06023, CellIndex=182, CGI=25094C3501787',
'LABEL=UH17051, CellIndex=679, CGI=25094C350429B',
'LABEL=UH06022, CellIndex=181, CGI=25094C3501786',
'LABEL=UH07344, CellIndex=442, CGI=25094C3501CB0',
'LABEL=UH19511, CellIndex=650, CGI=25094C3504C37',
'LABEL=UH46003, CellIndex=508, CGI=25094C350B3B3',
'LABEL=UH07172, CellIndex=663, CGI=25094C3501C04',
'LABEL=UH19602, CellIndex=675, CGI=25094C3504C92',
'LABEL=UH07171, CellIndex=662, CGI=25094C3501C03',
'LABEL=UH19051, CellIndex=677, CGI=25094C3504A6B',
'LABEL=UH07456, CellIndex=790, CGI=25094C3501D20',
'LABEL=UH06143, CellIndex=798, CGI=25094C35017FF',
'LABEL=UH07545, CellIndex=822, CGI=25094C3501D79',
'LABEL=UH07542, CellIndex=820, CGI=25094C3501D76',
'LABEL=UH08696, CellIndex=828, CGI=25094C35021F8',
'LABEL=UH08695, CellIndex=827, CGI=25094C35021F7',
'LABEL=UH08692, CellIndex=824, CGI=25094C35021F4',
'LABEL=UH07393, CellIndex=807, CGI=25094C3501CE1',
'LABEL=UH29833, CellIndex=615, CGI=25094C3507489',
'LABEL=UH29832, CellIndex=614, CGI=25094C3507488',
'LABEL=UH09613, CellIndex=638, CGI=25094C350258D',
'LABEL=UH19163, CellIndex=612, CGI=25094C3504ADB',
'LABEL=UH09601, CellIndex=630, CGI=25094C3502581',
'LABEL=UH07474, CellIndex=622, CGI=25094C3501D32',
'LABEL=UH19356, CellIndex=498, CGI=25094C3504B9C',
'LABEL=UH19515, CellIndex=654, CGI=25094C3504C3B',
'LABEL=UH19512, CellIndex=651, CGI=25094C3504C38',
'LABEL=UH19514, CellIndex=653, CGI=25094C3504C3A',
'LABEL=UH19255, CellIndex=753, CGI=25094C3504B37',
'LABEL=UH09582, CellIndex=557, CGI=25094C350256E',
'LABEL=UH09612, CellIndex=637, CGI=25094C350258C',
'LABEL=UH09611, CellIndex=636, CGI=25094C350258B',
'LABEL=UH08395, CellIndex=779, CGI=25094C35020CB',
'LABEL=UH19583, CellIndex=606, CGI=25094C3504C7F',
'LABEL=UH19582, CellIndex=605, CGI=25094C3504C7E',
'LABEL=UH17023, CellIndex=646, CGI=25094C350427F',
'LABEL=UH09753, CellIndex=643, CGI=25094C3502619',
'LABEL=UH07636, CellIndex=449, CGI=25094C3501DD4',
'LABEL=UH19202, CellIndex=619, CGI=25094C3504B02',
'LABEL=UH09863, CellIndex=618, CGI=25094C3502687',
'LABEL=UH09752, CellIndex=642, CGI=25094C3502618',
'LABEL=UH17022, CellIndex=645, CGI=25094C350427E',
'LABEL=UH09861, CellIndex=616, CGI=25094C3502685',
'LABEL=UH19513, CellIndex=652, CGI=25094C3504C39',
'LABEL=UH08422, CellIndex=811, CGI=25094C35020E6',
'LABEL=UH17021, CellIndex=644, CGI=25094C350427D',
'LABEL=UH07666, CellIndex=533, CGI=25094C3501DF2',
'LABEL=UH09712, CellIndex=640, CGI=25094C35025F0',
'LABEL=UH39203, CellIndex=772, CGI=25094C3509923',
'LABEL=UH09711, CellIndex=639, CGI=25094C35025EF',
'LABEL=UH07326, CellIndex=549, CGI=25094C3501C9E',
'LABEL=UH07325, CellIndex=548, CGI=25094C3501C9D',
'LABEL=UH07324, CellIndex=547, CGI=25094C3501C9C',
'LABEL=UH08694, CellIndex=826, CGI=25094C35021F6',
'LABEL=UH08693, CellIndex=825, CGI=25094C35021F5',
'LABEL=UH08691, CellIndex=823, CGI=25094C35021F3',
'LABEL=UH07056, CellIndex=512, CGI=25094C3501B90',
'LABEL=UH08423, CellIndex=812, CGI=25094C35020E7',
'LABEL=UH07406, CellIndex=805, CGI=25094C3501CEE',
'LABEL=UH39202, CellIndex=771, CGI=25094C3509922',
'LABEL=UH09736, CellIndex=485, CGI=25094C3502608',
'LABEL=UH07433, CellIndex=503, CGI=25094C3501D09',
'LABEL=UH19254, CellIndex=752, CGI=25094C3504B36',
'LABEL=UH07343, CellIndex=441, CGI=25094C3501CAF',
'LABEL=UH19355, CellIndex=497, CGI=25094C3504B9B',
'LABEL=UH07444, CellIndex=390, CGI=25094C3501D14',
'LABEL=UH19353, CellIndex=496, CGI=25094C3504B99',
'LABEL=UH08394, CellIndex=778, CGI=25094C35020CA',
'LABEL=UH09734, CellIndex=483, CGI=25094C3502606',
'LABEL=UH19253, CellIndex=751, CGI=25094C3504B35',
'LABEL=UH19352, CellIndex=495, CGI=25094C3504B98',
'LABEL=UH39201, CellIndex=770, CGI=25094C3509921',
'LABEL=UH07342, CellIndex=440, CGI=25094C3501CAE',
'LABEL=UH07144, CellIndex=422, CGI=25094C3501BE8',
'LABEL=UH07432, CellIndex=502, CGI=25094C3501D08',
'LABEL=UH19516, CellIndex=655, CGI=25094C3504C3C',
'LABEL=UH19252, CellIndex=750, CGI=25094C3504B34',
'LABEL=UH07431, CellIndex=501, CGI=25094C3501D07',
'LABEL=UH07341, CellIndex=439, CGI=25094C3501CAD',
'LABEL=UH07143, CellIndex=421, CGI=25094C3501BE7',
'LABEL=UH08256, CellIndex=466, CGI=25094C3502040',
'LABEL=UH07446, CellIndex=392, CGI=25094C3501D16',
'LABEL=UH07132, CellIndex=524, CGI=25094C3501BDC',
'LABEL=UH07445, CellIndex=391, CGI=25094C3501D15',
'LABEL=UH08385, CellIndex=469, CGI=25094C35020C1',
'LABEL=UH07061, CellIndex=513, CGI=25094C3501B95',
'LABEL=UH08384, CellIndex=468, CGI=25094C35020C0',
'LABEL=UH07131, CellIndex=523, CGI=25094C3501BDB',
'LABEL=UH07055, CellIndex=511, CGI=25094C3501B8F',
'LABEL=UH19162, CellIndex=611, CGI=25094C3504ADA',
'LABEL=UH07141, CellIndex=419, CGI=25094C3501BE5',
'LABEL=UH06013, CellIndex=412, CGI=25094C350177D',
'LABEL=UH17033, CellIndex=579, CGI=25094C3504289',
'LABEL=UH09723, CellIndex=479, CGI=25094C35025FB',
'LABEL=UH09626, CellIndex=564, CGI=25094C350259A',
'LABEL=UH09523, CellIndex=473, CGI=25094C3502533',
'LABEL=UH09813, CellIndex=491, CGI=25094C3502655',
'LABEL=UH07116, CellIndex=364, CGI=25094C3501BCC',
'LABEL=UH09663, CellIndex=476, CGI=25094C35025BF',
'LABEL=UH09522, CellIndex=472, CGI=25094C3502532',
'LABEL=UH09812, CellIndex=490, CGI=25094C3502654',
'LABEL=UH09625, CellIndex=563, CGI=25094C3502599',
'LABEL=UH09732, CellIndex=481, CGI=25094C3502604',
'LABEL=UH06224, CellIndex=404, CGI=25094C3501850',
'LABEL=UH09662, CellIndex=475, CGI=25094C35025BE',
'LABEL=UH09722, CellIndex=478, CGI=25094C35025FA',
'LABEL=UH09661, CellIndex=474, CGI=25094C35025BD',
'LABEL=UH09811, CellIndex=489, CGI=25094C3502653',
'LABEL=UH09731, CellIndex=480, CGI=25094C3502603',
'LABEL=UH09521, CellIndex=471, CGI=25094C3502531',
'LABEL=UH19351, CellIndex=494, CGI=25094C3504B97',
'LABEL=UH18056, CellIndex=748, CGI=25094C3504688',
'LABEL=UH06223, CellIndex=403, CGI=25094C350184F',
'LABEL=UH07043, CellIndex=486, CGI=25094C3501B83',
'LABEL=UH09721, CellIndex=477, CGI=25094C35025F9',
'LABEL=UH07022, CellIndex=377, CGI=25094C3501B6E',
'LABEL=UH06222, CellIndex=402, CGI=25094C350184E',
'LABEL=UH07516, CellIndex=401, CGI=25094C3501D5C',
'LABEL=UH08386, CellIndex=470, CGI=25094C35020C2',
'LABEL=UH07155, CellIndex=383, CGI=25094C3501BF3',
'LABEL=UH19392, CellIndex=603, CGI=25094C3504BC0',
'LABEL=UH19391, CellIndex=602, CGI=25094C3504BBF',
'LABEL=UH07112, CellIndex=360, CGI=25094C3501BC8',
'LABEL=UH07021, CellIndex=376, CGI=25094C3501B6D',
'LABEL=UH06113, CellIndex=372, CGI=25094C35017E1',
'LABEL=UH07045, CellIndex=487, CGI=25094C3501B85',
'LABEL=UH07111, CellIndex=359, CGI=25094C3501BC7',
'LABEL=UH07154, CellIndex=382, CGI=25094C3501BF2',
'LABEL=UH19081, CellIndex=599, CGI=25094C3504A89',
'LABEL=UH06111, CellIndex=371, CGI=25094C35017DF',
'LABEL=UH46002, CellIndex=507, CGI=25094C350B3B2',
'LABEL=UH08381, CellIndex=467, CGI=25094C35020BD',
'LABEL=UH19093, CellIndex=493, CGI=25094C3504A95',
'LABEL=UH17032, CellIndex=578, CGI=25094C3504288',
'LABEL=UH07065, CellIndex=515, CGI=25094C3501B99',
'LABEL=UH29831, CellIndex=613, CGI=25094C3507487',
'LABEL=UH19092, CellIndex=492, CGI=25094C3504A94',
'LABEL=UH19161, CellIndex=610, CGI=25094C3504AD9',
'LABEL=UH46001, CellIndex=506, CGI=25094C350B3B1',
'LABEL=UH19026, CellIndex=432, CGI=25094C3504A50',
'LABEL=UH09883, CellIndex=367, CGI=25094C350269B',
'LABEL=UH08312, CellIndex=625, CGI=25094C3502078',
'LABEL=UH18053, CellIndex=745, CGI=25094C3504685',
'LABEL=UH08253, CellIndex=463, CGI=25094C350203D',
'LABEL=UH09622, CellIndex=560, CGI=25094C3502596',
'LABEL=UH07561, CellIndex=435, CGI=25094C3501D89',
'LABEL=UH09892, CellIndex=348, CGI=25094C35026A4',
'LABEL=UH07511, CellIndex=398, CGI=25094C3501D57',
'LABEL=UH07352, CellIndex=425, CGI=25094C3501CB8',
'LABEL=UH07566, CellIndex=438, CGI=25094C3501D8E',
'LABEL=UH19203, CellIndex=620, CGI=25094C3504B03',
'LABEL=UH07564, CellIndex=437, CGI=25094C3501D8C',
'LABEL=UH09891, CellIndex=347, CGI=25094C35026A3',
'LABEL=UH06226, CellIndex=406, CGI=25094C3501852',
'LABEL=UH08446, CellIndex=340, CGI=25094C35020FE',
'LABEL=UH18051, CellIndex=743, CGI=25094C3504683',
'LABEL=UH17031, CellIndex=577, CGI=25094C3504287',
'LABEL=UH07475, CellIndex=623, CGI=25094C3501D33',
'LABEL=UH08252, CellIndex=462, CGI=25094C350203C',
'LABEL=UH09862, CellIndex=617, CGI=25094C3502686',
'LABEL=UH19762, CellIndex=608, CGI=25094C3504D32',
'LABEL=UH07563, CellIndex=436, CGI=25094C3501D8B',
'LABEL=UH07316, CellIndex=395, CGI=25094C3501C94',
'LABEL=UH07472, CellIndex=621, CGI=25094C3501D30',
'LABEL=UH06182, CellIndex=414, CGI=25094C3501826',
'LABEL=UH08251, CellIndex=461, CGI=25094C350203B',
'LABEL=UH19761, CellIndex=607, CGI=25094C3504D31',
'LABEL=UH19083, CellIndex=601, CGI=25094C3504A8B',
'LABEL=UH07706, CellIndex=460, CGI=25094C3501E1A',
'LABEL=UH07673, CellIndex=451, CGI=25094C3501DF9',
'LABEL=UH08453, CellIndex=343, CGI=25094C3502105',
'LABEL=UH06181, CellIndex=413, CGI=25094C3501825',
'LABEL=UH19082, CellIndex=600, CGI=25094C3504A8A',
'LABEL=UH07672, CellIndex=450, CGI=25094C3501DF8',
'LABEL=UH19023, CellIndex=431, CGI=25094C3504A4F',
'LABEL=UH08451, CellIndex=341, CGI=25094C3502103',
'LABEL=UH19021, CellIndex=429, CGI=25094C3504A4D',
'LABEL=UH07156, CellIndex=384, CGI=25094C3501BF4',
'LABEL=UH07631, CellIndex=445, CGI=25094C3501DCF',
'LABEL=UH07025, CellIndex=379, CGI=25094C3501B71',
'LABEL=UH19024, CellIndex=433, CGI=25094C3504A51',
'LABEL=UH18054, CellIndex=746, CGI=25094C3504686',
'LABEL=UH08421, CellIndex=810, CGI=25094C35020E5',
'LABEL=UH08302, CellIndex=814, CGI=25094C350206E',
'LABEL=UH07405, CellIndex=804, CGI=25094C3501CED',
'LABEL=UH07365, CellIndex=795, CGI=25094C3501CC5',
'LABEL=UH07364, CellIndex=794, CGI=25094C3501CC4',
'LABEL=UH07363, CellIndex=793, CGI=25094C3501CC3',
'LABEL=UH19192, CellIndex=357, CGI=25094C3504AF8',
'LABEL=UH19025, CellIndex=434, CGI=25094C3504A52',
'LABEL=UH07586, CellIndex=241, CGI=25094C3501DA2',
'LABEL=UH08496, CellIndex=777, CGI=25094C3502130',
'LABEL=UH07362, CellIndex=792, CGI=25094C3501CC2',
'LABEL=UH08444, CellIndex=338, CGI=25094C35020FC',
'LABEL=UH07585, CellIndex=240, CGI=25094C3501DA1',
'LABEL=UH08443, CellIndex=337, CGI=25094C35020FB',
'LABEL=UH07452, CellIndex=787, CGI=25094C3501D1C',
'LABEL=UH08435, CellIndex=333, CGI=25094C35020F3',
'LABEL=UH07584, CellIndex=239, CGI=25094C3501DA0',
'LABEL=UH07583, CellIndex=238, CGI=25094C3501D9F',
'LABEL=UH08434, CellIndex=332, CGI=25094C35020F2',
'LABEL=UH07315, CellIndex=394, CGI=25094C3501C93',
'LABEL=UH19454, CellIndex=569, CGI=25094C3504BFE',
'LABEL=UH29843, CellIndex=769, CGI=25094C3507493',
'LABEL=UH19012, CellIndex=397, CGI=25094C3504A44',
'LABEL=UH08441, CellIndex=335, CGI=25094C35020F9',
'LABEL=UH07356, CellIndex=428, CGI=25094C3501CBC',
'LABEL=UH09943, CellIndex=576, CGI=25094C35026D7',
'LABEL=UH07373, CellIndex=315, CGI=25094C3501CCD',
'LABEL=UH09942, CellIndex=575, CGI=25094C35026D6',
'LABEL=UH07354, CellIndex=426, CGI=25094C3501CBA',
'LABEL=UH07371, CellIndex=313, CGI=25094C3501CCB',
'LABEL=UH08433, CellIndex=331, CGI=25094C35020F1',
'LABEL=UH07314, CellIndex=393, CGI=25094C3501C92',
'LABEL=UH08431, CellIndex=330, CGI=25094C35020EF',
'LABEL=UH18046, CellIndex=583, CGI=25094C350467E',
'LABEL=UH09623, CellIndex=561, CGI=25094C3502597',
'LABEL=UH09621, CellIndex=559, CGI=25094C3502595',
'LABEL=UH19022, CellIndex=430, CGI=25094C3504A4E',
'LABEL=UH06236, CellIndex=229, CGI=25094C350185C',
'LABEL=UH07351, CellIndex=424, CGI=25094C3501CB7',
'LABEL=UH07372, CellIndex=314, CGI=25094C3501CCC',
'LABEL=UH18045, CellIndex=582, CGI=25094C350467D',
'LABEL=UH09882, CellIndex=366, CGI=25094C350269A',
'LABEL=UH19451, CellIndex=567, CGI=25094C3504BFB',
'LABEL=UH07522, CellIndex=319, CGI=25094C3501D62',
'LABEL=UH07523, CellIndex=320, CGI=25094C3501D63',
'LABEL=UH07524, CellIndex=321, CGI=25094C3501D64',
'LABEL=UH19193, CellIndex=358, CGI=25094C3504AF9',
'LABEL=UH08495, CellIndex=776, CGI=25094C350212F',
'LABEL=UH08494, CellIndex=775, CGI=25094C350212E',
'LABEL=UH18333, CellIndex=309, CGI=25094C350479D',
'LABEL=UH09703, CellIndex=306, CGI=25094C35025E7',
'LABEL=UH08815, CellIndex=270, CGI=25094C350226F',
'LABEL=UH08812, CellIndex=267, CGI=25094C350226C',
'LABEL=UH08334, CellIndex=298, CGI=25094C350208E',
'LABEL=UH07703, CellIndex=457, CGI=25094C3501E17',
'LABEL=UH19076, CellIndex=598, CGI=25094C3504A84',
'LABEL=UH07702, CellIndex=456, CGI=25094C3501E16',
'LABEL=UH18332, CellIndex=308, CGI=25094C350479C',
'LABEL=UH09701, CellIndex=304, CGI=25094C35025E5',
'LABEL=UH08811, CellIndex=266, CGI=25094C350226B',
'LABEL=UH19075, CellIndex=597, CGI=25094C3504A83',
'LABEL=UH07701, CellIndex=455, CGI=25094C3501E15',
'LABEL=UH18331, CellIndex=307, CGI=25094C350479B',
'LABEL=UH07086, CellIndex=288, CGI=25094C3501BAE',
'LABEL=UH07085, CellIndex=287, CGI=25094C3501BAD',
'LABEL=UH07084, CellIndex=286, CGI=25094C3501BAC',
'LABEL=UH39252, CellIndex=311, CGI=25094C3509954',
'LABEL=UH29842, CellIndex=768, CGI=25094C3507492',
'LABEL=UH06231, CellIndex=224, CGI=25094C3501857',
'LABEL=UH18034, CellIndex=354, CGI=25094C3504672',
'LABEL=UH07355, CellIndex=427, CGI=25094C3501CBB',
'LABEL=UH09656, CellIndex=739, CGI=25094C35025B8',
'LABEL=UH39251, CellIndex=310, CGI=25094C3509953',
'LABEL=UH08445, CellIndex=339, CGI=25094C35020FD',
'LABEL=UH09881, CellIndex=365, CGI=25094C3502699',
'LABEL=UH09581, CellIndex=556, CGI=25094C350256D',
'LABEL=UH19011, CellIndex=396, CGI=25094C3504A43',
'LABEL=UH07312, CellIndex=387, CGI=25094C3501C90',
'LABEL=UH07441, CellIndex=389, CGI=25094C3501D11',
'LABEL=UH19256, CellIndex=754, CGI=25094C3504B38',
'LABEL=UH08206, CellIndex=253, CGI=25094C350200E',
'LABEL=UH16026, CellIndex=303, CGI=25094C3503E9A',
'LABEL=UH16025, CellIndex=302, CGI=25094C3503E99',
'LABEL=UH09655, CellIndex=738, CGI=25094C35025B7',
'LABEL=UH16024, CellIndex=301, CGI=25094C3503E98',
'LABEL=UH08336, CellIndex=300, CGI=25094C3502090',
'LABEL=UH08335, CellIndex=299, CGI=25094C350208F',
'LABEL=UH08436, CellIndex=334, CGI=25094C35020F4',
'LABEL=UH07404, CellIndex=803, CGI=25094C3501CEC',
'LABEL=UH07403, CellIndex=802, CGI=25094C3501CEB',
'LABEL=UH29841, CellIndex=767, CGI=25094C3507491',
'LABEL=UH18055, CellIndex=747, CGI=25094C3504687',
'LABEL=UH07396, CellIndex=809, CGI=25094C3501CE4',
'LABEL=UH08491, CellIndex=773, CGI=25094C350212B',
'LABEL=UH29503, CellIndex=223, CGI=25094C350733F',
'LABEL=UH08816, CellIndex=271, CGI=25094C3502270',
'LABEL=UH08352, CellIndex=261, CGI=25094C35020A0',
'LABEL=UH08814, CellIndex=269, CGI=25094C350226E',
'LABEL=UH29133, CellIndex=217, CGI=25094C35071CD',
'LABEL=UH08213, CellIndex=256, CGI=25094C3502015',
'LABEL=UH19073, CellIndex=595, CGI=25094C3504A81',
'LABEL=UH08813, CellIndex=268, CGI=25094C350226D',
'LABEL=UH29502, CellIndex=222, CGI=25094C350733E',
'LABEL=UH08212, CellIndex=255, CGI=25094C3502014',
'LABEL=UH08353, CellIndex=262, CGI=25094C35020A1',
'LABEL=UH07653, CellIndex=188, CGI=25094C3501DE5',
'LABEL=UH19074, CellIndex=596, CGI=25094C3504A82',
'LABEL=UH09702, CellIndex=305, CGI=25094C35025E6',
'LABEL=UH19452, CellIndex=568, CGI=25094C3504BFC',
'LABEL=UH08442, CellIndex=336, CGI=25094C35020FA',
'LABEL=UH07525, CellIndex=322, CGI=25094C3501D65',
'LABEL=UH08452, CellIndex=342, CGI=25094C3502104',
'LABEL=UH19763, CellIndex=609, CGI=25094C3504D33',
'LABEL=UH18052, CellIndex=744, CGI=25094C3504684',
'LABEL=UH07514, CellIndex=400, CGI=25094C3501D5A',
'LABEL=UH09624, CellIndex=562, CGI=25094C3502598',
'LABEL=UH09733, CellIndex=482, CGI=25094C3502605',
'LABEL=UH19393, CellIndex=604, CGI=25094C3504BC1',
'LABEL=UH09735, CellIndex=484, CGI=25094C3502607',
'LABEL=UH09751, CellIndex=641, CGI=25094C3502617',
'LABEL=UH07665, CellIndex=534, CGI=25094C3501DF1',
'LABEL=UH08235, CellIndex=709, CGI=25094C350202B',
'LABEL=UH19052, CellIndex=678, CGI=25094C3504A6C',
'LABEL=UH08211, CellIndex=254, CGI=25094C3502013',
'LABEL=UH08202, CellIndex=249, CGI=25094C350200A',
'LABEL=UH29132, CellIndex=216, CGI=25094C35071CC',
'LABEL=UH19072, CellIndex=594, CGI=25094C3504A80',
'LABEL=UH09583, CellIndex=558, CGI=25094C350256F',
'LABEL=UH18036, CellIndex=356, CGI=25094C3504674',
'LABEL=UH29501, CellIndex=221, CGI=25094C350733D',
'LABEL=UH07366, CellIndex=796, CGI=25094C3501CC6',
'LABEL=UH07083, CellIndex=205, CGI=25094C3501BAB',
'LABEL=UH07082, CellIndex=204, CGI=25094C3501BAA',
'LABEL=UH07024, CellIndex=378, CGI=25094C3501B70',
'LABEL=UH08201, CellIndex=248, CGI=25094C3502009',
'LABEL=UH07081, CellIndex=203, CGI=25094C3501BA9',
'LABEL=UH08351, CellIndex=260, CGI=25094C350209F',
'LABEL=UH09941, CellIndex=574, CGI=25094C35026D5',
'LABEL=UH07436, CellIndex=505, CGI=25094C3501D0C',
'LABEL=UH06114, CellIndex=373, CGI=25094C35017E2',
'LABEL=UH08456, CellIndex=346, CGI=25094C3502108',
'LABEL=UH18035, CellIndex=355, CGI=25094C3504673',
'LABEL=UH39253, CellIndex=312, CGI=25094C3509955',
'LABEL=UH07435, CellIndex=504, CGI=25094C3501D0B',
'LABEL=UH19071, CellIndex=593, CGI=25094C3504A7F',
'LABEL=UH29131, CellIndex=215, CGI=25094C35071CB',
'LABEL=UH08316, CellIndex=629, CGI=25094C350207C',
'LABEL=UH08404, CellIndex=553, CGI=25094C35020D4',
'LABEL=UH39222, CellIndex=785, CGI=25094C3509936',
'LABEL=UH09606, CellIndex=635, CGI=25094C3502586',
'LABEL=UH07152, CellIndex=381, CGI=25094C3501BF0',
'LABEL=UH18033, CellIndex=353, CGI=25094C3504671',
'LABEL=UH07581, CellIndex=236, CGI=25094C3501D9D',
'LABEL=UH09502, CellIndex=210, CGI=25094C350251E',
'LABEL=UH19363, CellIndex=202, CGI=25094C3504BA3',
'LABEL=UH19362, CellIndex=201, CGI=25094C3504BA2',
'LABEL=UH09501, CellIndex=209, CGI=25094C350251D',
'LABEL=UH19361, CellIndex=200, CGI=25094C3504BA1',
'LABEL=UH07313, CellIndex=388, CGI=25094C3501C91',
'LABEL=UH18013, CellIndex=190, CGI=25094C350465D',
'LABEL=UH18011, CellIndex=189, CGI=25094C350465B',
'LABEL=UH07115, CellIndex=363, CGI=25094C3501BCB',
'LABEL=UH07652, CellIndex=187, CGI=25094C3501DE4',
'LABEL=UH08406, CellIndex=555, CGI=25094C35020D6',
'LABEL=UH18032, CellIndex=352, CGI=25094C3504670',
'LABEL=UH06103, CellIndex=150, CGI=25094C35017D7',
'LABEL=UH06021, CellIndex=180, CGI=25094C3501785',
'LABEL=UH06102, CellIndex=149, CGI=25094C35017D6',
'LABEL=UH06014, CellIndex=407, CGI=25094C350177E',
'LABEL=UH07651, CellIndex=186, CGI=25094C3501DE3',
'LABEL=UH07486, CellIndex=370, CGI=25094C3501D3E',
'LABEL=UH18543, CellIndex=142, CGI=25094C350486F',
'LABEL=UH09512, CellIndex=139, CGI=25094C3502528',
'LABEL=UH18542, CellIndex=141, CGI=25094C350486E',
'LABEL=UH09511, CellIndex=138, CGI=25094C3502527',
'LABEL=UH18541, CellIndex=140, CGI=25094C350486D',
'LABEL=UH18043, CellIndex=580, CGI=25094C350467B',
'LABEL=UH19456, CellIndex=571, CGI=25094C3504C00',
'LABEL=UH07114, CellIndex=362, CGI=25094C3501BCA',
'LABEL=UH08405, CellIndex=554, CGI=25094C35020D5',
'LABEL=UH06116, CellIndex=375, CGI=25094C35017E4',
'LABEL=UH18031, CellIndex=351, CGI=25094C350466F',
'LABEL=UH07485, CellIndex=369, CGI=25094C3501D3D',
'LABEL=UH07113, CellIndex=361, CGI=25094C3501BC9',
'LABEL=UH09912, CellIndex=350, CGI=25094C35026B8',
'LABEL=UH07513, CellIndex=399, CGI=25094C3501D59',
'LABEL=UH06225, CellIndex=405, CGI=25094C3501851',
'LABEL=UH18044, CellIndex=581, CGI=25094C350467C',
'LABEL=UH08401, CellIndex=550, CGI=25094C35020D1',
'LABEL=UH07026, CellIndex=380, CGI=25094C3501B72',
'LABEL=UH06183, CellIndex=415, CGI=25094C3501827',
'LABEL=UH09911, CellIndex=349, CGI=25094C35026B7',
'LABEL=UH07484, CellIndex=368, CGI=25094C3501D3C',
'LABEL=UH39903, CellIndex=924, CGI=25094C3509BDF',
'LABEL=UH39902, CellIndex=923, CGI=25094C3509BDE',
'LABEL=UH39901, CellIndex=922, CGI=25094C3509BDD',
'LABEL=UH07422, CellIndex=874, CGI=25094C3501CFE',
'LABEL=UH08806, CellIndex=707, CGI=25094C3502266',
'LABEL=UH08804, CellIndex=119, CGI=25094C3502264',
'LABEL=UH08796, CellIndex=1309, CGI=25094C350225C',
'LABEL=UH08794, CellIndex=1308, CGI=25094C350225A',
'LABEL=UH08795, CellIndex=865, CGI=25094C350225B',
'LABEL=UH05081, CellIndex=910, CGI=25094C35013D9',
'LABEL=UH08805, CellIndex=705, CGI=25094C3502265',
'LABEL=UH08403, CellIndex=552, CGI=25094C35020D3',
'LABEL=UH06171, CellIndex=183, CGI=25094C350181B',
'LABEL=UH09503, CellIndex=211, CGI=25094C350251F',
'LABEL=UH07311, CellIndex=386, CGI=25094C3501C8F',
]
cluster_CR = [
'LABEL=CR38585, CellIndex=1370, CGI=25034A34896B9',
'LABEL=CR38584, CellIndex=1369, CGI=25034A34896B8',
'LABEL=KR26102, CellIndex=1378, CGI=25034A7F865F6',
'LABEL=KR26101, CellIndex=1377, CGI=25034A7F865F5',
'LABEL=CR27883, CellIndex=1359, CGI=25034A7F86CEB',
'LABEL=CR27881, CellIndex=1357, CGI=25034A7F86CE9',
'LABEL=CR31013, CellIndex=1362, CGI=25034A7F87925',
'LABEL=CR31011, CellIndex=1360, CGI=25034A7F87923',
'LABEL=CR24773, CellIndex=1329, CGI=25034A7F860C5',
'LABEL=CR24771, CellIndex=1327, CGI=25034A7F860C3',
'LABEL=CR36863, CellIndex=1376, CGI=25034A3498FFF',
'LABEL=CR27683, CellIndex=1354, CGI=25034A7F86C23',
'LABEL=CR27682, CellIndex=1353, CGI=25034A7F86C22',
'LABEL=CR27672, CellIndex=1351, CGI=25034A7F86C18',
'LABEL=CR27671, CellIndex=1350, CGI=25034A7F86C17',
'LABEL=CR27583, CellIndex=1349, CGI=25034A7F86BBF',
'LABEL=CR27581, CellIndex=1347, CGI=25034A7F86BBD',
'LABEL=CR25793, CellIndex=1346, CGI=25034A34964C1',
'LABEL=CR25791, CellIndex=1344, CGI=25034A34964BF',
'LABEL=CR25713, CellIndex=1343, CGI=25034A3496471',
'LABEL=CR25711, CellIndex=1341, CGI=25034A349646F',
'LABEL=CR25673, CellIndex=1340, CGI=25034A3496449',
'LABEL=CR25671, CellIndex=1338, CGI=25034A3496447',
'LABEL=CR25573, CellIndex=1337, CGI=25034A34963E5',
'LABEL=CR25571, CellIndex=1335, CGI=25034A34963E3',
'LABEL=CR24762, CellIndex=1326, CGI=25034A7F860BA',
'LABEL=CR24761, CellIndex=1325, CGI=25034A7F860B9',
'LABEL=CR23062, CellIndex=1315, CGI=25034A3495A16',
'LABEL=CR23061, CellIndex=1314, CGI=25034A3495A15',
'LABEL=CR23052, CellIndex=1312, CGI=25034A3495A0C',
'LABEL=CR23051, CellIndex=1109, CGI=25034A3495A0B',
'LABEL=CR23042, CellIndex=500, CGI=25034A3495A02',
'LABEL=CR23041, CellIndex=499, CGI=25034A3495A01',
'LABEL=CR21902, CellIndex=88, CGI=25034A349558E',
'LABEL=CR21901, CellIndex=87, CGI=25034A349558D',
'LABEL=CR24792, CellIndex=1333, CGI=25034A7F860D8',
'LABEL=CR24561, CellIndex=1317, CGI=25034A7F85FF1',
'LABEL=CR24562, CellIndex=1318, CGI=25034A7F85FF2',
'LABEL=CR33102, CellIndex=1367, CGI=25034A7F8814E',
'LABEL=CR33101, CellIndex=1366, CGI=25034A7F8814D',
'LABEL=CR32382, CellIndex=1364, CGI=25034A7F87E7E',
'LABEL=CR32381, CellIndex=1363, CGI=25034A7F87E7D',
'LABEL=CR24692, CellIndex=1323, CGI=25034A7F86074',
'LABEL=CR24691, CellIndex=1322, CGI=25034A7F86073',
'LABEL=CR24782, CellIndex=1331, CGI=25034A7F860CE',
'LABEL=CR24781, CellIndex=1330, CGI=25034A7F860CD',
'LABEL=CR24652, CellIndex=1320, CGI=25034A7F8604C',
'LABEL=CR24651, CellIndex=1319, CGI=25034A7F8604B',
'LABEL=CR28473, CellIndex=1415, CGI=25034A9246F39',
'LABEL=CR28471, CellIndex=1413, CGI=25034A9246F37',
'LABEL=CR24993, CellIndex=1399, CGI=25034A34961A1',
'LABEL=CR24991, CellIndex=1397, CGI=25034A349619F',
'LABEL=CR29933, CellIndex=1396, CGI=25034A34974ED',
'LABEL=CR29931, CellIndex=1394, CGI=25034A34974EB',
'LABEL=CR30052, CellIndex=1392, CGI=25034A3497564',
'LABEL=CR30053, CellIndex=1393, CGI=25034A3497565',
'LABEL=CR25913, CellIndex=1390, CGI=25034A3496539',
'LABEL=CR25911, CellIndex=1388, CGI=25034A3496537',
'LABEL=CR35802, CellIndex=1386, CGI=25034A3488BDA',
'LABEL=CR35801, CellIndex=1385, CGI=25034A3488BD9',
'LABEL=CR30872, CellIndex=1381, CGI=25034A3487898',
'LABEL=CR30871, CellIndex=1380, CGI=25034A3487897',
'LABEL=CR22642, CellIndex=103, CGI=25034A7F85872',
'LABEL=CR22641, CellIndex=102, CGI=25034A7F85871',
'LABEL=CR28132, CellIndex=1441, CGI=25034A9246DE4',
'LABEL=CR28131, CellIndex=1440, CGI=25034A9246DE3',
'LABEL=CR28042, CellIndex=1438, CGI=25034A9246D8A',
'LABEL=CR28041, CellIndex=1437, CGI=25034A9246D89',
'LABEL=CR24062, CellIndex=1435, CGI=25034A9245DFE',
'LABEL=CR24061, CellIndex=1434, CGI=25034A9245DFD',
'LABEL=CR27943, CellIndex=1433, CGI=25034A9246D27',
'LABEL=CR27941, CellIndex=1431, CGI=25034A9246D25',
'LABEL=CR38576, CellIndex=1387, CGI=25034A34896B0',
'LABEL=CR38574, CellIndex=1383, CGI=25034A34896AE',
'LABEL=CR34336, CellIndex=1466, CGI=25034A3488620',
'LABEL=CR34334, CellIndex=1464, CGI=25034A348861E',
'LABEL=CR27983, CellIndex=1448, CGI=25034A9246D4F',
'LABEL=CR27981, CellIndex=1446, CGI=25034A9246D4D',
'LABEL=CR28113, CellIndex=1451, CGI=25034A9246DD1',
'LABEL=CR28111, CellIndex=1449, CGI=25034A9246DCF',
'LABEL=CR36903, CellIndex=1445, CGI=25034A9249027',
'LABEL=CR36902, CellIndex=1444, CGI=25034A9249026',
'LABEL=CR21436, CellIndex=1469, CGI=25034A34853BC',
'LABEL=CR21435, CellIndex=1468, CGI=25034A34853BB',
'LABEL=CR34296, CellIndex=1472, CGI=25034A34885F8',
'LABEL=CR34295, CellIndex=1471, CGI=25034A34885F7',
'LABEL=CR31693, CellIndex=1454, CGI=25034A9247BCD',
'LABEL=CR31692, CellIndex=1453, CGI=25034A9247BCC',
'LABEL=CR28413, CellIndex=1418, CGI=25034A9246EFD',
'LABEL=CR28412, CellIndex=1417, CGI=25034A9246EFC',
'LABEL=CR30203, CellIndex=1411, CGI=25034A34975FB',
'LABEL=CR30202, CellIndex=1410, CGI=25034A34975FA',
'LABEL=CR30201, CellIndex=1409, CGI=25034A34975F9',
'LABEL=CR35182, CellIndex=1407, CGI=25034A349896E',
'LABEL=CR35181, CellIndex=1406, CGI=25034A349896D',
'LABEL=CR35172, CellIndex=1404, CGI=25034A3498964',
'LABEL=CR35171, CellIndex=1403, CGI=25034A3498963',
'LABEL=CR30262, CellIndex=1401, CGI=25034A3497636',
'LABEL=CR30263, CellIndex=1402, CGI=25034A3497637',
'LABEL=CR35173, CellIndex=1405, CGI=25034A3498965',
'LABEL=CR35183, CellIndex=1408, CGI=25034A349896F',
'LABEL=CR28411, CellIndex=1416, CGI=25034A9246EFB',
'LABEL=CR31691, CellIndex=1452, CGI=25034A9247BCB',
'LABEL=CR34294, CellIndex=1470, CGI=25034A34885F6',
'LABEL=CR21434, CellIndex=1467, CGI=25034A34853BA',
'LABEL=CR36901, CellIndex=1443, CGI=25034A9249025',
'LABEL=CR28112, CellIndex=1450, CGI=25034A9246DD0',
'LABEL=CR27982, CellIndex=1447, CGI=25034A9246D4E',
'LABEL=CR34335, CellIndex=1465, CGI=25034A348861F',
'LABEL=CR38575, CellIndex=1384, CGI=25034A34896AF',
'LABEL=CR27942, CellIndex=1432, CGI=25034A9246D26',
'LABEL=CR24063, CellIndex=1436, CGI=25034A9245DFF',
'LABEL=CR28043, CellIndex=1439, CGI=25034A9246D8B',
'LABEL=CR28133, CellIndex=1442, CGI=25034A9246DE5',
'LABEL=CR22643, CellIndex=104, CGI=25034A7F85873',
'LABEL=CR30873, CellIndex=1382, CGI=25034A3487899',
'LABEL=CR25912, CellIndex=1389, CGI=25034A3496538',
'LABEL=CR30051, CellIndex=1391, CGI=25034A3497563',
'LABEL=CR29932, CellIndex=1395, CGI=25034A34974EC',
'LABEL=CR24992, CellIndex=1398, CGI=25034A34961A0',
'LABEL=CR28472, CellIndex=1414, CGI=25034A9246F38',
'LABEL=CR24653, CellIndex=1321, CGI=25034A7F8604D',
'LABEL=CR24783, CellIndex=1332, CGI=25034A7F860CF',
'LABEL=CR24693, CellIndex=1324, CGI=25034A7F86075',
'LABEL=CR32383, CellIndex=1365, CGI=25034A7F87E7F',
'LABEL=CR33103, CellIndex=1368, CGI=25034A7F8814F',
'LABEL=CR24793, CellIndex=1334, CGI=25034A7F860D9',
'LABEL=CR21903, CellIndex=89, CGI=25034A349558F',
'LABEL=CR23043, CellIndex=1108, CGI=25034A3495A03',
'LABEL=CR23053, CellIndex=1313, CGI=25034A3495A0D',
'LABEL=CR23063, CellIndex=1316, CGI=25034A3495A17',
'LABEL=CR25572, CellIndex=1336, CGI=25034A34963E4',
'LABEL=CR25672, CellIndex=1339, CGI=25034A3496448',
'LABEL=CR25712, CellIndex=1342, CGI=25034A3496470',
'LABEL=CR25792, CellIndex=1345, CGI=25034A34964C0',
'LABEL=CR27582, CellIndex=1348, CGI=25034A7F86BBE',
'LABEL=CR27673, CellIndex=1352, CGI=25034A7F86C19',
'LABEL=CR36862, CellIndex=1375, CGI=25034A3498FFE',
'LABEL=CR24772, CellIndex=1328, CGI=25034A7F860C4',
'LABEL=CR31012, CellIndex=1361, CGI=25034A7F87924',
'LABEL=CR27882, CellIndex=1358, CGI=25034A7F86CEA',
'LABEL=KR26103, CellIndex=1379, CGI=25034A7F865F7',
'LABEL=CR30261, CellIndex=1400, CGI=25034A3497635',
'LABEL=CR34376, CellIndex=1478, CGI=25034A3488648',
'LABEL=CR34375, CellIndex=1477, CGI=25034A3488647',
'LABEL=CR34396, CellIndex=1475, CGI=25034A348865C',
'LABEL=CR34395, CellIndex=1474, CGI=25034A348865B',
'LABEL=CR31423, CellIndex=1463, CGI=25034A9247ABF',
'LABEL=CR31422, CellIndex=1462, CGI=25034A9247ABE',
'LABEL=CR23253, CellIndex=1460, CGI=25034A9245AD5',
'LABEL=CR23252, CellIndex=1459, CGI=25034A9245AD4',
'LABEL=CR31463, CellIndex=1457, CGI=25034A9247AE7',
'LABEL=CR31462, CellIndex=1456, CGI=25034A9247AE6',
'LABEL=CR31461, CellIndex=1455, CGI=25034A9247AE5',
'LABEL=CR27922, CellIndex=1429, CGI=25034A9246D12',
'LABEL=CR27921, CellIndex=1428, CGI=25034A9246D11',
'LABEL=CR24542, CellIndex=1426, CGI=25034A9245FDE',
'LABEL=CR24541, CellIndex=1425, CGI=25034A9245FDD',
'LABEL=CR28352, CellIndex=1423, CGI=25034A9246EC0',
'LABEL=CR28351, CellIndex=1422, CGI=25034A9246EBF',
'LABEL=CR27912, CellIndex=1420, CGI=25034A9246D08',
'LABEL=CR27911, CellIndex=1419, CGI=25034A9246D07',
'LABEL=CR21846, CellIndex=1509, CGI=25034A9245556',
'LABEL=CR21845, CellIndex=1508, CGI=25034A9245555',
'LABEL=CR21844, CellIndex=1507, CGI=25034A9245554',
'LABEL=CR31602, CellIndex=1505, CGI=25034A9247B72',
'LABEL=CR31601, CellIndex=1504, CGI=25034A9247B71',
'LABEL=CR24142, CellIndex=1502, CGI=25034A9245E4E',
'LABEL=CR24141, CellIndex=1501, CGI=25034A9245E4D',
'LABEL=CR24855, CellIndex=1499, CGI=25034A3486117',
'LABEL=CR24854, CellIndex=1498, CGI=25034A3486116',
'LABEL=CR38555, CellIndex=1496, CGI=25034A348969B',
'LABEL=CR38554, CellIndex=1495, CGI=25034A348969A',
'LABEL=CR36785, CellIndex=1483, CGI=25034A3488FB1',
'LABEL=CR36784, CellIndex=1482, CGI=25034A3488FB0',
'LABEL=CR24476, CellIndex=1481, CGI=25034A3485F9C',
'LABEL=CR24474, CellIndex=1479, CGI=25034A3485F9A',
'LABEL=CR24111, CellIndex=1494, CGI=25034A3485E2F',
'LABEL=CR27475, CellIndex=1492, CGI=25034A3486B53',
'LABEL=CR27474, CellIndex=1491, CGI=25034A3486B52',
'LABEL=CR21745, CellIndex=1489, CGI=25034A34854F1',
'LABEL=CR21744, CellIndex=1488, CGI=25034A34854F0',
'LABEL=CR38865, CellIndex=1486, CGI=25034A34897D1',
'LABEL=CR38864, CellIndex=1485, CGI=25034A34897D0',
'LABEL=CR38866, CellIndex=1487, CGI=25034A34897D2',
'LABEL=CR21746, CellIndex=1490, CGI=25034A34854F2',
'LABEL=CR27476, CellIndex=1493, CGI=25034A3486B54',
'LABEL=CR24475, CellIndex=1480, CGI=25034A3485F9B',
'LABEL=CR36786, CellIndex=1484, CGI=25034A3488FB2',
'LABEL=CR38556, CellIndex=1497, CGI=25034A348969C',
'LABEL=CR24856, CellIndex=1500, CGI=25034A3486118',
'LABEL=CR24143, CellIndex=1503, CGI=25034A9245E4F',
'LABEL=CR31603, CellIndex=1506, CGI=25034A9247B73',
'LABEL=CR30812, CellIndex=1412, CGI=25034A349785C',
'LABEL=CR27913, CellIndex=1421, CGI=25034A9246D09',
'LABEL=CR28353, CellIndex=1424, CGI=25034A9246EC1',
'LABEL=CR24543, CellIndex=1427, CGI=25034A9245FDF',
'LABEL=CR27923, CellIndex=1430, CGI=25034A9246D13',
'LABEL=CR23251, CellIndex=1458, CGI=25034A9245AD3',
'LABEL=CR31421, CellIndex=1461, CGI=25034A9247ABD',
'LABEL=CR34394, CellIndex=1473, CGI=25034A348865A',
'LABEL=CR34374, CellIndex=1476, CGI=25034A3488646',
]
cluster_Sim = [
'LABEL=9046, CellIndex=7998, CGI=25034A3482356',
'LABEL=9045, CellIndex=7997, CGI=25034A3482355',
]
cluster_Kahovka = [
'LABEL=UH18826, CellIndex=1073, CGI=25094C350498A',
'LABEL=UH18825, CellIndex=1072, CGI=25094C3504989',
'LABEL=UH18824, CellIndex=1071, CGI=25094C3504988',
'LABEL=UH18823, CellIndex=1070, CGI=25094C3504987',
'LABEL=UH18822, CellIndex=1069, CGI=25094C3504986',
'LABEL=UH18821, CellIndex=1068, CGI=25094C3504985',
'LABEL=UH09953, CellIndex=1040, CGI=25094C35026E1',
'LABEL=UH09952, CellIndex=1039, CGI=25094C35026E0',
'LABEL=UH09951, CellIndex=1038, CGI=25094C35026DF',
'LABEL=UH39183, CellIndex=1043, CGI=25094C350990F',
'LABEL=UH39181, CellIndex=1041, CGI=25094C350990D',
'LABEL=UH08203, CellIndex=250, CGI=25094C350200B',
'LABEL=UH08204, CellIndex=251, CGI=25094C350200C',
'LABEL=UH08205, CellIndex=252, CGI=25094C350200D',
'LABEL=UH39182, CellIndex=1042, CGI=25094C350990E',
'LABEL=UH09883, CellIndex=367, CGI=25094C350269B',
'LABEL=UH09882, CellIndex=366, CGI=25094C350269A',
'LABEL=UH09881, CellIndex=365, CGI=25094C3502699',
'LABEL=UH08206, CellIndex=253, CGI=25094C350200E',
'LABEL=UH08202, CellIndex=249, CGI=25094C350200A',
'LABEL=UH08201, CellIndex=248, CGI=25094C3502009',
] # новый кластер для отчёта
cluster_N_Kahovka = [
'LABEL=UH29813, CellIndex=883, CGI=25094C3507475',
'LABEL=UH29812, CellIndex=882, CGI=25094C3507474',
'LABEL=UH29811, CellIndex=881, CGI=25094C3507473',
'LABEL=UH19473, CellIndex=880, CGI=25094C3504C11',
'LABEL=UH19472, CellIndex=879, CGI=25094C3504C10',
'LABEL=UH19471, CellIndex=878, CGI=25094C3504C0F',
'LABEL=UH08216, CellIndex=259, CGI=25094C3502018',
'LABEL=UH08215, CellIndex=258, CGI=25094C3502017',
'LABEL=UH08214, CellIndex=257, CGI=25094C3502016',
'LABEL=UH09703, CellIndex=306, CGI=25094C35025E7',
'LABEL=UH08815, CellIndex=270, CGI=25094C350226F',
'LABEL=UH08812, CellIndex=267, CGI=25094C350226C',
'LABEL=UH09701, CellIndex=304, CGI=25094C35025E5',
'LABEL=UH08811, CellIndex=266, CGI=25094C350226B',
'LABEL=UH39252, CellIndex=311, CGI=25094C3509954',
'LABEL=UH39251, CellIndex=310, CGI=25094C3509953',
'LABEL=UH08816, CellIndex=271, CGI=25094C3502270',
'LABEL=UH08814, CellIndex=269, CGI=25094C350226E',
'LABEL=UH08213, CellIndex=256, CGI=25094C3502015',
'LABEL=UH08813, CellIndex=268, CGI=25094C350226D',
'LABEL=UH08212, CellIndex=255, CGI=25094C3502014',
'LABEL=UH09702, CellIndex=305, CGI=25094C35025E6',
'LABEL=UH08211, CellIndex=254, CGI=25094C3502013',
'LABEL=UH39253, CellIndex=312, CGI=25094C3509955',
]  # новый кластер для отчёта
cluster_Genichesk = [
'LABEL=UH06023, CellIndex=182, CGI=25094C3501787',
'LABEL=UH06022, CellIndex=181, CGI=25094C3501786',
'LABEL=UH46003, CellIndex=508, CGI=25094C350B3B3',
'LABEL=UH09523, CellIndex=473, CGI=25094C3502533',
'LABEL=UH09663, CellIndex=476, CGI=25094C35025BF',
'LABEL=UH09522, CellIndex=472, CGI=25094C3502532',
'LABEL=UH09662, CellIndex=475, CGI=25094C35025BE',
'LABEL=UH09661, CellIndex=474, CGI=25094C35025BD',
'LABEL=UH09521, CellIndex=471, CGI=25094C3502531',
'LABEL=UH46002, CellIndex=507, CGI=25094C350B3B2',
'LABEL=UH46001, CellIndex=506, CGI=25094C350B3B1',
'LABEL=UH06021, CellIndex=180, CGI=25094C3501785',
] # новый кластер для отчёта
cluster_Zhel_Port = [
'LABEL=UH29321, CellIndex=907, CGI=25094C3507289',
'LABEL=UH29323, CellIndex=909, CGI=25094C350728B',
'LABEL=UH29322, CellIndex=908, CGI=25094C350728A',
'LABEL=UH17042, CellIndex=920, CGI=25094C3504292',
'LABEL=UH17043, CellIndex=921, CGI=25094C3504293',
'LABEL=UH17041, CellIndex=919, CGI=25094C3504291',
'LABEL=UH08323, CellIndex=852, CGI=25094C3502083',
'LABEL=UH08321, CellIndex=851, CGI=25094C3502081',
'LABEL=UH08322, CellIndex=859, CGI=25094C3502082',
'LABEL=UH08326, CellIndex=855, CGI=25094C3502086',
'LABEL=UH08325, CellIndex=854, CGI=25094C3502085',
'LABEL=UH08324, CellIndex=853, CGI=25094C3502084',
'LABEL=UH09605, CellIndex=634, CGI=25094C3502585',
'LABEL=UH09604, CellIndex=633, CGI=25094C3502584',
'LABEL=UH19601, CellIndex=674, CGI=25094C3504C91',
'LABEL=UH09603, CellIndex=632, CGI=25094C3502583',
'LABEL=UH09602, CellIndex=631, CGI=25094C3502582',
'LABEL=UH19603, CellIndex=676, CGI=25094C3504C93',
'LABEL=UH19602, CellIndex=675, CGI=25094C3504C92',
'LABEL=UH19051, CellIndex=677, CGI=25094C3504A6B',
'LABEL=UH09601, CellIndex=630, CGI=25094C3502581',
'LABEL=UH19583, CellIndex=606, CGI=25094C3504C7F',
'LABEL=UH19582, CellIndex=605, CGI=25094C3504C7E',
'LABEL=UH17033, CellIndex=579, CGI=25094C3504289',
'LABEL=UH17032, CellIndex=578, CGI=25094C3504288',
'LABEL=UH17031, CellIndex=577, CGI=25094C3504287',
'LABEL=UH19076, CellIndex=598, CGI=25094C3504A84',
'LABEL=UH19075, CellIndex=597, CGI=25094C3504A83',
'LABEL=UH19073, CellIndex=595, CGI=25094C3504A81',
'LABEL=UH19074, CellIndex=596, CGI=25094C3504A82',
'LABEL=UH19052, CellIndex=678, CGI=25094C3504A6C',
'LABEL=UH19072, CellIndex=594, CGI=25094C3504A80',
'LABEL=UH19071, CellIndex=593, CGI=25094C3504A7F',
'LABEL=UH09606, CellIndex=635, CGI=25094C3502586',
] # новый кластер для отчёта
cluster_Lazurnoye = [
'LABEL=UH19646, CellIndex=1249, CGI=25094C3504CBE',
'LABEL=UH19645, CellIndex=1248, CGI=25094C3504CBD',
'LABEL=UH19644, CellIndex=1247, CGI=25094C3504CBC',
'LABEL=UH19643, CellIndex=1246, CGI=25094C3504CBB',
'LABEL=UH19641, CellIndex=1244, CGI=25094C3504CB9',
'LABEL=UH09632, CellIndex=762, CGI=25094C35025A0',
'LABEL=UH09633, CellIndex=763, CGI=25094C35025A1',
'LABEL=UH09634, CellIndex=764, CGI=25094C35025A2',
'LABEL=UH09631, CellIndex=761, CGI=25094C350259F',
'LABEL=UH39893, CellIndex=649, CGI=25094C3509BD5',
'LABEL=UH09636, CellIndex=766, CGI=25094C35025A4',
'LABEL=UH39891, CellIndex=647, CGI=25094C3509BD3',
'LABEL=UH09635, CellIndex=765, CGI=25094C35025A3',
'LABEL=UH08315, CellIndex=628, CGI=25094C350207B',
'LABEL=UH08314, CellIndex=627, CGI=25094C350207A',
'LABEL=UH08313, CellIndex=626, CGI=25094C3502079',
'LABEL=UH17073, CellIndex=658, CGI=25094C35042B1',
'LABEL=UH08311, CellIndex=624, CGI=25094C3502077',
'LABEL=UH17072, CellIndex=657, CGI=25094C35042B0',
'LABEL=UH17053, CellIndex=681, CGI=25094C350429D',
'LABEL=UH19642, CellIndex=1245, CGI=25094C3504CBA',
'LABEL=UH17052, CellIndex=680, CGI=25094C350429C',
'LABEL=UH39892, CellIndex=648, CGI=25094C3509BD4',
'LABEL=UH17071, CellIndex=656, CGI=25094C35042AF',
'LABEL=UH17051, CellIndex=679, CGI=25094C350429B',
'LABEL=UH08312, CellIndex=625, CGI=25094C3502078',
'LABEL=UH08316, CellIndex=629, CGI=25094C350207C',
] # новый кластер для отчёта
cluster_Skadovsk = [
'LABEL=UH08306, CellIndex=818, CGI=25094C3502072',
'LABEL=UH08305, CellIndex=817, CGI=25094C3502071',
'LABEL=UH08304, CellIndex=816, CGI=25094C3502070',
'LABEL=UH08303, CellIndex=815, CGI=25094C350206F',
'LABEL=UH39223, CellIndex=786, CGI=25094C3509937',
'LABEL=UH39221, CellIndex=784, CGI=25094C3509935',
'LABEL=UH29383, CellIndex=687, CGI=25094C35072C7',
'LABEL=UH29382, CellIndex=686, CGI=25094C35072C6',
'LABEL=UH08301, CellIndex=813, CGI=25094C350206D',
'LABEL=UH29381, CellIndex=685, CGI=25094C35072C5',
'LABEL=UH09613, CellIndex=638, CGI=25094C350258D',
'LABEL=UH09612, CellIndex=637, CGI=25094C350258C',
'LABEL=UH09611, CellIndex=636, CGI=25094C350258B',
'LABEL=UH09626, CellIndex=564, CGI=25094C350259A',
'LABEL=UH09625, CellIndex=563, CGI=25094C3502599',
'LABEL=UH09622, CellIndex=560, CGI=25094C3502596',
'LABEL=UH08302, CellIndex=814, CGI=25094C350206E',
'LABEL=UH09623, CellIndex=561, CGI=25094C3502597',
'LABEL=UH09621, CellIndex=559, CGI=25094C3502595',
'LABEL=UH09624, CellIndex=562, CGI=25094C3502598',
'LABEL=UH39222, CellIndex=785, CGI=25094C3509936',
'LABEL=UH39903, CellIndex=924, CGI=25094C3509BDF',
'LABEL=UH39902, CellIndex=923, CGI=25094C3509BDE',
'LABEL=UH39901, CellIndex=922, CGI=25094C3509BDD',
] # новый кластер для отчёта
cluster_VsyoOstalnoye = [
'LABEL=UH27096, CellIndex=1307, CGI=25094C35069D8',
'LABEL=UH27095, CellIndex=1306, CGI=25094C35069D7',
'LABEL=UH27094, CellIndex=1305, CGI=25094C35069D6',
'LABEL=UH27093, CellIndex=1304, CGI=25094C35069D5',
'LABEL=UH27092, CellIndex=1303, CGI=25094C35069D4',
'LABEL=UH27091, CellIndex=1302, CGI=25094C35069D3',
'LABEL=UH39283, CellIndex=1120, CGI=25094C3509973',
'LABEL=UH39282, CellIndex=1119, CGI=25094C3509972',
'LABEL=UH39281, CellIndex=1118, CGI=25094C3509971',
'LABEL=UH39962, CellIndex=965, CGI=25094C3509C1A',
'LABEL=UH39963, CellIndex=966, CGI=25094C3509C1B',
'LABEL=UH39961, CellIndex=964, CGI=25094C3509C19',
'LABEL=UH07616, CellIndex=1295, CGI=25094C3501DC0',
'LABEL=UH07614, CellIndex=1294, CGI=25094C3501DBE',
'LABEL=UH07613, CellIndex=1293, CGI=25094C3501DBD',
'LABEL=UH07466, CellIndex=1291, CGI=25094C3501D2A',
'LABEL=UH07465, CellIndex=1290, CGI=25094C3501D29',
'LABEL=UH07463, CellIndex=1289, CGI=25094C3501D27',
'LABEL=UH07462, CellIndex=1288, CGI=25094C3501D26',
'LABEL=UH19365, CellIndex=535, CGI=25094C3504BA5',
'LABEL=UH19366, CellIndex=1262, CGI=25094C3504BA6',
'LABEL=UH09803, CellIndex=1258, CGI=25094C350264B',
'LABEL=UH09802, CellIndex=1257, CGI=25094C350264A',
'LABEL=UH09801, CellIndex=1256, CGI=25094C3502649',
'LABEL=UH19033, CellIndex=1255, CGI=25094C3504A59',
'LABEL=UH19032, CellIndex=1254, CGI=25094C3504A58',
'LABEL=UH09743, CellIndex=1252, CGI=25094C350260F',
'LABEL=UH09742, CellIndex=1251, CGI=25094C350260E',
'LABEL=UH19031, CellIndex=1253, CGI=25094C3504A57',
'LABEL=UH08463, CellIndex=1237, CGI=25094C350210F',
'LABEL=UH08461, CellIndex=1236, CGI=25094C350210D',
'LABEL=UH09741, CellIndex=1250, CGI=25094C350260D',
'LABEL=UH16036, CellIndex=1226, CGI=25094C3503EA4',
'LABEL=UH16035, CellIndex=1225, CGI=25094C3503EA3',
'LABEL=UH16034, CellIndex=1224, CGI=25094C3503EA2',
'LABEL=UH16046, CellIndex=1217, CGI=25094C3503EAE',
'LABEL=UH16045, CellIndex=1216, CGI=25094C3503EAD',
'LABEL=UH16044, CellIndex=1215, CGI=25094C3503EAC',
'LABEL=UH08543, CellIndex=1229, CGI=25094C350215F',
'LABEL=UH08542, CellIndex=1228, CGI=25094C350215E',
'LABEL=UH08466, CellIndex=1240, CGI=25094C3502112',
'LABEL=UH08465, CellIndex=1239, CGI=25094C3502111',
'LABEL=UH08464, CellIndex=1238, CGI=25094C3502110',
'LABEL=UH19842, CellIndex=7, CGI=25094C3504D82',
'LABEL=UH19841, CellIndex=6, CGI=25094C3504D81',
'LABEL=UH19843, CellIndex=8, CGI=25094C3504D83',
'LABEL=UH19183, CellIndex=1076, CGI=25094C3504AEF',
'LABEL=UH19182, CellIndex=1075, CGI=25094C3504AEE',
'LABEL=UH19181, CellIndex=1074, CGI=25094C3504AED',
'LABEL=UH09555, CellIndex=1066, CGI=25094C3502553',
'LABEL=UH09554, CellIndex=1065, CGI=25094C3502552',
'LABEL=UH09553, CellIndex=1064, CGI=25094C3502551',
'LABEL=UH09552, CellIndex=1063, CGI=25094C3502550',
'LABEL=UH09551, CellIndex=1062, CGI=25094C350254F',
'LABEL=UH07236, CellIndex=1049, CGI=25094C3501C44',
'LABEL=UH07235, CellIndex=1048, CGI=25094C3501C43',
'LABEL=UH07234, CellIndex=1047, CGI=25094C3501C42',
'LABEL=UH07233, CellIndex=1046, CGI=25094C3501C41',
'LABEL=UH07232, CellIndex=1045, CGI=25094C3501C40',
'LABEL=UH07231, CellIndex=1044, CGI=25094C3501C3F',
'LABEL=UH19286, CellIndex=954, CGI=25094C3504B56',
'LABEL=UH19285, CellIndex=953, CGI=25094C3504B55',
'LABEL=UH19283, CellIndex=952, CGI=25094C3504B53',
'LABEL=UH19282, CellIndex=951, CGI=25094C3504B52',
'LABEL=UH06366, CellIndex=949, CGI=25094C35018DE',
'LABEL=UH06365, CellIndex=948, CGI=25094C35018DD',
'LABEL=UH06364, CellIndex=947, CGI=25094C35018DC',
'LABEL=UH06363, CellIndex=946, CGI=25094C35018DB',
'LABEL=UH19281, CellIndex=950, CGI=25094C3504B51',
'LABEL=UH06362, CellIndex=945, CGI=25094C35018DA',
'LABEL=UH06361, CellIndex=944, CGI=25094C35018D9',
'LABEL=UH39953, CellIndex=963, CGI=25094C3509C11',
'LABEL=UH39952, CellIndex=962, CGI=25094C3509C10',
'LABEL=UH39951, CellIndex=961, CGI=25094C3509C0F',
'LABEL=UH07454, CellIndex=788, CGI=25094C3501D1E',
'LABEL=UH06005, CellIndex=928, CGI=25094C3501775',
'LABEL=UH06004, CellIndex=927, CGI=25094C3501774',
'LABEL=UH06002, CellIndex=926, CGI=25094C3501772',
'LABEL=UH06001, CellIndex=925, CGI=25094C3501771',
'LABEL=UH06463, CellIndex=915, CGI=25094C350193F',
'LABEL=UH06462, CellIndex=914, CGI=25094C350193E',
'LABEL=UH06461, CellIndex=913, CGI=25094C350193D',
'LABEL=UH06464, CellIndex=911, CGI=25094C3501940',
'LABEL=UH05082, CellIndex=916, CGI=25094C35013DA',
'LABEL=UH07426, CellIndex=877, CGI=25094C3501D02',
'LABEL=UH07425, CellIndex=876, CGI=25094C3501D01',
'LABEL=UH07424, CellIndex=875, CGI=25094C3501D00',
'LABEL=UH19002, CellIndex=833, CGI=25094C3504A3A',
'LABEL=UH07607, CellIndex=870, CGI=25094C3501DB7',
'LABEL=UH07604, CellIndex=867, CGI=25094C3501DB4',
'LABEL=UH09902, CellIndex=872, CGI=25094C35026AE',
'LABEL=UH09901, CellIndex=871, CGI=25094C35026AD',
'LABEL=UH07596, CellIndex=863, CGI=25094C3501DAC',
'LABEL=UH07606, CellIndex=869, CGI=25094C3501DB6',
'LABEL=UH19001, CellIndex=832, CGI=25094C3504A39',
'LABEL=UH07595, CellIndex=862, CGI=25094C3501DAB',
'LABEL=UH07593, CellIndex=861, CGI=25094C3501DA9',
'LABEL=UH07592, CellIndex=860, CGI=25094C3501DA8',
'LABEL=UH19132, CellIndex=846, CGI=25094C3504ABC',
'LABEL=UH08416, CellIndex=844, CGI=25094C35020E0',
'LABEL=UH08415, CellIndex=843, CGI=25094C35020DF',
'LABEL=UH08414, CellIndex=842, CGI=25094C35020DE',
'LABEL=UH08412, CellIndex=841, CGI=25094C35020DC',
'LABEL=UH19135, CellIndex=849, CGI=25094C3504ABF',
'LABEL=UH19134, CellIndex=848, CGI=25094C3504ABE',
'LABEL=UH19133, CellIndex=847, CGI=25094C3504ABD',
'LABEL=UH19131, CellIndex=845, CGI=25094C3504ABB',
'LABEL=UH07605, CellIndex=868, CGI=25094C3501DB5',
'LABEL=UH19003, CellIndex=834, CGI=25094C3504A3B',
'LABEL=UH07421, CellIndex=873, CGI=25094C3501CFD',
'LABEL=UH08226, CellIndex=840, CGI=25094C3502022',
'LABEL=UH08225, CellIndex=839, CGI=25094C3502021',
'LABEL=UH08223, CellIndex=837, CGI=25094C350201F',
'LABEL=UH08222, CellIndex=836, CGI=25094C350201E',
'LABEL=UH08221, CellIndex=835, CGI=25094C350201D',
'LABEL=UH06146, CellIndex=801, CGI=25094C3501802',
'LABEL=UH06145, CellIndex=800, CGI=25094C3501801',
'LABEL=UH06141, CellIndex=797, CGI=25094C35017FD',
'LABEL=UH08492, CellIndex=774, CGI=25094C350212C',
'LABEL=UH07505, CellIndex=692, CGI=25094C3501D51',
'LABEL=UH19455, CellIndex=570, CGI=25094C3504BFF',
'LABEL=UH07662, CellIndex=538, CGI=25094C3501DEE',
'LABEL=UH08356, CellIndex=265, CGI=25094C35020A4',
'LABEL=UH08355, CellIndex=264, CGI=25094C35020A3',
'LABEL=UH07374, CellIndex=316, CGI=25094C3501CCE',
'LABEL=UH07635, CellIndex=448, CGI=25094C3501DD3',
'LABEL=UH07633, CellIndex=447, CGI=25094C3501DD1',
'LABEL=UH07632, CellIndex=446, CGI=25094C3501DD0',
'LABEL=UH07661, CellIndex=537, CGI=25094C3501DED',
'LABEL=UH08354, CellIndex=263, CGI=25094C35020A2',
'LABEL=UH07705, CellIndex=459, CGI=25094C3501E19',
'LABEL=UH07664, CellIndex=536, CGI=25094C3501DF0',
'LABEL=UH07376, CellIndex=318, CGI=25094C3501CD0',
'LABEL=UH07526, CellIndex=323, CGI=25094C3501D66',
'LABEL=UH07704, CellIndex=458, CGI=25094C3501E18',
'LABEL=UH08076, CellIndex=727, CGI=25094C3501F8C',
'LABEL=UH08075, CellIndex=726, CGI=25094C3501F8B',
'LABEL=UH07674, CellIndex=452, CGI=25094C3501DFA',
'LABEL=UH07346, CellIndex=444, CGI=25094C3501CB2',
'LABEL=UH07676, CellIndex=454, CGI=25094C3501DFC',
'LABEL=UH08454, CellIndex=344, CGI=25094C3502106',
'LABEL=UH07345, CellIndex=443, CGI=25094C3501CB1',
'LABEL=UH08255, CellIndex=465, CGI=25094C350203F',
'LABEL=UH07506, CellIndex=693, CGI=25094C3501D52',
'LABEL=UH07675, CellIndex=453, CGI=25094C3501DFB',
'LABEL=UH07375, CellIndex=317, CGI=25094C3501CCF',
'LABEL=UH07386, CellIndex=704, CGI=25094C3501CDA',
'LABEL=UH08402, CellIndex=551, CGI=25094C35020D2',
'LABEL=UH07582, CellIndex=237, CGI=25094C3501D9E',
'LABEL=UH08236, CellIndex=710, CGI=25094C350202C',
'LABEL=UH08254, CellIndex=464, CGI=25094C350203E',
'LABEL=UH07066, CellIndex=516, CGI=25094C3501B9A',
'LABEL=UH06186, CellIndex=418, CGI=25094C350182A',
'LABEL=UH19251, CellIndex=749, CGI=25094C3504B33',
'LABEL=UH07064, CellIndex=514, CGI=25094C3501B98',
'LABEL=UH06235, CellIndex=228, CGI=25094C350185B',
'LABEL=UH07136, CellIndex=528, CGI=25094C3501BE0',
'LABEL=UH06234, CellIndex=227, CGI=25094C350185A',
'LABEL=UH06185, CellIndex=417, CGI=25094C3501829',
'LABEL=UH07151, CellIndex=385, CGI=25094C3501BEF',
'LABEL=UH06012, CellIndex=411, CGI=25094C350177C',
'LABEL=UH07135, CellIndex=527, CGI=25094C3501BDF',
'LABEL=UH06184, CellIndex=416, CGI=25094C3501828',
'LABEL=UH19103, CellIndex=760, CGI=25094C3504A9F',
'LABEL=UH07385, CellIndex=703, CGI=25094C3501CD9',
'LABEL=UH07134, CellIndex=526, CGI=25094C3501BDE',
'LABEL=UH07145, CellIndex=423, CGI=25094C3501BE9',
'LABEL=UH19063, CellIndex=742, CGI=25094C3504A77',
'LABEL=UH19062, CellIndex=741, CGI=25094C3504A76',
'LABEL=UH19102, CellIndex=759, CGI=25094C3504A9E',
'LABEL=UH06232, CellIndex=225, CGI=25094C3501858',
'LABEL=UH06115, CellIndex=374, CGI=25094C35017E3',
'LABEL=UH07133, CellIndex=525, CGI=25094C3501BDD',
'LABEL=UH19061, CellIndex=740, CGI=25094C3504A75',
'LABEL=UH07054, CellIndex=510, CGI=25094C3501B8E',
'LABEL=UH07142, CellIndex=420, CGI=25094C3501BE6',
'LABEL=UH19101, CellIndex=758, CGI=25094C3504A9D',
'LABEL=UH07036, CellIndex=698, CGI=25094C3501B7C',
'LABEL=UH06011, CellIndex=410, CGI=25094C350177B',
'LABEL=UH06016, CellIndex=409, CGI=25094C3501780',
'LABEL=UH06015, CellIndex=408, CGI=25094C350177F',
'LABEL=UH09654, CellIndex=737, CGI=25094C35025B6',
'LABEL=UH07384, CellIndex=702, CGI=25094C3501CD8',
'LABEL=UH08234, CellIndex=708, CGI=25094C350202A',
'LABEL=UH07383, CellIndex=701, CGI=25094C3501CD7',
'LABEL=UH07382, CellIndex=700, CGI=25094C3501CD6',
'LABEL=UH07381, CellIndex=699, CGI=25094C3501CD5',
'LABEL=UH08232, CellIndex=706, CGI=25094C3502028',
'LABEL=UH07035, CellIndex=697, CGI=25094C3501B7B',
'LABEL=UH07176, CellIndex=667, CGI=25094C3501C08',
'LABEL=UH09653, CellIndex=736, CGI=25094C35025B5',
'LABEL=UH09652, CellIndex=735, CGI=25094C35025B4',
'LABEL=UH07175, CellIndex=666, CGI=25094C3501C07',
'LABEL=UH07174, CellIndex=665, CGI=25094C3501C06',
'LABEL=UH09651, CellIndex=734, CGI=25094C35025B3',
'LABEL=UH07173, CellIndex=664, CGI=25094C3501C05',
'LABEL=UH19173, CellIndex=713, CGI=25094C3504AE5',
'LABEL=UH08074, CellIndex=725, CGI=25094C3501F8A',
'LABEL=UH19172, CellIndex=712, CGI=25094C3504AE4',
'LABEL=UH06173, CellIndex=185, CGI=25094C350181D',
'LABEL=UH08073, CellIndex=724, CGI=25094C3501F89',
'LABEL=UH19171, CellIndex=711, CGI=25094C3504AE3',
'LABEL=UH08072, CellIndex=723, CGI=25094C3501F88',
'LABEL=UH09793, CellIndex=715, CGI=25094C3502641',
'LABEL=UH08071, CellIndex=722, CGI=25094C3501F87',
'LABEL=UH09792, CellIndex=714, CGI=25094C3502640',
'LABEL=UH06172, CellIndex=184, CGI=25094C350181C',
'LABEL=UH07033, CellIndex=695, CGI=25094C3501B79',
'LABEL=UH07361, CellIndex=791, CGI=25094C3501CC1',
'LABEL=UH07544, CellIndex=821, CGI=25094C3501D78',
'LABEL=UH07395, CellIndex=808, CGI=25094C3501CE3',
'LABEL=UH07541, CellIndex=819, CGI=25094C3501D75',
'LABEL=UH07502, CellIndex=689, CGI=25094C3501D4E',
'LABEL=UH06144, CellIndex=799, CGI=25094C3501800',
'LABEL=UH08396, CellIndex=780, CGI=25094C35020CC',
'LABEL=UH07504, CellIndex=691, CGI=25094C3501D50',
'LABEL=UH27633, CellIndex=673, CGI=25094C3506BF1',
'LABEL=UH39213, CellIndex=670, CGI=25094C350992D',
'LABEL=UH27632, CellIndex=672, CGI=25094C3506BF0',
'LABEL=UH27631, CellIndex=671, CGI=25094C3506BEF',
'LABEL=UH19333, CellIndex=661, CGI=25094C3504B85',
'LABEL=UH39212, CellIndex=669, CGI=25094C350992C',
'LABEL=UH07503, CellIndex=690, CGI=25094C3501D4F',
'LABEL=UH19332, CellIndex=660, CGI=25094C3504B84',
'LABEL=UH09763, CellIndex=684, CGI=25094C3502623',
'LABEL=UH09762, CellIndex=683, CGI=25094C3502622',
'LABEL=UH07501, CellIndex=688, CGI=25094C3501D4D',
'LABEL=UH07031, CellIndex=694, CGI=25094C3501B77',
'LABEL=UH07034, CellIndex=696, CGI=25094C3501B7A',
'LABEL=UH07046, CellIndex=488, CGI=25094C3501B86',
'LABEL=UH06233, CellIndex=226, CGI=25094C3501859',
'LABEL=UH08455, CellIndex=345, CGI=25094C3502107',
'LABEL=UH08224, CellIndex=838, CGI=25094C3502020',
'LABEL=UH19136, CellIndex=850, CGI=25094C3504AC0',
'LABEL=UH07601, CellIndex=866, CGI=25094C3501DB1',
'LABEL=UH06465, CellIndex=912, CGI=25094C3501941',
'LABEL=UH07455, CellIndex=789, CGI=25094C3501D1F',
'LABEL=UH09556, CellIndex=1067, CGI=25094C3502554',
'LABEL=UH08541, CellIndex=1227, CGI=25094C350215D',
'LABEL=UH07611, CellIndex=1292, CGI=25094C3501DBB',
'LABEL=UH19331, CellIndex=659, CGI=25094C3504B83',
'LABEL=UH09761, CellIndex=682, CGI=25094C3502621',
'LABEL=UH39211, CellIndex=668, CGI=25094C350992B',
'LABEL=UH07344, CellIndex=442, CGI=25094C3501CB0',
'LABEL=UH19511, CellIndex=650, CGI=25094C3504C37',
'LABEL=UH07172, CellIndex=663, CGI=25094C3501C04',
'LABEL=UH07171, CellIndex=662, CGI=25094C3501C03',
'LABEL=UH07456, CellIndex=790, CGI=25094C3501D20',
'LABEL=UH06143, CellIndex=798, CGI=25094C35017FF',
'LABEL=UH07545, CellIndex=822, CGI=25094C3501D79',
'LABEL=UH07542, CellIndex=820, CGI=25094C3501D76',
'LABEL=UH08696, CellIndex=828, CGI=25094C35021F8',
'LABEL=UH08695, CellIndex=827, CGI=25094C35021F7',
'LABEL=UH08692, CellIndex=824, CGI=25094C35021F4',
'LABEL=UH07393, CellIndex=807, CGI=25094C3501CE1',
'LABEL=UH29833, CellIndex=615, CGI=25094C3507489',
'LABEL=UH29832, CellIndex=614, CGI=25094C3507488',
'LABEL=UH19163, CellIndex=612, CGI=25094C3504ADB',
'LABEL=UH07474, CellIndex=622, CGI=25094C3501D32',
'LABEL=UH19356, CellIndex=498, CGI=25094C3504B9C',
'LABEL=UH19515, CellIndex=654, CGI=25094C3504C3B',
'LABEL=UH19512, CellIndex=651, CGI=25094C3504C38',
'LABEL=UH19514, CellIndex=653, CGI=25094C3504C3A',
'LABEL=UH19255, CellIndex=753, CGI=25094C3504B37',
'LABEL=UH09582, CellIndex=557, CGI=25094C350256E',
'LABEL=UH08395, CellIndex=779, CGI=25094C35020CB',
'LABEL=UH17023, CellIndex=646, CGI=25094C350427F',
'LABEL=UH09753, CellIndex=643, CGI=25094C3502619',
'LABEL=UH07636, CellIndex=449, CGI=25094C3501DD4',
'LABEL=UH19202, CellIndex=619, CGI=25094C3504B02',
'LABEL=UH09863, CellIndex=618, CGI=25094C3502687',
'LABEL=UH09752, CellIndex=642, CGI=25094C3502618',
'LABEL=UH17022, CellIndex=645, CGI=25094C350427E',
'LABEL=UH09861, CellIndex=616, CGI=25094C3502685',
'LABEL=UH19513, CellIndex=652, CGI=25094C3504C39',
'LABEL=UH08422, CellIndex=811, CGI=25094C35020E6',
'LABEL=UH17021, CellIndex=644, CGI=25094C350427D',
'LABEL=UH07666, CellIndex=533, CGI=25094C3501DF2',
'LABEL=UH09712, CellIndex=640, CGI=25094C35025F0',
'LABEL=UH39203, CellIndex=772, CGI=25094C3509923',
'LABEL=UH09711, CellIndex=639, CGI=25094C35025EF',
'LABEL=UH07326, CellIndex=549, CGI=25094C3501C9E',
'LABEL=UH07325, CellIndex=548, CGI=25094C3501C9D',
'LABEL=UH07324, CellIndex=547, CGI=25094C3501C9C',
'LABEL=UH08694, CellIndex=826, CGI=25094C35021F6',
'LABEL=UH08693, CellIndex=825, CGI=25094C35021F5',
'LABEL=UH08691, CellIndex=823, CGI=25094C35021F3',
'LABEL=UH07056, CellIndex=512, CGI=25094C3501B90',
'LABEL=UH08423, CellIndex=812, CGI=25094C35020E7',
'LABEL=UH07406, CellIndex=805, CGI=25094C3501CEE',
'LABEL=UH39202, CellIndex=771, CGI=25094C3509922',
'LABEL=UH09736, CellIndex=485, CGI=25094C3502608',
'LABEL=UH07433, CellIndex=503, CGI=25094C3501D09',
'LABEL=UH19254, CellIndex=752, CGI=25094C3504B36',
'LABEL=UH07343, CellIndex=441, CGI=25094C3501CAF',
'LABEL=UH19355, CellIndex=497, CGI=25094C3504B9B',
'LABEL=UH07444, CellIndex=390, CGI=25094C3501D14',
'LABEL=UH19353, CellIndex=496, CGI=25094C3504B99',
'LABEL=UH08394, CellIndex=778, CGI=25094C35020CA',
'LABEL=UH09734, CellIndex=483, CGI=25094C3502606',
'LABEL=UH19253, CellIndex=751, CGI=25094C3504B35',
'LABEL=UH19352, CellIndex=495, CGI=25094C3504B98',
'LABEL=UH39201, CellIndex=770, CGI=25094C3509921',
'LABEL=UH07342, CellIndex=440, CGI=25094C3501CAE',
'LABEL=UH07144, CellIndex=422, CGI=25094C3501BE8',
'LABEL=UH07432, CellIndex=502, CGI=25094C3501D08',
'LABEL=UH19516, CellIndex=655, CGI=25094C3504C3C',
'LABEL=UH19252, CellIndex=750, CGI=25094C3504B34',
'LABEL=UH07431, CellIndex=501, CGI=25094C3501D07',
'LABEL=UH07341, CellIndex=439, CGI=25094C3501CAD',
'LABEL=UH07143, CellIndex=421, CGI=25094C3501BE7',
'LABEL=UH08256, CellIndex=466, CGI=25094C3502040',
'LABEL=UH07446, CellIndex=392, CGI=25094C3501D16',
'LABEL=UH07132, CellIndex=524, CGI=25094C3501BDC',
'LABEL=UH07445, CellIndex=391, CGI=25094C3501D15',
'LABEL=UH08385, CellIndex=469, CGI=25094C35020C1',
'LABEL=UH07061, CellIndex=513, CGI=25094C3501B95',
'LABEL=UH08384, CellIndex=468, CGI=25094C35020C0',
'LABEL=UH07131, CellIndex=523, CGI=25094C3501BDB',
'LABEL=UH07055, CellIndex=511, CGI=25094C3501B8F',
'LABEL=UH19162, CellIndex=611, CGI=25094C3504ADA',
'LABEL=UH07141, CellIndex=419, CGI=25094C3501BE5',
'LABEL=UH06013, CellIndex=412, CGI=25094C350177D',
'LABEL=UH09723, CellIndex=479, CGI=25094C35025FB',
'LABEL=UH09813, CellIndex=491, CGI=25094C3502655',
'LABEL=UH07116, CellIndex=364, CGI=25094C3501BCC',
'LABEL=UH09812, CellIndex=490, CGI=25094C3502654',
'LABEL=UH09732, CellIndex=481, CGI=25094C3502604',
'LABEL=UH06224, CellIndex=404, CGI=25094C3501850',
'LABEL=UH09722, CellIndex=478, CGI=25094C35025FA',
'LABEL=UH09811, CellIndex=489, CGI=25094C3502653',
'LABEL=UH09731, CellIndex=480, CGI=25094C3502603',
'LABEL=UH19351, CellIndex=494, CGI=25094C3504B97',
'LABEL=UH18056, CellIndex=748, CGI=25094C3504688',
'LABEL=UH06223, CellIndex=403, CGI=25094C350184F',
'LABEL=UH07043, CellIndex=486, CGI=25094C3501B83',
'LABEL=UH09721, CellIndex=477, CGI=25094C35025F9',
'LABEL=UH07022, CellIndex=377, CGI=25094C3501B6E',
'LABEL=UH06222, CellIndex=402, CGI=25094C350184E',
'LABEL=UH07516, CellIndex=401, CGI=25094C3501D5C',
'LABEL=UH08386, CellIndex=470, CGI=25094C35020C2',
'LABEL=UH07155, CellIndex=383, CGI=25094C3501BF3',
'LABEL=UH19392, CellIndex=603, CGI=25094C3504BC0',
'LABEL=UH19391, CellIndex=602, CGI=25094C3504BBF',
'LABEL=UH07112, CellIndex=360, CGI=25094C3501BC8',
'LABEL=UH07021, CellIndex=376, CGI=25094C3501B6D',
'LABEL=UH06113, CellIndex=372, CGI=25094C35017E1',
'LABEL=UH07045, CellIndex=487, CGI=25094C3501B85',
'LABEL=UH07111, CellIndex=359, CGI=25094C3501BC7',
'LABEL=UH07154, CellIndex=382, CGI=25094C3501BF2',
'LABEL=UH19081, CellIndex=599, CGI=25094C3504A89',
'LABEL=UH06111, CellIndex=371, CGI=25094C35017DF',
'LABEL=UH08381, CellIndex=467, CGI=25094C35020BD',
'LABEL=UH19093, CellIndex=493, CGI=25094C3504A95',
'LABEL=UH07065, CellIndex=515, CGI=25094C3501B99',
'LABEL=UH29831, CellIndex=613, CGI=25094C3507487',
'LABEL=UH19092, CellIndex=492, CGI=25094C3504A94',
'LABEL=UH19161, CellIndex=610, CGI=25094C3504AD9',
'LABEL=UH19026, CellIndex=432, CGI=25094C3504A50',
'LABEL=UH18053, CellIndex=745, CGI=25094C3504685',
'LABEL=UH08253, CellIndex=463, CGI=25094C350203D',
'LABEL=UH07561, CellIndex=435, CGI=25094C3501D89',
'LABEL=UH09892, CellIndex=348, CGI=25094C35026A4',
'LABEL=UH07511, CellIndex=398, CGI=25094C3501D57',
'LABEL=UH07352, CellIndex=425, CGI=25094C3501CB8',
'LABEL=UH07566, CellIndex=438, CGI=25094C3501D8E',
'LABEL=UH19203, CellIndex=620, CGI=25094C3504B03',
'LABEL=UH07564, CellIndex=437, CGI=25094C3501D8C',
'LABEL=UH09891, CellIndex=347, CGI=25094C35026A3',
'LABEL=UH06226, CellIndex=406, CGI=25094C3501852',
'LABEL=UH08446, CellIndex=340, CGI=25094C35020FE',
'LABEL=UH18051, CellIndex=743, CGI=25094C3504683',
'LABEL=UH07475, CellIndex=623, CGI=25094C3501D33',
'LABEL=UH08252, CellIndex=462, CGI=25094C350203C',
'LABEL=UH09862, CellIndex=617, CGI=25094C3502686',
'LABEL=UH19762, CellIndex=608, CGI=25094C3504D32',
'LABEL=UH07563, CellIndex=436, CGI=25094C3501D8B',
'LABEL=UH07316, CellIndex=395, CGI=25094C3501C94',
'LABEL=UH07472, CellIndex=621, CGI=25094C3501D30',
'LABEL=UH06182, CellIndex=414, CGI=25094C3501826',
'LABEL=UH08251, CellIndex=461, CGI=25094C350203B',
'LABEL=UH19761, CellIndex=607, CGI=25094C3504D31',
'LABEL=UH19083, CellIndex=601, CGI=25094C3504A8B',
'LABEL=UH07706, CellIndex=460, CGI=25094C3501E1A',
'LABEL=UH07673, CellIndex=451, CGI=25094C3501DF9',
'LABEL=UH08453, CellIndex=343, CGI=25094C3502105',
'LABEL=UH06181, CellIndex=413, CGI=25094C3501825',
'LABEL=UH19082, CellIndex=600, CGI=25094C3504A8A',
'LABEL=UH07672, CellIndex=450, CGI=25094C3501DF8',
'LABEL=UH19023, CellIndex=431, CGI=25094C3504A4F',
'LABEL=UH08451, CellIndex=341, CGI=25094C3502103',
'LABEL=UH19021, CellIndex=429, CGI=25094C3504A4D',
'LABEL=UH07156, CellIndex=384, CGI=25094C3501BF4',
'LABEL=UH07631, CellIndex=445, CGI=25094C3501DCF',
'LABEL=UH07025, CellIndex=379, CGI=25094C3501B71',
'LABEL=UH19024, CellIndex=433, CGI=25094C3504A51',
'LABEL=UH18054, CellIndex=746, CGI=25094C3504686',
'LABEL=UH08421, CellIndex=810, CGI=25094C35020E5',
'LABEL=UH07405, CellIndex=804, CGI=25094C3501CED',
'LABEL=UH07365, CellIndex=795, CGI=25094C3501CC5',
'LABEL=UH07364, CellIndex=794, CGI=25094C3501CC4',
'LABEL=UH07363, CellIndex=793, CGI=25094C3501CC3',
'LABEL=UH19192, CellIndex=357, CGI=25094C3504AF8',
'LABEL=UH19025, CellIndex=434, CGI=25094C3504A52',
'LABEL=UH07586, CellIndex=241, CGI=25094C3501DA2',
'LABEL=UH08496, CellIndex=777, CGI=25094C3502130',
'LABEL=UH07362, CellIndex=792, CGI=25094C3501CC2',
'LABEL=UH08444, CellIndex=338, CGI=25094C35020FC',
'LABEL=UH07585, CellIndex=240, CGI=25094C3501DA1',
'LABEL=UH08443, CellIndex=337, CGI=25094C35020FB',
'LABEL=UH07452, CellIndex=787, CGI=25094C3501D1C',
'LABEL=UH08435, CellIndex=333, CGI=25094C35020F3',
'LABEL=UH07584, CellIndex=239, CGI=25094C3501DA0',
'LABEL=UH07583, CellIndex=238, CGI=25094C3501D9F',
'LABEL=UH08434, CellIndex=332, CGI=25094C35020F2',
'LABEL=UH07315, CellIndex=394, CGI=25094C3501C93',
'LABEL=UH19454, CellIndex=569, CGI=25094C3504BFE',
'LABEL=UH29843, CellIndex=769, CGI=25094C3507493',
'LABEL=UH19012, CellIndex=397, CGI=25094C3504A44',
'LABEL=UH08441, CellIndex=335, CGI=25094C35020F9',
'LABEL=UH07356, CellIndex=428, CGI=25094C3501CBC',
'LABEL=UH09943, CellIndex=576, CGI=25094C35026D7',
'LABEL=UH07373, CellIndex=315, CGI=25094C3501CCD',
'LABEL=UH09942, CellIndex=575, CGI=25094C35026D6',
'LABEL=UH07354, CellIndex=426, CGI=25094C3501CBA',
'LABEL=UH07371, CellIndex=313, CGI=25094C3501CCB',
'LABEL=UH08433, CellIndex=331, CGI=25094C35020F1',
'LABEL=UH07314, CellIndex=393, CGI=25094C3501C92',
'LABEL=UH08431, CellIndex=330, CGI=25094C35020EF',
'LABEL=UH18046, CellIndex=583, CGI=25094C350467E',
'LABEL=UH19022, CellIndex=430, CGI=25094C3504A4E',
'LABEL=UH06236, CellIndex=229, CGI=25094C350185C',
'LABEL=UH07351, CellIndex=424, CGI=25094C3501CB7',
'LABEL=UH07372, CellIndex=314, CGI=25094C3501CCC',
'LABEL=UH18045, CellIndex=582, CGI=25094C350467D',
'LABEL=UH19451, CellIndex=567, CGI=25094C3504BFB',
'LABEL=UH07522, CellIndex=319, CGI=25094C3501D62',
'LABEL=UH07523, CellIndex=320, CGI=25094C3501D63',
'LABEL=UH07524, CellIndex=321, CGI=25094C3501D64',
'LABEL=UH19193, CellIndex=358, CGI=25094C3504AF9',
'LABEL=UH08495, CellIndex=776, CGI=25094C350212F',
'LABEL=UH08494, CellIndex=775, CGI=25094C350212E',
'LABEL=UH18333, CellIndex=309, CGI=25094C350479D',
'LABEL=UH08334, CellIndex=298, CGI=25094C350208E',
'LABEL=UH07703, CellIndex=457, CGI=25094C3501E17',
'LABEL=UH07702, CellIndex=456, CGI=25094C3501E16',
'LABEL=UH18332, CellIndex=308, CGI=25094C350479C',
'LABEL=UH07701, CellIndex=455, CGI=25094C3501E15',
'LABEL=UH18331, CellIndex=307, CGI=25094C350479B',
'LABEL=UH07086, CellIndex=288, CGI=25094C3501BAE',
'LABEL=UH07085, CellIndex=287, CGI=25094C3501BAD',
'LABEL=UH07084, CellIndex=286, CGI=25094C3501BAC',
'LABEL=UH29842, CellIndex=768, CGI=25094C3507492',
'LABEL=UH06231, CellIndex=224, CGI=25094C3501857',
'LABEL=UH18034, CellIndex=354, CGI=25094C3504672',
'LABEL=UH07355, CellIndex=427, CGI=25094C3501CBB',
'LABEL=UH09656, CellIndex=739, CGI=25094C35025B8',
'LABEL=UH08445, CellIndex=339, CGI=25094C35020FD',
'LABEL=UH09581, CellIndex=556, CGI=25094C350256D',
'LABEL=UH19011, CellIndex=396, CGI=25094C3504A43',
'LABEL=UH07312, CellIndex=387, CGI=25094C3501C90',
'LABEL=UH07441, CellIndex=389, CGI=25094C3501D11',
'LABEL=UH19256, CellIndex=754, CGI=25094C3504B38',
'LABEL=UH16026, CellIndex=303, CGI=25094C3503E9A',
'LABEL=UH16025, CellIndex=302, CGI=25094C3503E99',
'LABEL=UH09655, CellIndex=738, CGI=25094C35025B7',
'LABEL=UH16024, CellIndex=301, CGI=25094C3503E98',
'LABEL=UH08336, CellIndex=300, CGI=25094C3502090',
'LABEL=UH08335, CellIndex=299, CGI=25094C350208F',
'LABEL=UH08436, CellIndex=334, CGI=25094C35020F4',
'LABEL=UH07404, CellIndex=803, CGI=25094C3501CEC',
'LABEL=UH07403, CellIndex=802, CGI=25094C3501CEB',
'LABEL=UH29841, CellIndex=767, CGI=25094C3507491',
'LABEL=UH18055, CellIndex=747, CGI=25094C3504687',
'LABEL=UH07396, CellIndex=809, CGI=25094C3501CE4',
'LABEL=UH08491, CellIndex=773, CGI=25094C350212B',
'LABEL=UH29503, CellIndex=223, CGI=25094C350733F',
'LABEL=UH08352, CellIndex=261, CGI=25094C35020A0',
'LABEL=UH29133, CellIndex=217, CGI=25094C35071CD',
'LABEL=UH29502, CellIndex=222, CGI=25094C350733E',
'LABEL=UH08353, CellIndex=262, CGI=25094C35020A1',
'LABEL=UH07653, CellIndex=188, CGI=25094C3501DE5',
'LABEL=UH19452, CellIndex=568, CGI=25094C3504BFC',
'LABEL=UH08442, CellIndex=336, CGI=25094C35020FA',
'LABEL=UH07525, CellIndex=322, CGI=25094C3501D65',
'LABEL=UH08452, CellIndex=342, CGI=25094C3502104',
'LABEL=UH19763, CellIndex=609, CGI=25094C3504D33',
'LABEL=UH18052, CellIndex=744, CGI=25094C3504684',
'LABEL=UH07514, CellIndex=400, CGI=25094C3501D5A',
'LABEL=UH09733, CellIndex=482, CGI=25094C3502605',
'LABEL=UH19393, CellIndex=604, CGI=25094C3504BC1',
'LABEL=UH09735, CellIndex=484, CGI=25094C3502607',
'LABEL=UH09751, CellIndex=641, CGI=25094C3502617',
'LABEL=UH07665, CellIndex=534, CGI=25094C3501DF1',
'LABEL=UH08235, CellIndex=709, CGI=25094C350202B',
'LABEL=UH29132, CellIndex=216, CGI=25094C35071CC',
'LABEL=UH09583, CellIndex=558, CGI=25094C350256F',
'LABEL=UH18036, CellIndex=356, CGI=25094C3504674',
'LABEL=UH29501, CellIndex=221, CGI=25094C350733D',
'LABEL=UH07366, CellIndex=796, CGI=25094C3501CC6',
'LABEL=UH07083, CellIndex=205, CGI=25094C3501BAB',
'LABEL=UH07082, CellIndex=204, CGI=25094C3501BAA',
'LABEL=UH07024, CellIndex=378, CGI=25094C3501B70',
'LABEL=UH07081, CellIndex=203, CGI=25094C3501BA9',
'LABEL=UH08351, CellIndex=260, CGI=25094C350209F',
'LABEL=UH09941, CellIndex=574, CGI=25094C35026D5',
'LABEL=UH07436, CellIndex=505, CGI=25094C3501D0C',
'LABEL=UH06114, CellIndex=373, CGI=25094C35017E2',
'LABEL=UH08456, CellIndex=346, CGI=25094C3502108',
'LABEL=UH18035, CellIndex=355, CGI=25094C3504673',
'LABEL=UH07435, CellIndex=504, CGI=25094C3501D0B',
'LABEL=UH29131, CellIndex=215, CGI=25094C35071CB',
'LABEL=UH08404, CellIndex=553, CGI=25094C35020D4',
'LABEL=UH07152, CellIndex=381, CGI=25094C3501BF0',
'LABEL=UH18033, CellIndex=353, CGI=25094C3504671',
'LABEL=UH07581, CellIndex=236, CGI=25094C3501D9D',
'LABEL=UH09502, CellIndex=210, CGI=25094C350251E',
'LABEL=UH19363, CellIndex=202, CGI=25094C3504BA3',
'LABEL=UH19362, CellIndex=201, CGI=25094C3504BA2',
'LABEL=UH09501, CellIndex=209, CGI=25094C350251D',
'LABEL=UH19361, CellIndex=200, CGI=25094C3504BA1',
'LABEL=UH07313, CellIndex=388, CGI=25094C3501C91',
'LABEL=UH18013, CellIndex=190, CGI=25094C350465D',
'LABEL=UH18011, CellIndex=189, CGI=25094C350465B',
'LABEL=UH07115, CellIndex=363, CGI=25094C3501BCB',
'LABEL=UH07652, CellIndex=187, CGI=25094C3501DE4',
'LABEL=UH08406, CellIndex=555, CGI=25094C35020D6',
'LABEL=UH18032, CellIndex=352, CGI=25094C3504670',
'LABEL=UH06103, CellIndex=150, CGI=25094C35017D7',
'LABEL=UH06102, CellIndex=149, CGI=25094C35017D6',
'LABEL=UH06014, CellIndex=407, CGI=25094C350177E',
'LABEL=UH07651, CellIndex=186, CGI=25094C3501DE3',
'LABEL=UH07486, CellIndex=370, CGI=25094C3501D3E',
'LABEL=UH18543, CellIndex=142, CGI=25094C350486F',
'LABEL=UH09512, CellIndex=139, CGI=25094C3502528',
'LABEL=UH18542, CellIndex=141, CGI=25094C350486E',
'LABEL=UH09511, CellIndex=138, CGI=25094C3502527',
'LABEL=UH18541, CellIndex=140, CGI=25094C350486D',
'LABEL=UH18043, CellIndex=580, CGI=25094C350467B',
'LABEL=UH19456, CellIndex=571, CGI=25094C3504C00',
'LABEL=UH07114, CellIndex=362, CGI=25094C3501BCA',
'LABEL=UH08405, CellIndex=554, CGI=25094C35020D5',
'LABEL=UH06116, CellIndex=375, CGI=25094C35017E4',
'LABEL=UH18031, CellIndex=351, CGI=25094C350466F',
'LABEL=UH07485, CellIndex=369, CGI=25094C3501D3D',
'LABEL=UH07113, CellIndex=361, CGI=25094C3501BC9',
'LABEL=UH09912, CellIndex=350, CGI=25094C35026B8',
'LABEL=UH07513, CellIndex=399, CGI=25094C3501D59',
'LABEL=UH06225, CellIndex=405, CGI=25094C3501851',
'LABEL=UH18044, CellIndex=581, CGI=25094C350467C',
'LABEL=UH08401, CellIndex=550, CGI=25094C35020D1',
'LABEL=UH07026, CellIndex=380, CGI=25094C3501B72',
'LABEL=UH06183, CellIndex=415, CGI=25094C3501827',
'LABEL=UH09911, CellIndex=349, CGI=25094C35026B7',
'LABEL=UH07484, CellIndex=368, CGI=25094C3501D3C',
'LABEL=UH07422, CellIndex=874, CGI=25094C3501CFE',
'LABEL=UH08806, CellIndex=707, CGI=25094C3502266',
'LABEL=UH08804, CellIndex=119, CGI=25094C3502264',
'LABEL=UH08796, CellIndex=1309, CGI=25094C350225C',
'LABEL=UH08794, CellIndex=1308, CGI=25094C350225A',
'LABEL=UH08795, CellIndex=865, CGI=25094C350225B',
'LABEL=UH05081, CellIndex=910, CGI=25094C35013D9',
'LABEL=UH08805, CellIndex=705, CGI=25094C3502265',
'LABEL=UH08403, CellIndex=552, CGI=25094C35020D3',
'LABEL=UH06171, CellIndex=183, CGI=25094C350181B',
'LABEL=UH09503, CellIndex=211, CGI=25094C350251F',
'LABEL=UH07311, CellIndex=386, CGI=25094C3501C8F',
] # новый кластер для отчёта

# фильтрация по UH:
sts_df = sts_df[sts_df['GCELL'].isin(cluster_UH)]
# фильтрация по Simferopol:
#sts_df = sts_df[sts_df['GCELL'].isin(cluster_Sim)]
#sts_df = sts_df[sts_df['GCELL'].isin(cluster_Skadovsk)]

# обработка weekly:
weekly_df = sts_df.groupby(['week'])[list_1]. sum().reset_index()
weekly_df['TRX Availability 2G %'] = weekly_df['S3656:Number of available TRXs in a cell (None)'] / weekly_df['S3655:Number of configured TRXs in a cell (None)'] * 100
weekly_df['TRXs Number'] = weekly_df['S3656:Number of available TRXs in a cell (None)'] / 24
weekly_df['TCH traffic 2G, Erl']= weekly_df['K3014:Traffic Volume on TCH (Erl)']
weekly_df['SDCCH taffic, Erl']= weekly_df['K3004:Traffic Volume on SDCCH (Erl)']
weekly_df['SDCCH Congesstion, %']= weekly_df['K3001:Failed SDCCH Seizures due to Busy SDCCH (None)'] / weekly_df['K3003:Successful SDCCH Seizures (None)'] * 100
weekly_df['TCH Congestion excluding handover, %']= (weekly_df['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   weekly_df['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'])/\
                                                  (weekly_df['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + weekly_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
weekly_df['TCH Congestion including handover, %']=(weekly_df['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   weekly_df['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'] + \
                                                  weekly_df['K3011B:Failed TCH Seizures in TCH Handovers due to Busy TCH (Traffic Channel) (None)'])/\
                                                  (weekly_df['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + \
                                                   weekly_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)']+ \
                                                   weekly_df['K3010B:TCH Seizure Requests in TCH Handovers (Traffic Channel) (None)'])*100
weekly_df['SDCCH Drop Rate, %']= weekly_df['CM30:Call Drops on SDCCH (None)'] / weekly_df['K3003:Successful SDCCH Seizures (None)'] * 100
weekly_df['TCH Assignment Failure Rate, %']= (1 - weekly_df['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] / weekly_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
weekly_df['TCH traffic HalfRate, Erl']= weekly_df['K3034:TCHH Traffic Volume (Erl)']
weekly_df['TCH Drop Rate, %']= weekly_df['CM33:Call Drops on Traffic Channel (None)']/ \
                              (weekly_df['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] + \
                               weekly_df['K3013B:Successful TCH Seizures in TCH handovers (Traffic Channel) (None)'] + \
                               weekly_df['K3023:Successful TCH Seizures (Signaling Channel) (None)'])*100
weekly_df['Handover Success Rate, %']= (weekly_df['CH333:Successful Outgoing External Inter-Cell Handovers (None)']+\
                                       weekly_df['CH313:Number of Successful Outgoing Internal Inter-Cell Handovers (None)'])/\
                                      (weekly_df['CH310:Number of Outgoing Internal Inter-Cell Handover Requests (None)']+\
                                       weekly_df['CH330:Outgoing External Inter-Cell Handover Requests (None)']) * 100
weekly_df['Immediate assignment SR, %']= weekly_df['K3003:Successful SDCCH Seizures (None)']  / weekly_df['K3000:SDCCH Seizure Requests (None)'] *100
weekly_df['CCSR2G, %']= weekly_df['Immediate assignment SR, %'] * (100 - weekly_df['SDCCH Drop Rate, %']) * (100 - weekly_df['TCH Assignment Failure Rate, %'])\
                                             * (100 - weekly_df['TCH Drop Rate, %']) / 1000000
weekly_df = weekly_df.drop(list_1, axis=1)
weekly_df_trans = weekly_df.transpose()


# ===обработка daily===
daily_df = sts_df.groupby(['date'])[list_1]. sum().reset_index()
daily_df['TRX Availability 2G %'] = daily_df['S3656:Number of available TRXs in a cell (None)'] / daily_df['S3655:Number of configured TRXs in a cell (None)'] * 100
daily_df['TRXs Number'] = daily_df['S3656:Number of available TRXs in a cell (None)'] / 24
daily_df['TCH traffic 2G, Erl']= daily_df['K3014:Traffic Volume on TCH (Erl)']
daily_df['SDCCH taffic, Erl']= daily_df['K3004:Traffic Volume on SDCCH (Erl)']
daily_df['SDCCH Congesstion, %']= daily_df['K3001:Failed SDCCH Seizures due to Busy SDCCH (None)'] / daily_df['K3003:Successful SDCCH Seizures (None)'] * 100
daily_df['TCH Congestion excluding handover, %']= (daily_df['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   daily_df['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'])/\
                                                  (daily_df['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + daily_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
daily_df['TCH Congestion including handover, %']=(daily_df['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   daily_df['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'] + \
                                                  daily_df['K3011B:Failed TCH Seizures in TCH Handovers due to Busy TCH (Traffic Channel) (None)'])/\
                                                  (daily_df['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + \
                                                   daily_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)']+ \
                                                   daily_df['K3010B:TCH Seizure Requests in TCH Handovers (Traffic Channel) (None)'])*100
daily_df['SDCCH Drop Rate, %']= daily_df['CM30:Call Drops on SDCCH (None)'] / daily_df['K3003:Successful SDCCH Seizures (None)'] * 100
daily_df['TCH Assignment Failure Rate, %']= (1 - daily_df['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] / daily_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
daily_df['TCH traffic HalfRate, Erl']= daily_df['K3034:TCHH Traffic Volume (Erl)']
daily_df['TCH Drop Rate, %']= daily_df['CM33:Call Drops on Traffic Channel (None)']/ \
                              (daily_df['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] + \
                               daily_df['K3013B:Successful TCH Seizures in TCH handovers (Traffic Channel) (None)'] + \
                               daily_df['K3023:Successful TCH Seizures (Signaling Channel) (None)'])*100
daily_df['Handover Success Rate, %']= (daily_df['CH333:Successful Outgoing External Inter-Cell Handovers (None)']+\
                                       daily_df['CH313:Number of Successful Outgoing Internal Inter-Cell Handovers (None)'])/\
                                      (daily_df['CH310:Number of Outgoing Internal Inter-Cell Handover Requests (None)']+\
                                       daily_df['CH330:Outgoing External Inter-Cell Handover Requests (None)']) * 100
daily_df['Immediate assignment SR, %']= daily_df['K3003:Successful SDCCH Seizures (None)']  / daily_df['K3000:SDCCH Seizure Requests (None)'] *100
daily_df['CCSR2G, %']= daily_df['Immediate assignment SR, %'] * (100 - daily_df['SDCCH Drop Rate, %']) * (100 - daily_df['TCH Assignment Failure Rate, %'])\
                                             * (100 - daily_df['TCH Drop Rate, %']) / 1000000
daily_df = daily_df.drop(list_1, axis=1)

# фильтрация по кластеру 900:
sts_df900 = sts_df[sts_df['GCELL'].isin(list_cluster_900)]
daily_df900 = sts_df900.groupby(['date'])[list_1]. sum().reset_index()

daily_df900['TRX Availability 2G %_900'] = daily_df900['S3656:Number of available TRXs in a cell (None)'] / daily_df900['S3655:Number of configured TRXs in a cell (None)'] * 100
daily_df900['TRXs Number_900'] = daily_df900['S3656:Number of available TRXs in a cell (None)'] / 24
daily_df900['TCH traffic 2G, Erl_900']= daily_df900['K3014:Traffic Volume on TCH (Erl)']
daily_df900['SDCCH taffic, Erl_900']= daily_df900['K3004:Traffic Volume on SDCCH (Erl)']
daily_df900['SDCCH Congesstion, %_900']= daily_df900['K3001:Failed SDCCH Seizures due to Busy SDCCH (None)'] / daily_df900['K3003:Successful SDCCH Seizures (None)'] * 100
daily_df900['TCH Congestion excluding handover, %_900']= (daily_df900['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   daily_df900['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'])/\
                                                  (daily_df900['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + daily_df900['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
daily_df900['TCH Congestion including handover, %_900']=(daily_df900['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   daily_df900['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'] + \
                                                  daily_df900['K3011B:Failed TCH Seizures in TCH Handovers due to Busy TCH (Traffic Channel) (None)'])/\
                                                  (daily_df900['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + \
                                                   daily_df900['K3010A:TCH Seizure Requests (Traffic Channel) (None)']+ \
                                                   daily_df900['K3010B:TCH Seizure Requests in TCH Handovers (Traffic Channel) (None)'])*100
daily_df900['SDCCH Drop Rate, %_900']= daily_df900['CM30:Call Drops on SDCCH (None)'] / daily_df900['K3003:Successful SDCCH Seizures (None)'] * 100
daily_df900['TCH Assignment Failure Rate, %_900']= (1 - daily_df900['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] / daily_df900['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
daily_df900['TCH traffic HalfRate, Erl_900']= daily_df900['K3034:TCHH Traffic Volume (Erl)']
daily_df900['TCH Drop Rate, %_900']= daily_df900['CM33:Call Drops on Traffic Channel (None)']/ \
                              (daily_df900['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] + \
                               daily_df900['K3013B:Successful TCH Seizures in TCH handovers (Traffic Channel) (None)'] + \
                               daily_df900['K3023:Successful TCH Seizures (Signaling Channel) (None)'])*100
daily_df900['Handover Success Rate, %_900']= (daily_df900['CH333:Successful Outgoing External Inter-Cell Handovers (None)']+\
                                       daily_df900['CH313:Number of Successful Outgoing Internal Inter-Cell Handovers (None)'])/\
                                      (daily_df900['CH310:Number of Outgoing Internal Inter-Cell Handover Requests (None)']+\
                                       daily_df900['CH330:Outgoing External Inter-Cell Handover Requests (None)']) * 100
daily_df900['Immediate assignment SR, %_900']= daily_df900['K3003:Successful SDCCH Seizures (None)']  / daily_df900['K3000:SDCCH Seizure Requests (None)'] *100
daily_df900['CCSR2G, %_900']= daily_df900['Immediate assignment SR, %_900'] * (100 - daily_df900['SDCCH Drop Rate, %_900']) * (100 - daily_df900['TCH Assignment Failure Rate, %_900'])\
                                             * (100 - daily_df900['TCH Drop Rate, %_900']) / 1000000
daily_df900 = daily_df900.drop(list_1, axis=1)
#daily_df900 = daily_df900.transpose()

# фильтрация по кластеру 1800:
sts_df1800 = sts_df[sts_df['GCELL'].isin(list_cluster_1800)]

daily_df1800 = sts_df1800.groupby(['date'])[list_1]. sum().reset_index()
daily_df1800['TRX Availability 2G %_1800'] = daily_df1800['S3656:Number of available TRXs in a cell (None)'] / daily_df1800['S3655:Number of configured TRXs in a cell (None)'] * 100
daily_df1800['TRXs Number_1800'] = daily_df1800['S3656:Number of available TRXs in a cell (None)'] / 24
daily_df1800['TCH traffic 2G, Erl_1800']= daily_df1800['K3014:Traffic Volume on TCH (Erl)']
daily_df1800['SDCCH taffic, Erl_1800']= daily_df1800['K3004:Traffic Volume on SDCCH (Erl)']
daily_df1800['SDCCH Congesstion, %_1800']= daily_df1800['K3001:Failed SDCCH Seizures due to Busy SDCCH (None)'] / daily_df1800['K3003:Successful SDCCH Seizures (None)'] * 100
daily_df1800['TCH Congestion excluding handover, %_1800']= (daily_df1800['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   daily_df1800['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'])/\
                                                  (daily_df1800['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + daily_df1800['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
daily_df1800['TCH Congestion including handover, %_1800']=(daily_df1800['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   daily_df1800['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'] + \
                                                  daily_df1800['K3011B:Failed TCH Seizures in TCH Handovers due to Busy TCH (Traffic Channel) (None)'])/\
                                                  (daily_df1800['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + \
                                                   daily_df1800['K3010A:TCH Seizure Requests (Traffic Channel) (None)']+ \
                                                   daily_df1800['K3010B:TCH Seizure Requests in TCH Handovers (Traffic Channel) (None)'])*100
daily_df1800['SDCCH Drop Rate, %_1800']= daily_df1800['CM30:Call Drops on SDCCH (None)'] / daily_df1800['K3003:Successful SDCCH Seizures (None)'] * 100
daily_df1800['TCH Assignment Failure Rate, %_1800']= (1 - daily_df1800['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] / daily_df1800['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
daily_df1800['TCH traffic HalfRate, Erl_1800']= daily_df1800['K3034:TCHH Traffic Volume (Erl)']
daily_df1800['TCH Drop Rate, %_1800']= daily_df1800['CM33:Call Drops on Traffic Channel (None)']/ \
                              (daily_df1800['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] + \
                               daily_df1800['K3013B:Successful TCH Seizures in TCH handovers (Traffic Channel) (None)'] + \
                               daily_df1800['K3023:Successful TCH Seizures (Signaling Channel) (None)'])*100
daily_df1800['Handover Success Rate, %_1800']= (daily_df1800['CH333:Successful Outgoing External Inter-Cell Handovers (None)']+\
                                       daily_df1800['CH313:Number of Successful Outgoing Internal Inter-Cell Handovers (None)'])/\
                                      (daily_df1800['CH310:Number of Outgoing Internal Inter-Cell Handover Requests (None)']+\
                                       daily_df1800['CH330:Outgoing External Inter-Cell Handover Requests (None)']) * 100
daily_df1800['Immediate assignment SR, %_1800']= daily_df1800['K3003:Successful SDCCH Seizures (None)']  / daily_df1800['K3000:SDCCH Seizure Requests (None)'] *100
daily_df1800['CCSR2G, %_1800']= daily_df1800['Immediate assignment SR, %_1800'] * (100 - daily_df1800['SDCCH Drop Rate, %_1800']) * (100 - daily_df1800['TCH Assignment Failure Rate, %_1800'])\
                                             * (100 - daily_df1800['TCH Drop Rate, %_1800']) / 1000000
daily_df1800 = daily_df1800.drop(list_1, axis=1)

daily_df1 = pd.merge(daily_df, daily_df900, how="left")
daily_dfall = pd.merge(daily_df1, daily_df1800, how="left")
daily_dfall_trans = daily_dfall.transpose()

# ===обработка hourly===
hourly_df = sts_df.groupby(['date', 'hour'])[list_1]. sum().reset_index()
hourly_df['TRX Availability 2G %'] = hourly_df['S3656:Number of available TRXs in a cell (None)'] / hourly_df['S3655:Number of configured TRXs in a cell (None)'] * 100
hourly_df['TRXs Number'] = hourly_df['S3656:Number of available TRXs in a cell (None)']
hourly_df['TCH traffic 2G, Erl']= hourly_df['K3014:Traffic Volume on TCH (Erl)']
hourly_df['SDCCH taffic, Erl']= hourly_df['K3004:Traffic Volume on SDCCH (Erl)']
hourly_df['SDCCH Congesstion, %']= hourly_df['K3001:Failed SDCCH Seizures due to Busy SDCCH (None)'] / hourly_df['K3003:Successful SDCCH Seizures (None)'] * 100
hourly_df['TCH Congestion excluding handover, %']= (hourly_df['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   hourly_df['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'])/\
                                                  (hourly_df['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + hourly_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
hourly_df['TCH Congestion including handover, %']=(hourly_df['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   hourly_df['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'] + \
                                                  hourly_df['K3011B:Failed TCH Seizures in TCH Handovers due to Busy TCH (Traffic Channel) (None)'])/\
                                                  (hourly_df['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + \
                                                   hourly_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)']+ \
                                                   hourly_df['K3010B:TCH Seizure Requests in TCH Handovers (Traffic Channel) (None)'])*100
hourly_df['SDCCH Drop Rate, %']= hourly_df['CM30:Call Drops on SDCCH (None)'] / hourly_df['K3003:Successful SDCCH Seizures (None)'] * 100
hourly_df['TCH Assignment Failure Rate, %']= (1 - hourly_df['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] / hourly_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
hourly_df['TCH traffic HalfRate, Erl']= hourly_df['K3034:TCHH Traffic Volume (Erl)']
hourly_df['TCH Drop Rate, %']= hourly_df['CM33:Call Drops on Traffic Channel (None)']/ \
                              (hourly_df['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] + \
                               hourly_df['K3013B:Successful TCH Seizures in TCH handovers (Traffic Channel) (None)'] + \
                               hourly_df['K3023:Successful TCH Seizures (Signaling Channel) (None)'])*100
hourly_df['Handover Success Rate, %']= (hourly_df['CH333:Successful Outgoing External Inter-Cell Handovers (None)']+\
                                       hourly_df['CH313:Number of Successful Outgoing Internal Inter-Cell Handovers (None)'])/\
                                      (hourly_df['CH310:Number of Outgoing Internal Inter-Cell Handover Requests (None)']+\
                                       hourly_df['CH330:Outgoing External Inter-Cell Handover Requests (None)']) * 100
hourly_df['Immediate assignment SR, %']= hourly_df['K3003:Successful SDCCH Seizures (None)']  / hourly_df['K3000:SDCCH Seizure Requests (None)'] *100
hourly_df['Call completion success rate, %']= hourly_df['Immediate assignment SR, %'] * (100 - hourly_df['SDCCH Drop Rate, %']) * (100 - hourly_df['TCH Assignment Failure Rate, %'])\
                                             * (100 - hourly_df['TCH Drop Rate, %']) / 1000000
hourly_df = hourly_df.drop(list_1, axis=1)

# фильтрация по кластеру 900:
hourly_df900 = sts_df[sts_df['GCELL'].isin(list_cluster_900)]

hourly_df900 = hourly_df900.groupby(['date', 'hour'])[list_1]. sum().reset_index()

hourly_df900['TRX Availability 2G %_900'] = hourly_df900['S3656:Number of available TRXs in a cell (None)'] / hourly_df900['S3655:Number of configured TRXs in a cell (None)'] * 100
hourly_df900['TRXs Number_900'] = hourly_df900['S3656:Number of available TRXs in a cell (None)']
hourly_df900['TCH traffic 2G, Erl_900']= hourly_df900['K3014:Traffic Volume on TCH (Erl)']
hourly_df900['SDCCH taffic, Erl_900']= hourly_df900['K3004:Traffic Volume on SDCCH (Erl)']
hourly_df900['SDCCH Congesstion, %_900']= hourly_df900['K3001:Failed SDCCH Seizures due to Busy SDCCH (None)'] / hourly_df900['K3003:Successful SDCCH Seizures (None)'] * 100
hourly_df900['TCH Congestion excluding handover, %_900']= (hourly_df900['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   hourly_df900['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'])/\
                                                  (hourly_df900['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + hourly_df900['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
hourly_df900['TCH Congestion including handover, %_900']=(hourly_df900['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   hourly_df900['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'] + \
                                                  hourly_df900['K3011B:Failed TCH Seizures in TCH Handovers due to Busy TCH (Traffic Channel) (None)'])/\
                                                  (hourly_df900['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + \
                                                   hourly_df900['K3010A:TCH Seizure Requests (Traffic Channel) (None)']+ \
                                                   hourly_df900['K3010B:TCH Seizure Requests in TCH Handovers (Traffic Channel) (None)'])*100
hourly_df900['SDCCH Drop Rate, %_900']= hourly_df900['CM30:Call Drops on SDCCH (None)'] / hourly_df900['K3003:Successful SDCCH Seizures (None)'] * 100
hourly_df900['TCH Assignment Failure Rate, %_900']= (1 - hourly_df900['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] / hourly_df900['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
hourly_df900['TCH traffic HalfRate, Erl_900']= hourly_df900['K3034:TCHH Traffic Volume (Erl)']
hourly_df900['TCH Drop Rate, %_900']= hourly_df900['CM33:Call Drops on Traffic Channel (None)']/ \
                              (hourly_df900['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] + \
                               hourly_df900['K3013B:Successful TCH Seizures in TCH handovers (Traffic Channel) (None)'] + \
                               hourly_df900['K3023:Successful TCH Seizures (Signaling Channel) (None)'])*100
hourly_df900['Handover Success Rate, %_900']= (hourly_df900['CH333:Successful Outgoing External Inter-Cell Handovers (None)']+\
                                       hourly_df900['CH313:Number of Successful Outgoing Internal Inter-Cell Handovers (None)'])/\
                                      (hourly_df900['CH310:Number of Outgoing Internal Inter-Cell Handover Requests (None)']+\
                                       hourly_df900['CH330:Outgoing External Inter-Cell Handover Requests (None)']) * 100
hourly_df900['Immediate assignment SR, %_900']= hourly_df900['K3003:Successful SDCCH Seizures (None)']  / hourly_df900['K3000:SDCCH Seizure Requests (None)'] *100
hourly_df900['Call completion success rate, %_900']= hourly_df900['Immediate assignment SR, %_900'] * (100 - hourly_df900['SDCCH Drop Rate, %_900']) * (100 - hourly_df900['TCH Assignment Failure Rate, %_900'])\
                                             * (100 - hourly_df900['TCH Drop Rate, %_900']) / 1000000
hourly_df900 = hourly_df900.drop(list_1, axis=1)


# фильтрация по кластеру 1800:
hourly_df1800 = sts_df[sts_df['GCELL'].isin(list_cluster_1800)]
hourly_df1800 = hourly_df1800.groupby(['date', 'hour'])[list_1]. sum().reset_index()
hourly_df1800['TRX Availability 2G %_1800'] = hourly_df1800['S3656:Number of available TRXs in a cell (None)'] / hourly_df1800['S3655:Number of configured TRXs in a cell (None)'] * 100
hourly_df1800['TRXs Number_1800'] = hourly_df1800['S3656:Number of available TRXs in a cell (None)']
hourly_df1800['TCH traffic 2G, Erl_1800']= hourly_df1800['K3014:Traffic Volume on TCH (Erl)']
hourly_df1800['SDCCH taffic, Erl_1800']= hourly_df1800['K3004:Traffic Volume on SDCCH (Erl)']
hourly_df1800['SDCCH Congesstion, %_1800']= hourly_df1800['K3001:Failed SDCCH Seizures due to Busy SDCCH (None)'] / hourly_df1800['K3003:Successful SDCCH Seizures (None)'] * 100
hourly_df1800['TCH Congestion excluding handover, %_1800']= (hourly_df1800['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   hourly_df1800['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'])/\
                                                  (hourly_df1800['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + hourly_df1800['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
hourly_df1800['TCH Congestion including handover, %_1800']=(hourly_df1800['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   hourly_df1800['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'] + \
                                                  hourly_df1800['K3011B:Failed TCH Seizures in TCH Handovers due to Busy TCH (Traffic Channel) (None)'])/\
                                                  (hourly_df1800['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + \
                                                   hourly_df1800['K3010A:TCH Seizure Requests (Traffic Channel) (None)']+ \
                                                   hourly_df1800['K3010B:TCH Seizure Requests in TCH Handovers (Traffic Channel) (None)'])*100
hourly_df1800['SDCCH Drop Rate, %_1800']= hourly_df1800['CM30:Call Drops on SDCCH (None)'] / hourly_df1800['K3003:Successful SDCCH Seizures (None)'] * 100
hourly_df1800['TCH Assignment Failure Rate, %_1800']= (1 - hourly_df1800['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] / hourly_df1800['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
hourly_df1800['TCH traffic HalfRate, Erl_1800']= hourly_df1800['K3034:TCHH Traffic Volume (Erl)']
hourly_df1800['TCH Drop Rate, %_1800']= hourly_df1800['CM33:Call Drops on Traffic Channel (None)']/ \
                              (hourly_df1800['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] + \
                               hourly_df1800['K3013B:Successful TCH Seizures in TCH handovers (Traffic Channel) (None)'] + \
                               hourly_df1800['K3023:Successful TCH Seizures (Signaling Channel) (None)'])*100
hourly_df1800['Handover Success Rate, %_1800']= (hourly_df1800['CH333:Successful Outgoing External Inter-Cell Handovers (None)']+\
                                       hourly_df1800['CH313:Number of Successful Outgoing Internal Inter-Cell Handovers (None)'])/\
                                      (hourly_df1800['CH310:Number of Outgoing Internal Inter-Cell Handover Requests (None)']+\
                                       hourly_df1800['CH330:Outgoing External Inter-Cell Handover Requests (None)']) * 100
hourly_df1800['Immediate assignment SR, %_1800']= hourly_df1800['K3003:Successful SDCCH Seizures (None)']  / hourly_df1800['K3000:SDCCH Seizure Requests (None)'] *100
hourly_df1800['Call completion success rate, %_1800']= hourly_df1800['Immediate assignment SR, %_1800'] * (100 - hourly_df1800['SDCCH Drop Rate, %_1800']) * (100 - hourly_df1800['TCH Assignment Failure Rate, %_1800'])\
                                             * (100 - hourly_df1800['TCH Drop Rate, %_1800']) / 1000000
hourly_df1800 = hourly_df1800.drop(list_1, axis=1)

hourly_dfall1 = pd.merge(hourly_df, hourly_df900, how="left")
hourly_dfall = pd.merge(hourly_dfall1, hourly_df1800, how="left")
hourly_dfall_trans = hourly_dfall.transpose()

# ===обработка busy hour===
hourlyBH_df = sts_df.groupby(['date', 'hour'])[list_1]. sum().reset_index()
max_index = hourlyBH_df.groupby('date')['K3014:Traffic Volume on TCH (Erl)'].idxmax()
hourlyBH_df = hourlyBH_df.loc[max_index]
hourlyBH_df['TRX Availability 2G %'] = hourlyBH_df['S3656:Number of available TRXs in a cell (None)'] / hourlyBH_df['S3655:Number of configured TRXs in a cell (None)'] * 100
hourlyBH_df['TRXs Number'] = hourlyBH_df['S3656:Number of available TRXs in a cell (None)']
hourlyBH_df['TCH traffic 2G, Erl']= hourlyBH_df['K3014:Traffic Volume on TCH (Erl)']
hourlyBH_df['SDCCH taffic, Erl']= hourlyBH_df['K3004:Traffic Volume on SDCCH (Erl)']
hourlyBH_df['SDCCH Congesstion, %']= hourlyBH_df['K3001:Failed SDCCH Seizures due to Busy SDCCH (None)'] / hourlyBH_df['K3003:Successful SDCCH Seizures (None)'] * 100
hourlyBH_df['TCH Congestion excluding handover, %']= (hourlyBH_df['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   hourlyBH_df['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'])/\
                                                  (hourlyBH_df['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + hourlyBH_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
hourlyBH_df['TCH Congestion including handover, %']=(hourlyBH_df['K3011A:Failed TCH Seizures due to Busy TCH (Traffic Channel) (None)']+ \
                                                   hourlyBH_df['K3021:Failed TCH Seizures due to Busy TCH (Signaling Channel) (None)'] + \
                                                  hourlyBH_df['K3011B:Failed TCH Seizures in TCH Handovers due to Busy TCH (Traffic Channel) (None)'])/\
                                                  (hourlyBH_df['K3020:TCH Seizure Requests (Signaling Channel) (None)'] + \
                                                   hourlyBH_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)']+ \
                                                   hourlyBH_df['K3010B:TCH Seizure Requests in TCH Handovers (Traffic Channel) (None)'])*100

hourlyBH_df['SDCCH Drop Rate, %']= hourlyBH_df['CM30:Call Drops on SDCCH (None)'] / hourlyBH_df['K3003:Successful SDCCH Seizures (None)'] * 100
hourlyBH_df['TCH Assignment Failure Rate, %']= (1 - hourlyBH_df['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] / hourlyBH_df['K3010A:TCH Seizure Requests (Traffic Channel) (None)'])*100
hourlyBH_df['TCH traffic HalfRate, Erl']= hourlyBH_df['K3034:TCHH Traffic Volume (Erl)']
hourlyBH_df['TCH Drop Rate, %']= hourlyBH_df['CM33:Call Drops on Traffic Channel (None)']/ \
                              (hourlyBH_df['K3013A:Successful TCH Seizures (Traffic Channel) (None)'] + \
                               hourlyBH_df['K3013B:Successful TCH Seizures in TCH handovers (Traffic Channel) (None)'] + \
                               hourlyBH_df['K3023:Successful TCH Seizures (Signaling Channel) (None)'])*100
hourlyBH_df['Handover Success Rate, %']= (hourlyBH_df['CH333:Successful Outgoing External Inter-Cell Handovers (None)']+\
                                       hourlyBH_df['CH313:Number of Successful Outgoing Internal Inter-Cell Handovers (None)'])/\
                                      (hourlyBH_df['CH310:Number of Outgoing Internal Inter-Cell Handover Requests (None)']+\
                                       hourlyBH_df['CH330:Outgoing External Inter-Cell Handover Requests (None)']) * 100
hourlyBH_df['Immediate assignment SR, %']= hourlyBH_df['K3003:Successful SDCCH Seizures (None)']  / hourlyBH_df['K3000:SDCCH Seizure Requests (None)'] *100
hourlyBH_df['CCCSR2G, %']= hourlyBH_df['Immediate assignment SR, %'] * (100 - hourlyBH_df['SDCCH Drop Rate, %']) * (100 - hourlyBH_df['TCH Assignment Failure Rate, %'])\
                                             * (100 - hourlyBH_df['TCH Drop Rate, %']) / 1000000
hourlyBH_df = hourlyBH_df.drop(list_1, axis=1) # проверка  чнн
hourlyBH_df_trans = hourlyBH_df.transpose()

#daily_df.to_excel("C:/test/sts/9-15.xls", engine='openpyxl', sheet_name='Book1')
with pd.ExcelWriter(f"{directory}{csv_name}{output_comment}.xlsx", engine='openpyxl') as writer:
    weekly_df.to_excel(writer, sheet_name='weekly')
    daily_dfall.to_excel(writer, sheet_name='daily')
    hourly_dfall.to_excel(writer, sheet_name='hourly')
    hourlyBH_df.to_excel(writer, sheet_name='busy_hour')
    weekly_df_trans.to_excel(writer, sheet_name='weekly_trans')
    daily_dfall_trans.to_excel(writer, sheet_name='daily_trans')
    hourly_dfall_trans.to_excel(writer, sheet_name='hourly_trans')
    hourlyBH_df_trans.to_excel(writer, sheet_name='busy_hour_trans')

''' переходим к работе с эксель файлом - форматирование строк и добавление графиков
    используем модуль openpyxl'''

# модуль openpyxl работает с эксель файлом
my_file = openpyxl.load_workbook(f"{directory}{csv_name}{output_comment}.xlsx")
weekly_sheet = my_file["weekly"]
daily_sheet = my_file["daily"]
hourly_sheet = my_file["hourly"]
busyhour_sheet = my_file["busy_hour"]

weekly_sheet_trans = my_file["weekly_trans"]
daily_sheet_trans = my_file["daily_trans"]
hourly_sheet_trans = my_file["hourly_trans"]
busyhour_sheet_trans = my_file["busy_hour_trans"]

weekly_sheet.column_dimensions["A"].width = 2
daily_sheet.column_dimensions["B"].width = 11
hourly_sheet.column_dimensions["A"].width = 2
busyhour_sheet.column_dimensions["A"].width = 11

weekly_sheet_trans.column_dimensions["A"].width = 35
daily_sheet_trans.column_dimensions["A"].width = 35
hourly_sheet_trans.column_dimensions["A"].width = 35
busyhour_sheet_trans.column_dimensions["A"].width = 35

hourly_sheet.delete_cols(1) # удаляем первые столбцы чтобы номера столбцов для всех KPI были одинаковыми как в дневной статистике
busyhour_sheet.delete_cols(1) # удаляем первые столбцы чтобы номера столбцов для всех KPI были одинаковыми как в дневной статистике

# определение количества строк в таблицах
last_row_weekly = weekly_sheet.max_row
last_row_daily = daily_sheet.max_row
last_row_hourly = hourly_sheet.max_row
last_row_BH = busyhour_sheet.max_row
# выставление правильного формата для столбцов с датами
for r in range(2,(last_row_daily+1)):
    daily_sheet[f'B{r}'].number_format ='DD.MM.YYYY'
for r in range(2, (last_row_hourly+1)):
    hourly_sheet[f'A{r}'].number_format ='DD'
for r in range(2,(last_row_BH+1)):
    busyhour_sheet[f'A{r}'].number_format ='DD.MM.YYYY'

for cell in daily_sheet_trans[2]:
    cell.number_format ='DD.MM.YYYY'
# выставление переноса строк для названий KPI
for cell in weekly_sheet[1]:
    cell.alignment = openpyxl.styles.Alignment(wrap_text=True)
for cell in daily_sheet[1]:
    cell.alignment = openpyxl.styles.Alignment(wrap_text=True)
for cell in hourly_sheet[1]:
    cell.alignment = openpyxl.styles.Alignment(wrap_text=True)
for cell in busyhour_sheet[1]:
    cell.alignment = openpyxl.styles.Alignment(wrap_text=True)

#  графики в недельной таблице weekly_sheet
x_values = Reference(weekly_sheet, range_string=(f"weekly!$B$2:$B${last_row_weekly}"))

traffic_TCH = Reference(weekly_sheet, min_col=5, min_row=1, max_col=5, max_row=last_row_weekly)
traffic_SD = Reference(weekly_sheet, min_col=6, min_row=1, max_col=6, max_row=last_row_weekly)
traffic_chart = LineChart()
traffic_chart.width = 40
traffic_chart.height = 10
traffic_chart.add_data(traffic_TCH, titles_from_data = True)  #
traffic_chart.add_data(traffic_SD, titles_from_data = True)  #
traffic_chart.set_categories(x_values)
traffic_chart.legend.position = 'b'
weekly_sheet.add_chart(traffic_chart, "A8")

cong = Reference(weekly_sheet, min_col=7, min_row=1, max_col=9, max_row=last_row_weekly)
cong_chart = LineChart()
cong_chart.width = 40
cong_chart.height = 10
cong_chart.add_data(cong, titles_from_data = True)  #
cong_chart.set_categories(x_values)
cong_chart.legend.position = 'b'
weekly_sheet.add_chart(cong_chart, "A28")

dropSD = Reference(weekly_sheet, min_col=10, min_row=1, max_col=10, max_row=last_row_weekly)
dropTCH = Reference(weekly_sheet, min_col=13, min_row=1, max_col=13, max_row=last_row_weekly)
drop_chart = LineChart()
drop_chart.width = 40
drop_chart.height = 10
drop_chart.add_data(dropSD, titles_from_data = True)
drop_chart.add_data(dropTCH, titles_from_data = True)
drop_chart.set_categories(x_values)
drop_chart.legend.position = 'b'
weekly_sheet.add_chart(drop_chart, "A48")

handover = Reference(weekly_sheet, min_col=14, min_row=1, max_col=14, max_row=last_row_weekly)
immediate = Reference(weekly_sheet, min_col=15, min_row=1, max_col=15, max_row=last_row_weekly)
CCSR2G = Reference(weekly_sheet, min_col=16, min_row=1, max_col=16, max_row=last_row_weekly)
HOIMMCCSR_chart = LineChart()
HOIMMCCSR_chart.width = 40
HOIMMCCSR_chart.height = 10
HOIMMCCSR_chart.add_data(handover, titles_from_data = True)
HOIMMCCSR_chart.add_data(immediate, titles_from_data = True)
HOIMMCCSR_chart.add_data(CCSR2G, titles_from_data = True)
HOIMMCCSR_chart.set_categories(x_values)
HOIMMCCSR_chart.legend.position = 'b'
weekly_sheet.add_chart(HOIMMCCSR_chart, "A68")

TRX_avail = Reference(weekly_sheet, min_col=3, min_row=1, max_col=3, max_row=last_row_weekly)
TRX_avail_chart = LineChart()
TRX_avail_chart.width = 40
TRX_avail_chart.height = 10
TRX_avail_chart.add_data(TRX_avail, titles_from_data = True)
TRX_avail_chart.set_categories(x_values)
TRX_avail_chart.legend.position = 'b'
weekly_sheet.add_chart(TRX_avail_chart, "A88")


#  графики в суточной таблице daily_sheet   last_row_daily
x_values = Reference(daily_sheet, range_string=(f"daily!$B$2:$B${last_row_daily}"))

TRXAvailability2G= Reference(daily_sheet, min_col=3, min_row=1, max_row=last_row_daily)
TRXsNumber= Reference(daily_sheet, min_col=4, min_row=1, max_row=last_row_daily)
TCHtraffic2GErl= Reference(daily_sheet, min_col=5, min_row=1, max_row=last_row_daily)
SDCCHtafficErl= Reference(daily_sheet, min_col=6, min_row=1, max_row=last_row_daily)
SDCCHCongesstion= Reference(daily_sheet, min_col=7, min_row=1, max_row=last_row_daily)
TCHCongestionexcludinghandover= Reference(daily_sheet, min_col=8, min_row=1, max_row=last_row_daily)
TCHCongestionincludinghandover= Reference(daily_sheet, min_col=9, min_row=1, max_row=last_row_daily)
SDCCHDropRate= Reference(daily_sheet, min_col=10, min_row=1, max_row=last_row_daily)
TCHAssignmentFailureRate= Reference(daily_sheet, min_col=11, min_row=1, max_row=last_row_daily)
TCHtrafficHalfRateErl= Reference(daily_sheet, min_col=12, min_row=1, max_row=last_row_daily)
TCHDropRate= Reference(daily_sheet, min_col=13, min_row=1, max_row=last_row_daily)
HandoverSuccessRate= Reference(daily_sheet, min_col=14, min_row=1, max_row=last_row_daily)
ImmediateassignmentSR= Reference(daily_sheet, min_col=15, min_row=1, max_row=last_row_daily)
CCSR2G= Reference(daily_sheet, min_col=16, min_row=1, max_row=last_row_daily)
TRXAvailability2G900= Reference(daily_sheet, min_col=17, min_row=1, max_row=last_row_daily)
TRXsNumber900= Reference(daily_sheet, min_col=18, min_row=1, max_row=last_row_daily)
TCHtraffic2GErl900= Reference(daily_sheet, min_col=19, min_row=1, max_row=last_row_daily)
SDCCHtafficErl900= Reference(daily_sheet, min_col=20, min_row=1, max_row=last_row_daily)
SDCCHCongesstion900= Reference(daily_sheet, min_col=21, min_row=1, max_row=last_row_daily)
TCHCongestionexcludinghandover900= Reference(daily_sheet, min_col=22, min_row=1, max_row=last_row_daily)
TCHCongestionincludinghandover900= Reference(daily_sheet, min_col=23, min_row=1, max_row=last_row_daily)
SDCCHDropRate900= Reference(daily_sheet, min_col=24, min_row=1, max_row=last_row_daily)
TCHAssignmentFailureRate900= Reference(daily_sheet, min_col=25, min_row=1, max_row=last_row_daily)
TCHtrafficHalfRateErl900= Reference(daily_sheet, min_col=26, min_row=1, max_row=last_row_daily)
TCHDropRate900= Reference(daily_sheet, min_col=27, min_row=1, max_row=last_row_daily)
HandoverSuccessRate900= Reference(daily_sheet, min_col=28, min_row=1, max_row=last_row_daily)
ImmediateassignmentSR900= Reference(daily_sheet, min_col=29, min_row=1, max_row=last_row_daily)
CCSR2G900= Reference(daily_sheet, min_col=30, min_row=1, max_row=last_row_daily)
TRXAvailability2G1800= Reference(daily_sheet, min_col=31, min_row=1, max_row=last_row_daily)
TRXsNumber1800= Reference(daily_sheet, min_col=32, min_row=1, max_row=last_row_daily)
TCHtraffic2GErl1800= Reference(daily_sheet, min_col=33, min_row=1, max_row=last_row_daily)
SDCCHtafficErl1800= Reference(daily_sheet, min_col=34, min_row=1, max_row=last_row_daily)
SDCCHCongesstion1800= Reference(daily_sheet, min_col=35, min_row=1, max_row=last_row_daily)
TCHCongestionexcludinghandover1800= Reference(daily_sheet, min_col=36, min_row=1, max_row=last_row_daily)
TCHCongestionincludinghandover1800= Reference(daily_sheet, min_col=37, min_row=1, max_row=last_row_daily)
SDCCHDropRate1800= Reference(daily_sheet, min_col=38, min_row=1, max_row=last_row_daily)
TCHAssignmentFailureRate1800= Reference(daily_sheet, min_col=39, min_row=1, max_row=last_row_daily)
TCHtrafficHalfRateErl1800= Reference(daily_sheet, min_col=40, min_row=1, max_row=last_row_daily)
TCHDropRate1800= Reference(daily_sheet, min_col=41, min_row=1, max_row=last_row_daily)
HandoverSuccessRate1800= Reference(daily_sheet, min_col=42, min_row=1, max_row=last_row_daily)
ImmediateassignmentSR1800= Reference(daily_sheet, min_col=43, min_row=1, max_row=last_row_daily)
CCSR2G1800= Reference(daily_sheet, min_col=44, min_row=1, max_row=last_row_daily)

traffic_chart = LineChart()
traffic_chart.width = 40
traffic_chart.height = 10
traffic_chart.add_data(TCHtraffic2GErl, titles_from_data = True)  #
traffic_chart.add_data(TCHtraffic2GErl900, titles_from_data = True)
traffic_chart.add_data(TCHtraffic2GErl1800, titles_from_data = True)
traffic_chart.set_categories(x_values)
traffic_chart.legend.position = 'b'
daily_sheet.add_chart(traffic_chart, "A18")

SDtraffic_chart = LineChart()
SDtraffic_chart.width = 40
SDtraffic_chart.height = 10
SDtraffic_chart.add_data(SDCCHtafficErl, titles_from_data = True)  #
SDtraffic_chart.add_data(SDCCHtafficErl900, titles_from_data = True)
SDtraffic_chart.add_data(SDCCHtafficErl1800, titles_from_data = True)
SDtraffic_chart.set_categories(x_values)
SDtraffic_chart.legend.position = 'b'
daily_sheet.add_chart(SDtraffic_chart, "A38")

SDcong_chart = LineChart()
SDcong_chart.width = 40
SDcong_chart.height = 10
SDcong_chart.add_data(SDCCHCongesstion, titles_from_data = True)  #
SDcong_chart.add_data(SDCCHCongesstion900, titles_from_data = True)
SDcong_chart.add_data(SDCCHCongesstion1800, titles_from_data = True)
SDcong_chart.set_categories(x_values)
SDcong_chart.legend.position = 'b'
daily_sheet.add_chart(SDcong_chart, "A58")

TCHcong_chart = LineChart()
TCHcong_chart.width = 40
TCHcong_chart.height = 10
TCHcong_chart.add_data(TCHCongestionexcludinghandover, titles_from_data = True)  #
TCHcong_chart.add_data(TCHCongestionexcludinghandover900, titles_from_data = True)
TCHcong_chart.add_data(TCHCongestionexcludinghandover1800, titles_from_data = True)
TCHcong_chart.add_data(TCHCongestionincludinghandover, titles_from_data = True)  #
TCHcong_chart.add_data(TCHCongestionincludinghandover900, titles_from_data = True)
TCHcong_chart.add_data(TCHCongestionincludinghandover1800, titles_from_data = True)
TCHcong_chart.set_categories(x_values)
TCHcong_chart.legend.position = 'b'
daily_sheet.add_chart(TCHcong_chart, "A78")

TCHdrop_chart = LineChart()
TCHdrop_chart.width = 40
TCHdrop_chart.height = 10
TCHdrop_chart.add_data(TCHDropRate, titles_from_data = True)
TCHdrop_chart.add_data(TCHDropRate900, titles_from_data = True)
TCHdrop_chart.add_data(TCHDropRate1800, titles_from_data = True)
TCHdrop_chart.set_categories(x_values)
TCHdrop_chart.legend.position = 'b'
daily_sheet.add_chart(TCHdrop_chart, "A98")

SDdrop_chart = LineChart()
SDdrop_chart.width = 40
SDdrop_chart.height = 10
SDdrop_chart.add_data(SDCCHDropRate, titles_from_data = True)
SDdrop_chart.add_data(SDCCHDropRate900, titles_from_data = True)
SDdrop_chart.add_data(SDCCHDropRate1800, titles_from_data = True)
SDdrop_chart.set_categories(x_values)
SDdrop_chart.legend.position = 'b'
daily_sheet.add_chart(SDdrop_chart, "A118")

HOSR_chart = LineChart()
HOSR_chart.width = 40
HOSR_chart.height = 10
HOSR_chart.add_data(HandoverSuccessRate, titles_from_data = True)
HOSR_chart.add_data(HandoverSuccessRate900, titles_from_data = True)
HOSR_chart.add_data(HandoverSuccessRate1800, titles_from_data = True)
HOSR_chart.set_categories(x_values)
HOSR_chart.legend.position = 'b'
daily_sheet.add_chart(HOSR_chart, "A138")

Assignment_chart = LineChart()
Assignment_chart.width = 40
Assignment_chart.height = 10
Assignment_chart.add_data(TCHAssignmentFailureRate, titles_from_data = True)
Assignment_chart.add_data(TCHAssignmentFailureRate900, titles_from_data = True)
Assignment_chart.add_data(TCHAssignmentFailureRate1800, titles_from_data = True)
Assignment_chart.set_categories(x_values)
Assignment_chart.legend.position = 'b'
daily_sheet.add_chart(Assignment_chart, "A158")

ImmAssignment_chart = LineChart()
ImmAssignment_chart.width = 40
ImmAssignment_chart.height = 10
ImmAssignment_chart.add_data(ImmediateassignmentSR, titles_from_data = True)
ImmAssignment_chart.add_data(ImmediateassignmentSR900, titles_from_data = True)
ImmAssignment_chart.add_data(ImmediateassignmentSR1800, titles_from_data = True)
ImmAssignment_chart.set_categories(x_values)
ImmAssignment_chart.legend.position = 'b'
daily_sheet.add_chart(ImmAssignment_chart, "A178")

CSSR_chart = LineChart()
CSSR_chart.width = 40
CSSR_chart.height = 10
CSSR_chart.add_data(CCSR2G, titles_from_data = True)
CSSR_chart.add_data(CCSR2G900, titles_from_data = True)
CSSR_chart.add_data(CCSR2G1800, titles_from_data = True)
CSSR_chart.set_categories(x_values)
CSSR_chart.legend.position = 'b'
daily_sheet.add_chart(CSSR_chart, "A198")

TRXavailability_chart = LineChart()
TRXavailability_chart.width = 40
TRXavailability_chart.height = 10
TRXavailability_chart.add_data(TRXAvailability2G, titles_from_data = True)
TRXavailability_chart.add_data(TRXAvailability2G900, titles_from_data = True)
TRXavailability_chart.add_data(TRXAvailability2G1800, titles_from_data = True)
TRXavailability_chart.set_categories(x_values)
TRXavailability_chart.legend.position = 'b'
daily_sheet.add_chart(TRXavailability_chart, "A218")

#  графики в часовой таблице hourly_sheet   last_row_hourly
x_values = Reference(hourly_sheet, range_string=(f"hourly!$A$2:$B${last_row_hourly}"))

TRXAvailability2G= Reference(hourly_sheet, min_col=3, min_row=1, max_row=last_row_hourly)
TRXsNumber= Reference(hourly_sheet, min_col=4, min_row=1, max_row=last_row_hourly)
TCHtraffic2GErl= Reference(hourly_sheet, min_col=5, min_row=1, max_row=last_row_hourly)
SDCCHtafficErl= Reference(hourly_sheet, min_col=6, min_row=1, max_row=last_row_hourly)
SDCCHCongesstion= Reference(hourly_sheet, min_col=7, min_row=1, max_row=last_row_hourly)
TCHCongestionexcludinghandover= Reference(hourly_sheet, min_col=8, min_row=1, max_row=last_row_hourly)
TCHCongestionincludinghandover= Reference(hourly_sheet, min_col=9, min_row=1, max_row=last_row_hourly)
SDCCHDropRate= Reference(hourly_sheet, min_col=10, min_row=1, max_row=last_row_hourly)
TCHAssignmentFailureRate= Reference(hourly_sheet, min_col=11, min_row=1, max_row=last_row_hourly)
TCHtrafficHalfRateErl= Reference(hourly_sheet, min_col=12, min_row=1, max_row=last_row_hourly)
TCHDropRate= Reference(hourly_sheet, min_col=13, min_row=1, max_row=last_row_hourly)
HandoverSuccessRate= Reference(hourly_sheet, min_col=14, min_row=1, max_row=last_row_hourly)
ImmediateassignmentSR= Reference(hourly_sheet, min_col=15, min_row=1, max_row=last_row_hourly)
CCSR2G= Reference(hourly_sheet, min_col=16, min_row=1, max_row=last_row_hourly)
TRXAvailability2G900= Reference(hourly_sheet, min_col=17, min_row=1, max_row=last_row_hourly)
TRXsNumber900= Reference(hourly_sheet, min_col=18, min_row=1, max_row=last_row_hourly)
TCHtraffic2GErl900= Reference(hourly_sheet, min_col=19, min_row=1, max_row=last_row_hourly)
SDCCHtafficErl900= Reference(hourly_sheet, min_col=20, min_row=1, max_row=last_row_hourly)
SDCCHCongesstion900= Reference(hourly_sheet, min_col=21, min_row=1, max_row=last_row_hourly)
TCHCongestionexcludinghandover900= Reference(hourly_sheet, min_col=22, min_row=1, max_row=last_row_hourly)
TCHCongestionincludinghandover900= Reference(hourly_sheet, min_col=23, min_row=1, max_row=last_row_hourly)
SDCCHDropRate900= Reference(hourly_sheet, min_col=24, min_row=1, max_row=last_row_hourly)
TCHAssignmentFailureRate900= Reference(hourly_sheet, min_col=25, min_row=1, max_row=last_row_hourly)
TCHtrafficHalfRateErl900= Reference(hourly_sheet, min_col=26, min_row=1, max_row=last_row_hourly)
TCHDropRate900= Reference(hourly_sheet, min_col=27, min_row=1, max_row=last_row_hourly)
HandoverSuccessRate900= Reference(hourly_sheet, min_col=28, min_row=1, max_row=last_row_hourly)
ImmediateassignmentSR900= Reference(hourly_sheet, min_col=29, min_row=1, max_row=last_row_hourly)
CCSR2G900= Reference(hourly_sheet, min_col=30, min_row=1, max_row=last_row_hourly)
TRXAvailability2G1800= Reference(hourly_sheet, min_col=31, min_row=1, max_row=last_row_hourly)
TRXsNumber1800= Reference(hourly_sheet, min_col=32, min_row=1, max_row=last_row_hourly)
TCHtraffic2GErl1800= Reference(hourly_sheet, min_col=33, min_row=1, max_row=last_row_hourly)
SDCCHtafficErl1800= Reference(hourly_sheet, min_col=34, min_row=1, max_row=last_row_hourly)
SDCCHCongesstion1800= Reference(hourly_sheet, min_col=35, min_row=1, max_row=last_row_hourly)
TCHCongestionexcludinghandover1800= Reference(hourly_sheet, min_col=36, min_row=1, max_row=last_row_hourly)
TCHCongestionincludinghandover1800= Reference(hourly_sheet, min_col=37, min_row=1, max_row=last_row_hourly)
SDCCHDropRate1800= Reference(hourly_sheet, min_col=38, min_row=1, max_row=last_row_hourly)
TCHAssignmentFailureRate1800= Reference(hourly_sheet, min_col=39, min_row=1, max_row=last_row_hourly)
TCHtrafficHalfRateErl1800= Reference(hourly_sheet, min_col=40, min_row=1, max_row=last_row_hourly)
TCHDropRate1800= Reference(hourly_sheet, min_col=41, min_row=1, max_row=last_row_hourly)
HandoverSuccessRate1800= Reference(hourly_sheet, min_col=42, min_row=1, max_row=last_row_hourly)
ImmediateassignmentSR1800= Reference(hourly_sheet, min_col=43, min_row=1, max_row=last_row_hourly)
CCSR2G1800= Reference(hourly_sheet, min_col=44, min_row=1, max_row=last_row_hourly)

traffic_chart = LineChart()
traffic_chart.width = 40
traffic_chart.height = 10
traffic_chart.add_data(TCHtraffic2GErl, titles_from_data = True)  #
traffic_chart.add_data(TCHtraffic2GErl900, titles_from_data = True)
traffic_chart.add_data(TCHtraffic2GErl1800, titles_from_data = True)
traffic_chart.set_categories(x_values)
traffic_chart.legend.position = 'b'
hourly_sheet.add_chart(traffic_chart, "A18")

SDtraffic_chart = LineChart()
SDtraffic_chart.width = 40
SDtraffic_chart.height = 10
SDtraffic_chart.add_data(SDCCHtafficErl, titles_from_data = True)  #
SDtraffic_chart.add_data(SDCCHtafficErl900, titles_from_data = True)
SDtraffic_chart.add_data(SDCCHtafficErl1800, titles_from_data = True)
SDtraffic_chart.set_categories(x_values)
SDtraffic_chart.legend.position = 'b'
hourly_sheet.add_chart(SDtraffic_chart, "A38")

SDcong_chart = LineChart()
SDcong_chart.width = 40
SDcong_chart.height = 10
SDcong_chart.add_data(SDCCHCongesstion, titles_from_data = True)  #
SDcong_chart.add_data(SDCCHCongesstion900, titles_from_data = True)
SDcong_chart.add_data(SDCCHCongesstion1800, titles_from_data = True)
SDcong_chart.set_categories(x_values)
SDcong_chart.legend.position = 'b'
hourly_sheet.add_chart(SDcong_chart, "A58")

TCHcong_chart = LineChart()
TCHcong_chart.width = 40
TCHcong_chart.height = 10
TCHcong_chart.add_data(TCHCongestionexcludinghandover, titles_from_data = True)  #
TCHcong_chart.add_data(TCHCongestionexcludinghandover900, titles_from_data = True)
TCHcong_chart.add_data(TCHCongestionexcludinghandover1800, titles_from_data = True)
TCHcong_chart.add_data(TCHCongestionincludinghandover, titles_from_data = True)  #
TCHcong_chart.add_data(TCHCongestionincludinghandover900, titles_from_data = True)
TCHcong_chart.add_data(TCHCongestionincludinghandover1800, titles_from_data = True)
TCHcong_chart.set_categories(x_values)
TCHcong_chart.legend.position = 'b'
hourly_sheet.add_chart(TCHcong_chart, "A78")

TCHdrop_chart = LineChart()
TCHdrop_chart.width = 40
TCHdrop_chart.height = 10
TCHdrop_chart.add_data(TCHDropRate, titles_from_data = True)
TCHdrop_chart.add_data(TCHDropRate900, titles_from_data = True)
TCHdrop_chart.add_data(TCHDropRate1800, titles_from_data = True)
TCHdrop_chart.set_categories(x_values)
TCHdrop_chart.legend.position = 'b'
hourly_sheet.add_chart(TCHdrop_chart, "A98")

SDdrop_chart = LineChart()
SDdrop_chart.width = 40
SDdrop_chart.height = 10
SDdrop_chart.add_data(SDCCHDropRate, titles_from_data = True)
SDdrop_chart.add_data(SDCCHDropRate900, titles_from_data = True)
SDdrop_chart.add_data(SDCCHDropRate1800, titles_from_data = True)
SDdrop_chart.set_categories(x_values)
SDdrop_chart.legend.position = 'b'
hourly_sheet.add_chart(SDdrop_chart, "A118")

HOSR_chart = LineChart()
HOSR_chart.width = 40
HOSR_chart.height = 10
HOSR_chart.add_data(HandoverSuccessRate, titles_from_data = True)
HOSR_chart.add_data(HandoverSuccessRate900, titles_from_data = True)
HOSR_chart.add_data(HandoverSuccessRate1800, titles_from_data = True)
HOSR_chart.set_categories(x_values)
HOSR_chart.legend.position = 'b'
hourly_sheet.add_chart(HOSR_chart, "A138")

Assignment_chart = LineChart()
Assignment_chart.width = 40
Assignment_chart.height = 10
Assignment_chart.add_data(TCHAssignmentFailureRate, titles_from_data = True)
Assignment_chart.add_data(TCHAssignmentFailureRate900, titles_from_data = True)
Assignment_chart.add_data(TCHAssignmentFailureRate1800, titles_from_data = True)
Assignment_chart.set_categories(x_values)
Assignment_chart.legend.position = 'b'
hourly_sheet.add_chart(Assignment_chart, "A158")

ImmAssignment_chart = LineChart()
ImmAssignment_chart.width = 40
ImmAssignment_chart.height = 10
ImmAssignment_chart.add_data(ImmediateassignmentSR, titles_from_data = True)
ImmAssignment_chart.add_data(ImmediateassignmentSR900, titles_from_data = True)
ImmAssignment_chart.add_data(ImmediateassignmentSR1800, titles_from_data = True)
ImmAssignment_chart.set_categories(x_values)
ImmAssignment_chart.legend.position = 'b'
hourly_sheet.add_chart(ImmAssignment_chart, "A178")

CSSR_chart = LineChart()
CSSR_chart.width = 40
CSSR_chart.height = 10
CSSR_chart.add_data(CCSR2G, titles_from_data = True)
CSSR_chart.add_data(CCSR2G900, titles_from_data = True)
CSSR_chart.add_data(CCSR2G1800, titles_from_data = True)
CSSR_chart.set_categories(x_values)
CSSR_chart.legend.position = 'b'
hourly_sheet.add_chart(CSSR_chart, "A198")

TRXavailability_chart = LineChart()
TRXavailability_chart.width = 40
TRXavailability_chart.height = 10
TRXavailability_chart.add_data(TRXAvailability2G, titles_from_data = True)
TRXavailability_chart.add_data(TRXAvailability2G900, titles_from_data = True)
TRXavailability_chart.add_data(TRXAvailability2G1800, titles_from_data = True)
TRXavailability_chart.set_categories(x_values)
TRXavailability_chart.legend.position = 'b'
hourly_sheet.add_chart(TRXavailability_chart, "A218")

# графики в чнн BH busyhour_sheet   last_row_BH
x_values = Reference(busyhour_sheet, range_string=(f"busy_hour!$A$2:$A${last_row_BH}"))

TRXAvailability2G= Reference(busyhour_sheet, min_col=3, min_row=1, max_row=last_row_BH)
TRXsNumber= Reference(busyhour_sheet, min_col=4, min_row=1, max_row=last_row_BH)
TCHtraffic2GErl= Reference(busyhour_sheet, min_col=5, min_row=1, max_row=last_row_BH)
SDCCHtafficErl= Reference(busyhour_sheet, min_col=6, min_row=1, max_row=last_row_BH)
SDCCHCongesstion= Reference(busyhour_sheet, min_col=7, min_row=1, max_row=last_row_BH)
TCHCongestionexcludinghandover= Reference(busyhour_sheet, min_col=8, min_row=1, max_row=last_row_BH)
TCHCongestionincludinghandover= Reference(busyhour_sheet, min_col=9, min_row=1, max_row=last_row_BH)
SDCCHDropRate= Reference(busyhour_sheet, min_col=10, min_row=1, max_row=last_row_BH)
TCHAssignmentFailureRate= Reference(busyhour_sheet, min_col=11, min_row=1, max_row=last_row_BH)
TCHtrafficHalfRateErl= Reference(busyhour_sheet, min_col=12, min_row=1, max_row=last_row_BH)
TCHDropRate= Reference(busyhour_sheet, min_col=13, min_row=1, max_row=last_row_BH)
HandoverSuccessRate= Reference(busyhour_sheet, min_col=14, min_row=1, max_row=last_row_BH)
ImmediateassignmentSR= Reference(busyhour_sheet, min_col=15, min_row=1, max_row=last_row_BH)
CCSR2G= Reference(busyhour_sheet, min_col=16, min_row=1, max_row=last_row_BH)
TRXAvailability2G900= Reference(busyhour_sheet, min_col=17, min_row=1, max_row=last_row_BH)
TRXsNumber900= Reference(busyhour_sheet, min_col=18, min_row=1, max_row=last_row_BH)
TCHtraffic2GErl900= Reference(busyhour_sheet, min_col=19, min_row=1, max_row=last_row_BH)
SDCCHtafficErl900= Reference(busyhour_sheet, min_col=20, min_row=1, max_row=last_row_BH)
SDCCHCongesstion900= Reference(busyhour_sheet, min_col=21, min_row=1, max_row=last_row_BH)
TCHCongestionexcludinghandover900= Reference(busyhour_sheet, min_col=22, min_row=1, max_row=last_row_BH)
TCHCongestionincludinghandover900= Reference(busyhour_sheet, min_col=23, min_row=1, max_row=last_row_BH)
SDCCHDropRate900= Reference(busyhour_sheet, min_col=24, min_row=1, max_row=last_row_BH)
TCHAssignmentFailureRate900= Reference(busyhour_sheet, min_col=25, min_row=1, max_row=last_row_BH)
TCHtrafficHalfRateErl900= Reference(busyhour_sheet, min_col=26, min_row=1, max_row=last_row_BH)
TCHDropRate900= Reference(busyhour_sheet, min_col=27, min_row=1, max_row=last_row_BH)
HandoverSuccessRate900= Reference(busyhour_sheet, min_col=28, min_row=1, max_row=last_row_BH)
ImmediateassignmentSR900= Reference(busyhour_sheet, min_col=29, min_row=1, max_row=last_row_BH)
CCSR2G900= Reference(busyhour_sheet, min_col=30, min_row=1, max_row=last_row_BH)
TRXAvailability2G1800= Reference(busyhour_sheet, min_col=31, min_row=1, max_row=last_row_BH)
TRXsNumber1800= Reference(busyhour_sheet, min_col=32, min_row=1, max_row=last_row_BH)
TCHtraffic2GErl1800= Reference(busyhour_sheet, min_col=33, min_row=1, max_row=last_row_BH)
SDCCHtafficErl1800= Reference(busyhour_sheet, min_col=34, min_row=1, max_row=last_row_BH)
SDCCHCongesstion1800= Reference(busyhour_sheet, min_col=35, min_row=1, max_row=last_row_BH)
TCHCongestionexcludinghandover1800= Reference(busyhour_sheet, min_col=36, min_row=1, max_row=last_row_BH)
TCHCongestionincludinghandover1800= Reference(busyhour_sheet, min_col=37, min_row=1, max_row=last_row_BH)
SDCCHDropRate1800= Reference(busyhour_sheet, min_col=38, min_row=1, max_row=last_row_BH)
TCHAssignmentFailureRate1800= Reference(busyhour_sheet, min_col=39, min_row=1, max_row=last_row_BH)
TCHtrafficHalfRateErl1800= Reference(busyhour_sheet, min_col=40, min_row=1, max_row=last_row_BH)
TCHDropRate1800= Reference(busyhour_sheet, min_col=41, min_row=1, max_row=last_row_BH)
HandoverSuccessRate1800= Reference(busyhour_sheet, min_col=42, min_row=1, max_row=last_row_BH)
ImmediateassignmentSR1800= Reference(busyhour_sheet, min_col=43, min_row=1, max_row=last_row_BH)
CCSR2G1800= Reference(busyhour_sheet, min_col=44, min_row=1, max_row=last_row_BH)

traffic_chart = LineChart()
traffic_chart.width = 40
traffic_chart.height = 10
traffic_chart.add_data(TCHtraffic2GErl, titles_from_data = True)  #
traffic_chart.add_data(TCHtraffic2GErl900, titles_from_data = True)
traffic_chart.add_data(TCHtraffic2GErl1800, titles_from_data = True)
traffic_chart.set_categories(x_values)
traffic_chart.legend.position = 'b'
busyhour_sheet.add_chart(traffic_chart, "A18")

SDtraffic_chart = LineChart()
SDtraffic_chart.width = 40
SDtraffic_chart.height = 10
SDtraffic_chart.add_data(SDCCHtafficErl, titles_from_data = True)  #
SDtraffic_chart.add_data(SDCCHtafficErl900, titles_from_data = True)
SDtraffic_chart.add_data(SDCCHtafficErl1800, titles_from_data = True)
SDtraffic_chart.set_categories(x_values)
SDtraffic_chart.legend.position = 'b'
busyhour_sheet.add_chart(SDtraffic_chart, "A38")

SDcong_chart = LineChart()
SDcong_chart.width = 40
SDcong_chart.height = 10
SDcong_chart.add_data(SDCCHCongesstion, titles_from_data = True)  #
SDcong_chart.add_data(SDCCHCongesstion900, titles_from_data = True)
SDcong_chart.add_data(SDCCHCongesstion1800, titles_from_data = True)
SDcong_chart.set_categories(x_values)
SDcong_chart.legend.position = 'b'
busyhour_sheet.add_chart(SDcong_chart, "A58")

TCHcong_chart = LineChart()
TCHcong_chart.width = 40
TCHcong_chart.height = 10
TCHcong_chart.add_data(TCHCongestionexcludinghandover, titles_from_data = True)  #
TCHcong_chart.add_data(TCHCongestionexcludinghandover900, titles_from_data = True)
TCHcong_chart.add_data(TCHCongestionexcludinghandover1800, titles_from_data = True)
TCHcong_chart.add_data(TCHCongestionincludinghandover, titles_from_data = True)  #
TCHcong_chart.add_data(TCHCongestionincludinghandover900, titles_from_data = True)
TCHcong_chart.add_data(TCHCongestionincludinghandover1800, titles_from_data = True)
TCHcong_chart.set_categories(x_values)
TCHcong_chart.legend.position = 'b'
busyhour_sheet.add_chart(TCHcong_chart, "A78")

TCHdrop_chart = LineChart()
TCHdrop_chart.width = 40
TCHdrop_chart.height = 10
TCHdrop_chart.add_data(TCHDropRate, titles_from_data = True)
TCHdrop_chart.add_data(TCHDropRate900, titles_from_data = True)
TCHdrop_chart.add_data(TCHDropRate1800, titles_from_data = True)
TCHdrop_chart.set_categories(x_values)
TCHdrop_chart.legend.position = 'b'
busyhour_sheet.add_chart(TCHdrop_chart, "A98")

SDdrop_chart = LineChart()
SDdrop_chart.width = 40
SDdrop_chart.height = 10
SDdrop_chart.add_data(SDCCHDropRate, titles_from_data = True)
SDdrop_chart.add_data(SDCCHDropRate900, titles_from_data = True)
SDdrop_chart.add_data(SDCCHDropRate1800, titles_from_data = True)
SDdrop_chart.set_categories(x_values)
SDdrop_chart.legend.position = 'b'
busyhour_sheet.add_chart(SDdrop_chart, "A118")

HOSR_chart = LineChart()
HOSR_chart.width = 40
HOSR_chart.height = 10
HOSR_chart.add_data(HandoverSuccessRate, titles_from_data = True)
HOSR_chart.add_data(HandoverSuccessRate900, titles_from_data = True)
HOSR_chart.add_data(HandoverSuccessRate1800, titles_from_data = True)
HOSR_chart.set_categories(x_values)
HOSR_chart.legend.position = 'b'
busyhour_sheet.add_chart(HOSR_chart, "A138")

Assignment_chart = LineChart()
Assignment_chart.width = 40
Assignment_chart.height = 10
Assignment_chart.add_data(TCHAssignmentFailureRate, titles_from_data = True)
Assignment_chart.add_data(TCHAssignmentFailureRate900, titles_from_data = True)
Assignment_chart.add_data(TCHAssignmentFailureRate1800, titles_from_data = True)
Assignment_chart.set_categories(x_values)
Assignment_chart.legend.position = 'b'
busyhour_sheet.add_chart(Assignment_chart, "A158")

ImmAssignment_chart = LineChart()
ImmAssignment_chart.width = 40
ImmAssignment_chart.height = 10
ImmAssignment_chart.add_data(ImmediateassignmentSR, titles_from_data = True)
ImmAssignment_chart.add_data(ImmediateassignmentSR900, titles_from_data = True)
ImmAssignment_chart.add_data(ImmediateassignmentSR1800, titles_from_data = True)
ImmAssignment_chart.set_categories(x_values)
ImmAssignment_chart.legend.position = 'b'
busyhour_sheet.add_chart(ImmAssignment_chart, "A178")

CSSR_chart = LineChart()
CSSR_chart.width = 40
CSSR_chart.height = 10
CSSR_chart.add_data(CCSR2G, titles_from_data = True)
CSSR_chart.add_data(CCSR2G900, titles_from_data = True)
CSSR_chart.add_data(CCSR2G1800, titles_from_data = True)
CSSR_chart.set_categories(x_values)
CSSR_chart.legend.position = 'b'
busyhour_sheet.add_chart(CSSR_chart, "A198")

TRXavailability_chart = LineChart()
TRXavailability_chart.width = 40
TRXavailability_chart.height = 10
TRXavailability_chart.add_data(TRXAvailability2G, titles_from_data = True)
TRXavailability_chart.add_data(TRXAvailability2G900, titles_from_data = True)
TRXavailability_chart.add_data(TRXAvailability2G1800, titles_from_data = True)
TRXavailability_chart.set_categories(x_values)
TRXavailability_chart.legend.position = 'b'
busyhour_sheet.add_chart(TRXavailability_chart, "A218")

my_file.save(f"{directory}{csv_name}{output_comment}.xlsx")


winsound.Beep(2500, 1000)
winsound.Beep(3000, 1000)
print('готово')
